
Seavo_ControlSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  080049ec  080049ec  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049ec  080049ec  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080049f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a0  200000dc  08004ad0  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000127c  08004ad0  0002127c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013407  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db8  00000000  00000000  0003350c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000362c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00037378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190ef  00000000  00000000  00038300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012af4  00000000  00000000  000513ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f57  00000000  00000000  00063ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000f5e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000dc 	.word	0x200000dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004918 	.word	0x08004918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e0 	.word	0x200000e0
 800014c:	08004918 	.word	0x08004918

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200000fc 	.word	0x200000fc
 800017c:	200001b0 	.word	0x200001b0

08000180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000186:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <MX_FREERTOS_Init+0x30>)
 8000188:	1d3c      	adds	r4, r7, #4
 800018a:	461d      	mov	r5, r3
 800018c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800018e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2100      	movs	r1, #0
 800019c:	4618      	mov	r0, r3
 800019e:	f003 f8e5 	bl	800336c <osThreadCreate>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a03      	ldr	r2, [pc, #12]	; (80001b4 <MX_FREERTOS_Init+0x34>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80001a8:	bf00      	nop
 80001aa:	3720      	adds	r7, #32
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bdb0      	pop	{r4, r5, r7, pc}
 80001b0:	0800493c 	.word	0x0800493c
 80001b4:	200000f8 	.word	0x200000f8

080001b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001c0:	2001      	movs	r0, #1
 80001c2:	f003 f91f 	bl	8003404 <osDelay>
 80001c6:	e7fb      	b.n	80001c0 <StartDefaultTask+0x8>

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0310 	add.w	r3, r7, #16
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001dc:	4b45      	ldr	r3, [pc, #276]	; (80002f4 <MX_GPIO_Init+0x12c>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a44      	ldr	r2, [pc, #272]	; (80002f4 <MX_GPIO_Init+0x12c>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b42      	ldr	r3, [pc, #264]	; (80002f4 <MX_GPIO_Init+0x12c>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0310 	and.w	r3, r3, #16
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f4:	4b3f      	ldr	r3, [pc, #252]	; (80002f4 <MX_GPIO_Init+0x12c>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a3e      	ldr	r2, [pc, #248]	; (80002f4 <MX_GPIO_Init+0x12c>)
 80001fa:	f043 0320 	orr.w	r3, r3, #32
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b3c      	ldr	r3, [pc, #240]	; (80002f4 <MX_GPIO_Init+0x12c>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0320 	and.w	r3, r3, #32
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020c:	4b39      	ldr	r3, [pc, #228]	; (80002f4 <MX_GPIO_Init+0x12c>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a38      	ldr	r2, [pc, #224]	; (80002f4 <MX_GPIO_Init+0x12c>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <MX_GPIO_Init+0x12c>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f003 0304 	and.w	r3, r3, #4
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b33      	ldr	r3, [pc, #204]	; (80002f4 <MX_GPIO_Init+0x12c>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a32      	ldr	r2, [pc, #200]	; (80002f4 <MX_GPIO_Init+0x12c>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b30      	ldr	r3, [pc, #192]	; (80002f4 <MX_GPIO_Init+0x12c>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	603b      	str	r3, [r7, #0]
 800023a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000242:	482d      	ldr	r0, [pc, #180]	; (80002f8 <MX_GPIO_Init+0x130>)
 8000244:	f001 fa0b 	bl	800165e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2101      	movs	r1, #1
 800024c:	482b      	ldr	r0, [pc, #172]	; (80002fc <MX_GPIO_Init+0x134>)
 800024e:	f001 fa06 	bl	800165e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4829      	ldr	r0, [pc, #164]	; (8000300 <MX_GPIO_Init+0x138>)
 800025a:	f001 fa00 	bl	800165e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800025e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000264:	2301      	movs	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2302      	movs	r3, #2
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	4619      	mov	r1, r3
 8000276:	4820      	ldr	r0, [pc, #128]	; (80002f8 <MX_GPIO_Init+0x130>)
 8000278:	f001 f856 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800027c:	2301      	movs	r3, #1
 800027e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000280:	2311      	movs	r3, #17
 8000282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000284:	2300      	movs	r3, #0
 8000286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000288:	2302      	movs	r3, #2
 800028a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028c:	f107 0310 	add.w	r3, r7, #16
 8000290:	4619      	mov	r1, r3
 8000292:	481a      	ldr	r0, [pc, #104]	; (80002fc <MX_GPIO_Init+0x134>)
 8000294:	f001 f848 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000298:	f248 031e 	movw	r3, #32798	; 0x801e
 800029c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	4619      	mov	r1, r3
 80002ac:	4813      	ldr	r0, [pc, #76]	; (80002fc <MX_GPIO_Init+0x134>)
 80002ae:	f001 f83b 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80002b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c0:	2302      	movs	r3, #2
 80002c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	480d      	ldr	r0, [pc, #52]	; (8000300 <MX_GPIO_Init+0x138>)
 80002cc:	f001 f82c 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_3;
 80002d0:	f640 0308 	movw	r3, #2056	; 0x808
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	4619      	mov	r1, r3
 80002e4:	4806      	ldr	r0, [pc, #24]	; (8000300 <MX_GPIO_Init+0x138>)
 80002e6:	f001 f81f 	bl	8001328 <HAL_GPIO_Init>

}
 80002ea:	bf00      	nop
 80002ec:	3720      	adds	r7, #32
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40011000 	.word	0x40011000
 80002fc:	40010800 	.word	0x40010800
 8000300:	40010c00 	.word	0x40010c00

08000304 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800030a:	f000 fefb 	bl	8001104 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800030e:	f000 f84f 	bl	80003b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000312:	f7ff ff59 	bl	80001c8 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000316:	f000 fc93 	bl	8000c40 <MX_TIM1_Init>
	MX_TIM4_Init();
 800031a:	f000 fd7f 	bl	8000e1c <MX_TIM4_Init>
	MX_TIM3_Init();
 800031e:	f000 fd2f 	bl	8000d80 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000322:	f000 fe53 	bl	8000fcc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	System_State = System_OpenSequenceOn;
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <main+0x94>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]
	xTaskCreate(ShutDowenSequenceFunctio_Task, NULL, 100 , NULL , 4 , NULL);
 800032c:	2300      	movs	r3, #0
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	2304      	movs	r3, #4
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2300      	movs	r3, #0
 8000336:	2264      	movs	r2, #100	; 0x64
 8000338:	2100      	movs	r1, #0
 800033a:	4818      	ldr	r0, [pc, #96]	; (800039c <main+0x98>)
 800033c:	f003 f981 	bl	8003642 <xTaskCreate>
	xTaskCreate(ControlMainFunction_Task, NULL, 100 , NULL , 2 , NULL);
 8000340:	2300      	movs	r3, #0
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	2302      	movs	r3, #2
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2300      	movs	r3, #0
 800034a:	2264      	movs	r2, #100	; 0x64
 800034c:	2100      	movs	r1, #0
 800034e:	4814      	ldr	r0, [pc, #80]	; (80003a0 <main+0x9c>)
 8000350:	f003 f977 	bl	8003642 <xTaskCreate>
	xTaskCreate(SpeedControl_Task, NULL, 100 , NULL , 3 , NULL);
 8000354:	2300      	movs	r3, #0
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	2303      	movs	r3, #3
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2300      	movs	r3, #0
 800035e:	2264      	movs	r2, #100	; 0x64
 8000360:	2100      	movs	r1, #0
 8000362:	4810      	ldr	r0, [pc, #64]	; (80003a4 <main+0xa0>)
 8000364:	f003 f96d 	bl	8003642 <xTaskCreate>
	xTaskCreate(DashboardDisplay_Task, NULL, 100 , NULL , 1 , NULL);
 8000368:	2300      	movs	r3, #0
 800036a:	9301      	str	r3, [sp, #4]
 800036c:	2301      	movs	r3, #1
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2300      	movs	r3, #0
 8000372:	2264      	movs	r2, #100	; 0x64
 8000374:	2100      	movs	r1, #0
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <main+0xa4>)
 8000378:	f003 f963 	bl	8003642 <xTaskCreate>

	__HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1 , 500);
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0xa8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000386:	2100      	movs	r1, #0
 8000388:	4808      	ldr	r0, [pc, #32]	; (80003ac <main+0xa8>)
 800038a:	f001 fee1 	bl	8002150 <HAL_TIM_PWM_Start>
	//HAL_UART_Transmit(&huart1, Display_IntroScreen, sizeof(Display_IntroScreen), HAL_MAX_DELAY);

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800038e:	f7ff fef7 	bl	8000180 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000392:	f002 ffe4 	bl	800335e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000396:	e7fe      	b.n	8000396 <main+0x92>
 8000398:	200003b9 	.word	0x200003b9
 800039c:	08000611 	.word	0x08000611
 80003a0:	0800043d 	.word	0x0800043d
 80003a4:	08000759 	.word	0x08000759
 80003a8:	08000809 	.word	0x08000809
 80003ac:	20000404 	.word	0x20000404

080003b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b090      	sub	sp, #64	; 0x40
 80003b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	2228      	movs	r2, #40	; 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f004 f9e4 	bl	800478c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e0:	2301      	movs	r3, #1
 80003e2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e4:	2302      	movs	r3, #2
 80003e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	f107 0318 	add.w	r3, r7, #24
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 f949 	bl	8001690 <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000404:	f000 fb28 	bl	8000a58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	230f      	movs	r3, #15
 800040a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040c:	2302      	movs	r3, #2
 800040e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000418:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fbb6 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x82>
	{
		Error_Handler();
 800042e:	f000 fb13 	bl	8000a58 <Error_Handler>
	}
}
 8000432:	bf00      	nop
 8000434:	3740      	adds	r7, #64	; 0x40
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <ControlMainFunction_Task>:

/* USER CODE BEGIN 4 */

void ControlMainFunction_Task(void *argument) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	while (1) {
		switch (System_State) {
 8000444:	4b65      	ldr	r3, [pc, #404]	; (80005dc <ControlMainFunction_Task+0x1a0>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d002      	beq.n	8000452 <ControlMainFunction_Task+0x16>
 800044c:	2b01      	cmp	r3, #1
 800044e:	d058      	beq.n	8000502 <ControlMainFunction_Task+0xc6>
				}
			}
			break;

		default:
			break;
 8000450:	e0bf      	b.n	80005d2 <ControlMainFunction_Task+0x196>
			u8_RequestedSpeed = 500;
 8000452:	4b63      	ldr	r3, [pc, #396]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 8000454:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000458:	601a      	str	r2, [r3, #0]
			iterator = 1;
 800045a:	4b62      	ldr	r3, [pc, #392]	; (80005e4 <ControlMainFunction_Task+0x1a8>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
			current_speed = 500;
 8000460:	4b61      	ldr	r3, [pc, #388]	; (80005e8 <ControlMainFunction_Task+0x1ac>)
 8000462:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000466:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 8000468:	4b5f      	ldr	r3, [pc, #380]	; (80005e8 <ControlMainFunction_Task+0x1ac>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b5f      	ldr	r3, [pc, #380]	; (80005ec <ControlMainFunction_Task+0x1b0>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
			Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000472:	2108      	movs	r1, #8
 8000474:	485e      	ldr	r0, [pc, #376]	; (80005f0 <ControlMainFunction_Task+0x1b4>)
 8000476:	f001 f8db 	bl	8001630 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	461a      	mov	r2, r3
 800047e:	4b5d      	ldr	r3, [pc, #372]	; (80005f4 <ControlMainFunction_Task+0x1b8>)
 8000480:	701a      	strb	r2, [r3, #0]
			Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000486:	485a      	ldr	r0, [pc, #360]	; (80005f0 <ControlMainFunction_Task+0x1b4>)
 8000488:	f001 f8d2 	bl	8001630 <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	4b59      	ldr	r3, [pc, #356]	; (80005f8 <ControlMainFunction_Task+0x1bc>)
 8000492:	701a      	strb	r2, [r3, #0]
			if (Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_RESET) {
 8000494:	4b57      	ldr	r3, [pc, #348]	; (80005f4 <ControlMainFunction_Task+0x1b8>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d107      	bne.n	80004ac <ControlMainFunction_Task+0x70>
 800049c:	4b56      	ldr	r3, [pc, #344]	; (80005f8 <ControlMainFunction_Task+0x1bc>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d103      	bne.n	80004ac <ControlMainFunction_Task+0x70>
				HAL_TIM_Base_Start_IT(&htim3);  // Start timer
 80004a4:	4855      	ldr	r0, [pc, #340]	; (80005fc <ControlMainFunction_Task+0x1c0>)
 80004a6:	f001 fda9 	bl	8001ffc <HAL_TIM_Base_Start_IT>
 80004aa:	e007      	b.n	80004bc <ControlMainFunction_Task+0x80>
				HAL_TIM_Base_Stop(&htim3);  // Stop and reset timer
 80004ac:	4853      	ldr	r0, [pc, #332]	; (80005fc <ControlMainFunction_Task+0x1c0>)
 80004ae:	f001 fd7e 	bl	8001fae <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 80004b2:	4b52      	ldr	r3, [pc, #328]	; (80005fc <ControlMainFunction_Task+0x1c0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004ba:	625a      	str	r2, [r3, #36]	; 0x24
			if (u8_TimeOutFlag1 == 1) {
 80004bc:	4b50      	ldr	r3, [pc, #320]	; (8000600 <ControlMainFunction_Task+0x1c4>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	f040 8083 	bne.w	80005cc <ControlMainFunction_Task+0x190>
				u8_TimeOutFlag1 = 0;
 80004c6:	4b4e      	ldr	r3, [pc, #312]	; (8000600 <ControlMainFunction_Task+0x1c4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d2:	484c      	ldr	r0, [pc, #304]	; (8000604 <ControlMainFunction_Task+0x1c8>)
 80004d4:	f001 f8c3 	bl	800165e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	484a      	ldr	r0, [pc, #296]	; (8000608 <ControlMainFunction_Task+0x1cc>)
 80004e0:	f001 f8bd 	bl	800165e <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop(&htim3);
 80004e4:	4845      	ldr	r0, [pc, #276]	; (80005fc <ControlMainFunction_Task+0x1c0>)
 80004e6:	f001 fd62 	bl	8001fae <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 80004ea:	4b44      	ldr	r3, [pc, #272]	; (80005fc <ControlMainFunction_Task+0x1c0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004f2:	625a      	str	r2, [r3, #36]	; 0x24
				FristTimeFlag = 1;
 80004f4:	4b45      	ldr	r3, [pc, #276]	; (800060c <ControlMainFunction_Task+0x1d0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
				System_State = System_Operation;
 80004fa:	4b38      	ldr	r3, [pc, #224]	; (80005dc <ControlMainFunction_Task+0x1a0>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
			break;
 8000500:	e064      	b.n	80005cc <ControlMainFunction_Task+0x190>
			if (FristTimeFlag) {
 8000502:	4b42      	ldr	r3, [pc, #264]	; (800060c <ControlMainFunction_Task+0x1d0>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d006      	beq.n	8000518 <ControlMainFunction_Task+0xdc>
				FristTimeFlag = 0;
 800050a:	4b40      	ldr	r3, [pc, #256]	; (800060c <ControlMainFunction_Task+0x1d0>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
				vTaskDelay(500);
 8000510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000514:	f003 f9da 	bl	80038cc <vTaskDelay>
			Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000518:	2108      	movs	r1, #8
 800051a:	4835      	ldr	r0, [pc, #212]	; (80005f0 <ControlMainFunction_Task+0x1b4>)
 800051c:	f001 f888 	bl	8001630 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <ControlMainFunction_Task+0x1b8>)
 8000526:	701a      	strb	r2, [r3, #0]
			Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052c:	4830      	ldr	r0, [pc, #192]	; (80005f0 <ControlMainFunction_Task+0x1b4>)
 800052e:	f001 f87f 	bl	8001630 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b30      	ldr	r3, [pc, #192]	; (80005f8 <ControlMainFunction_Task+0x1bc>)
 8000538:	701a      	strb	r2, [r3, #0]
			if (Switch1_State == GPIO_PIN_SET && Switch2_State == GPIO_PIN_RESET) {
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <ControlMainFunction_Task+0x1b8>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d120      	bne.n	8000584 <ControlMainFunction_Task+0x148>
 8000542:	4b2d      	ldr	r3, [pc, #180]	; (80005f8 <ControlMainFunction_Task+0x1bc>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d11c      	bne.n	8000584 <ControlMainFunction_Task+0x148>
					Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 800054a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054e:	4828      	ldr	r0, [pc, #160]	; (80005f0 <ControlMainFunction_Task+0x1b4>)
 8000550:	f001 f86e 	bl	8001630 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <ControlMainFunction_Task+0x1bc>)
 800055a:	701a      	strb	r2, [r3, #0]
				} while (Switch2_State == GPIO_PIN_RESET);
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <ControlMainFunction_Task+0x1bc>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0f2      	beq.n	800054a <ControlMainFunction_Task+0x10e>
				u8_RequestedSpeed += 90;
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	335a      	adds	r3, #90	; 0x5a
 800056a:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 800056c:	6013      	str	r3, [r2, #0]
				if (u8_RequestedSpeed > 950) {
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000576:	4293      	cmp	r3, r2
 8000578:	dd27      	ble.n	80005ca <ControlMainFunction_Task+0x18e>
					u8_RequestedSpeed = 950;
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 800057c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000580:	601a      	str	r2, [r3, #0]
				if (u8_RequestedSpeed > 950) {
 8000582:	e022      	b.n	80005ca <ControlMainFunction_Task+0x18e>
			} else if (Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_SET) {
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <ControlMainFunction_Task+0x1b8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d121      	bne.n	80005d0 <ControlMainFunction_Task+0x194>
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <ControlMainFunction_Task+0x1bc>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d11d      	bne.n	80005d0 <ControlMainFunction_Task+0x194>
					Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000594:	2108      	movs	r1, #8
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <ControlMainFunction_Task+0x1b4>)
 8000598:	f001 f84a 	bl	8001630 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <ControlMainFunction_Task+0x1b8>)
 80005a2:	701a      	strb	r2, [r3, #0]
				} while (Switch1_State == GPIO_PIN_RESET);
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <ControlMainFunction_Task+0x1b8>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f3      	beq.n	8000594 <ControlMainFunction_Task+0x158>
				u8_RequestedSpeed -= 90;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3b5a      	subs	r3, #90	; 0x5a
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 80005b4:	6013      	str	r3, [r2, #0]
				if (u8_RequestedSpeed < 500) {
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005be:	da07      	bge.n	80005d0 <ControlMainFunction_Task+0x194>
					u8_RequestedSpeed = 500;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <ControlMainFunction_Task+0x1a4>)
 80005c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005c6:	601a      	str	r2, [r3, #0]
			break;
 80005c8:	e002      	b.n	80005d0 <ControlMainFunction_Task+0x194>
 80005ca:	e001      	b.n	80005d0 <ControlMainFunction_Task+0x194>
			break;
 80005cc:	bf00      	nop
 80005ce:	e000      	b.n	80005d2 <ControlMainFunction_Task+0x196>
			break;
 80005d0:	bf00      	nop
		}
		vTaskDelay(30);
 80005d2:	201e      	movs	r0, #30
 80005d4:	f003 f97a 	bl	80038cc <vTaskDelay>
		switch (System_State) {
 80005d8:	e734      	b.n	8000444 <ControlMainFunction_Task+0x8>
 80005da:	bf00      	nop
 80005dc:	200003b9 	.word	0x200003b9
 80005e0:	20000000 	.word	0x20000000
 80005e4:	200003b5 	.word	0x200003b5
 80005e8:	20000004 	.word	0x20000004
 80005ec:	20000404 	.word	0x20000404
 80005f0:	40010800 	.word	0x40010800
 80005f4:	200003b3 	.word	0x200003b3
 80005f8:	200003b4 	.word	0x200003b4
 80005fc:	2000044c 	.word	0x2000044c
 8000600:	200003b1 	.word	0x200003b1
 8000604:	40010c00 	.word	0x40010c00
 8000608:	40011000 	.word	0x40011000
 800060c:	200003b0 	.word	0x200003b0

08000610 <ShutDowenSequenceFunctio_Task>:
	}
}



void ShutDowenSequenceFunctio_Task(void *argument) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while (1) {
		if (System_State == System_Operation) {
 8000618:	4b41      	ldr	r3, [pc, #260]	; (8000720 <ShutDowenSequenceFunctio_Task+0x110>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d17b      	bne.n	8000718 <ShutDowenSequenceFunctio_Task+0x108>
			RighProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000620:	2108      	movs	r1, #8
 8000622:	4840      	ldr	r0, [pc, #256]	; (8000724 <ShutDowenSequenceFunctio_Task+0x114>)
 8000624:	f001 f804 	bl	8001630 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <ShutDowenSequenceFunctio_Task+0x118>)
 800062e:	701a      	strb	r2, [r3, #0]
			LeftProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000634:	483b      	ldr	r0, [pc, #236]	; (8000724 <ShutDowenSequenceFunctio_Task+0x114>)
 8000636:	f000 fffb 	bl	8001630 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b3b      	ldr	r3, [pc, #236]	; (800072c <ShutDowenSequenceFunctio_Task+0x11c>)
 8000640:	701a      	strb	r2, [r3, #0]

			// Check proximity sensors
			//if (RighProximity_State != GPIO_PIN_RESET || LeftProximity_State != GPIO_PIN_RESET)
			if (RighProximity_State != GPIO_PIN_RESET ) {
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <ShutDowenSequenceFunctio_Task+0x118>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00f      	beq.n	800066a <ShutDowenSequenceFunctio_Task+0x5a>
				iterator = 0;
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <ShutDowenSequenceFunctio_Task+0x120>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
				current_speed = 500;
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <ShutDowenSequenceFunctio_Task+0x124>)
 8000652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000656:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <ShutDowenSequenceFunctio_Task+0x124>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b36      	ldr	r3, [pc, #216]	; (8000738 <ShutDowenSequenceFunctio_Task+0x128>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000662:	2100      	movs	r1, #0
 8000664:	4834      	ldr	r0, [pc, #208]	; (8000738 <ShutDowenSequenceFunctio_Task+0x128>)
 8000666:	f001 fe15 	bl	8002294 <HAL_TIM_PWM_Stop>
			}

			// Check switches
			Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 800066a:	2108      	movs	r1, #8
 800066c:	4833      	ldr	r0, [pc, #204]	; (800073c <ShutDowenSequenceFunctio_Task+0x12c>)
 800066e:	f000 ffdf 	bl	8001630 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <ShutDowenSequenceFunctio_Task+0x130>)
 8000678:	701a      	strb	r2, [r3, #0]
			Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	482f      	ldr	r0, [pc, #188]	; (800073c <ShutDowenSequenceFunctio_Task+0x12c>)
 8000680:	f000 ffd6 	bl	8001630 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <ShutDowenSequenceFunctio_Task+0x134>)
 800068a:	701a      	strb	r2, [r3, #0]

			if (Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_RESET) {
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <ShutDowenSequenceFunctio_Task+0x130>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d107      	bne.n	80006a4 <ShutDowenSequenceFunctio_Task+0x94>
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <ShutDowenSequenceFunctio_Task+0x134>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d103      	bne.n	80006a4 <ShutDowenSequenceFunctio_Task+0x94>
				//				do{
				//					Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
				//					Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
				//				}while(Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_RESET);
				HAL_TIM_Base_Start_IT(&htim3);  // Start timer
 800069c:	482a      	ldr	r0, [pc, #168]	; (8000748 <ShutDowenSequenceFunctio_Task+0x138>)
 800069e:	f001 fcad 	bl	8001ffc <HAL_TIM_Base_Start_IT>
 80006a2:	e007      	b.n	80006b4 <ShutDowenSequenceFunctio_Task+0xa4>
			} else {
				HAL_TIM_Base_Stop(&htim3);  // Stop and reset timer
 80006a4:	4828      	ldr	r0, [pc, #160]	; (8000748 <ShutDowenSequenceFunctio_Task+0x138>)
 80006a6:	f001 fc82 	bl	8001fae <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <ShutDowenSequenceFunctio_Task+0x138>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if (u8_TimeOutFlag1 == 2) {
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <ShutDowenSequenceFunctio_Task+0x13c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d12d      	bne.n	8000718 <ShutDowenSequenceFunctio_Task+0x108>
				u8_TimeOutFlag1 = 0;
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <ShutDowenSequenceFunctio_Task+0x13c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	4821      	ldr	r0, [pc, #132]	; (8000750 <ShutDowenSequenceFunctio_Task+0x140>)
 80006ca:	f000 ffc8 	bl	800165e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <ShutDowenSequenceFunctio_Task+0x114>)
 80006d6:	f000 ffc2 	bl	800165e <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop(&htim3);
 80006da:	481b      	ldr	r0, [pc, #108]	; (8000748 <ShutDowenSequenceFunctio_Task+0x138>)
 80006dc:	f001 fc67 	bl	8001fae <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <ShutDowenSequenceFunctio_Task+0x138>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
				u8_RequestedSpeed = 500;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <ShutDowenSequenceFunctio_Task+0x144>)
 80006ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006f0:	601a      	str	r2, [r3, #0]
				iterator = 1;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <ShutDowenSequenceFunctio_Task+0x120>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
				current_speed = 500;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <ShutDowenSequenceFunctio_Task+0x124>)
 80006fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006fe:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <ShutDowenSequenceFunctio_Task+0x124>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <ShutDowenSequenceFunctio_Task+0x128>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800070a:	2100      	movs	r1, #0
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <ShutDowenSequenceFunctio_Task+0x128>)
 800070e:	f001 fdc1 	bl	8002294 <HAL_TIM_PWM_Stop>
				System_State = System_OpenSequenceOn;
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <ShutDowenSequenceFunctio_Task+0x110>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(30);
 8000718:	201e      	movs	r0, #30
 800071a:	f003 f8d7 	bl	80038cc <vTaskDelay>
		if (System_State == System_Operation) {
 800071e:	e77b      	b.n	8000618 <ShutDowenSequenceFunctio_Task+0x8>
 8000720:	200003b9 	.word	0x200003b9
 8000724:	40010c00 	.word	0x40010c00
 8000728:	200003b6 	.word	0x200003b6
 800072c:	200003b7 	.word	0x200003b7
 8000730:	200003b5 	.word	0x200003b5
 8000734:	20000004 	.word	0x20000004
 8000738:	20000404 	.word	0x20000404
 800073c:	40010800 	.word	0x40010800
 8000740:	200003b3 	.word	0x200003b3
 8000744:	200003b4 	.word	0x200003b4
 8000748:	2000044c 	.word	0x2000044c
 800074c:	200003b1 	.word	0x200003b1
 8000750:	40011000 	.word	0x40011000
 8000754:	20000000 	.word	0x20000000

08000758 <SpeedControl_Task>:
	}
}

void SpeedControl_Task(void *argument) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	while (1) {
		// Read the proximity states
		RighProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000760:	2108      	movs	r1, #8
 8000762:	4822      	ldr	r0, [pc, #136]	; (80007ec <SpeedControl_Task+0x94>)
 8000764:	f000 ff64 	bl	8001630 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <SpeedControl_Task+0x98>)
 800076e:	701a      	strb	r2, [r3, #0]
		LeftProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000774:	481d      	ldr	r0, [pc, #116]	; (80007ec <SpeedControl_Task+0x94>)
 8000776:	f000 ff5b 	bl	8001630 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <SpeedControl_Task+0x9c>)
 8000780:	701a      	strb	r2, [r3, #0]

		// Check if the system is in operation mode and both proximity sensors are not triggered
		//if (System_State == System_Operation && RighProximity_State == GPIO_PIN_RESET && LeftProximity_State == GPIO_PIN_RESET)
		if (System_State == System_Operation && RighProximity_State == GPIO_PIN_RESET) {
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <SpeedControl_Task+0xa0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d128      	bne.n	80007dc <SpeedControl_Task+0x84>
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <SpeedControl_Task+0x98>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d124      	bne.n	80007dc <SpeedControl_Task+0x84>
			// Start the PWM signal
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000792:	2100      	movs	r1, #0
 8000794:	4819      	ldr	r0, [pc, #100]	; (80007fc <SpeedControl_Task+0xa4>)
 8000796:	f001 fcdb 	bl	8002150 <HAL_TIM_PWM_Start>

			// Adjust the current speed to match the requested speed
			if (u8_RequestedSpeed > current_speed) {
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <SpeedControl_Task+0xa8>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <SpeedControl_Task+0xac>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	dd05      	ble.n	80007b2 <SpeedControl_Task+0x5a>
				current_speed++; // Increment current speed
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <SpeedControl_Task+0xac>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <SpeedControl_Task+0xac>)
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	e00a      	b.n	80007c8 <SpeedControl_Task+0x70>
			} else if (u8_RequestedSpeed < current_speed) {
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <SpeedControl_Task+0xa8>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <SpeedControl_Task+0xac>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	da04      	bge.n	80007c8 <SpeedControl_Task+0x70>
				current_speed--; // Decrement current speed
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <SpeedControl_Task+0xac>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <SpeedControl_Task+0xac>)
 80007c6:	6013      	str	r3, [r2, #0]
			}

			// Set the new compare value to adjust the duty cycle
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <SpeedControl_Task+0xac>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <SpeedControl_Task+0xa4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34



			// Restart the PWM with the new compare value
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007d2:	2100      	movs	r1, #0
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <SpeedControl_Task+0xa4>)
 80007d6:	f001 fcbb 	bl	8002150 <HAL_TIM_PWM_Start>
 80007da:	e003      	b.n	80007e4 <SpeedControl_Task+0x8c>
		} else {
			// If the system is not in operation or proximity sensors are triggered, stop the PWM
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80007dc:	2100      	movs	r1, #0
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <SpeedControl_Task+0xa4>)
 80007e0:	f001 fd58 	bl	8002294 <HAL_TIM_PWM_Stop>
		}

		// Add a delay to control the speed adjustment rate
		vTaskDelay(20); // Adjust this value as needed
 80007e4:	2014      	movs	r0, #20
 80007e6:	f003 f871 	bl	80038cc <vTaskDelay>
		RighProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80007ea:	e7b9      	b.n	8000760 <SpeedControl_Task+0x8>
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	200003b6 	.word	0x200003b6
 80007f4:	200003b7 	.word	0x200003b7
 80007f8:	200003b9 	.word	0x200003b9
 80007fc:	20000404 	.word	0x20000404
 8000800:	20000000 	.word	0x20000000
 8000804:	20000004 	.word	0x20000004

08000808 <DashboardDisplay_Task>:
//		}
//		vTaskDelay(500);
//	}
//}
void DashboardDisplay_Task(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch(System_State)
 8000810:	4b5d      	ldr	r3, [pc, #372]	; (8000988 <DashboardDisplay_Task+0x180>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <DashboardDisplay_Task+0x16>
 8000818:	2b01      	cmp	r3, #1
 800081a:	d010      	beq.n	800083e <DashboardDisplay_Task+0x36>
				break;
			default: break;
			}
			break;

			default: break;
 800081c:	e0b0      	b.n	8000980 <DashboardDisplay_Task+0x178>
			if (current_display != Display_Black)
 800081e:	4b5b      	ldr	r3, [pc, #364]	; (800098c <DashboardDisplay_Task+0x184>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	f000 80ab 	beq.w	800097e <DashboardDisplay_Task+0x176>
				current_display = Display_Black;
 8000828:	4b58      	ldr	r3, [pc, #352]	; (800098c <DashboardDisplay_Task+0x184>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, Display_BlackScreen, 9, 1000);
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	2209      	movs	r2, #9
 8000834:	4956      	ldr	r1, [pc, #344]	; (8000990 <DashboardDisplay_Task+0x188>)
 8000836:	4857      	ldr	r0, [pc, #348]	; (8000994 <DashboardDisplay_Task+0x18c>)
 8000838:	f002 fbfb 	bl	8003032 <HAL_UART_Transmit>
			break;
 800083c:	e09f      	b.n	800097e <DashboardDisplay_Task+0x176>
			if (current_display == Display_Black) // Check if we are transitioning from OpenSequence
 800083e:	4b53      	ldr	r3, [pc, #332]	; (800098c <DashboardDisplay_Task+0x184>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10d      	bne.n	8000862 <DashboardDisplay_Task+0x5a>
				current_display = Display_Intro;
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <DashboardDisplay_Task+0x184>)
 8000848:	2202      	movs	r2, #2
 800084a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, Display_IntroScreen, 9, 1000);
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	2209      	movs	r2, #9
 8000852:	4951      	ldr	r1, [pc, #324]	; (8000998 <DashboardDisplay_Task+0x190>)
 8000854:	484f      	ldr	r0, [pc, #316]	; (8000994 <DashboardDisplay_Task+0x18c>)
 8000856:	f002 fbec 	bl	8003032 <HAL_UART_Transmit>
				vTaskDelay(3000); // Display intro for 3 seconds
 800085a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800085e:	f003 f835 	bl	80038cc <vTaskDelay>
			switch(u8_RequestedSpeed)
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <DashboardDisplay_Task+0x194>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f240 32b6 	movw	r2, #950	; 0x3b6
 800086a:	4293      	cmp	r3, r2
 800086c:	d06a      	beq.n	8000944 <DashboardDisplay_Task+0x13c>
 800086e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000872:	4293      	cmp	r3, r2
 8000874:	dc75      	bgt.n	8000962 <DashboardDisplay_Task+0x15a>
 8000876:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800087a:	d054      	beq.n	8000926 <DashboardDisplay_Task+0x11e>
 800087c:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8000880:	dc6f      	bgt.n	8000962 <DashboardDisplay_Task+0x15a>
 8000882:	f240 3202 	movw	r2, #770	; 0x302
 8000886:	4293      	cmp	r3, r2
 8000888:	d03e      	beq.n	8000908 <DashboardDisplay_Task+0x100>
 800088a:	f240 3202 	movw	r2, #770	; 0x302
 800088e:	4293      	cmp	r3, r2
 8000890:	dc67      	bgt.n	8000962 <DashboardDisplay_Task+0x15a>
 8000892:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8000896:	d028      	beq.n	80008ea <DashboardDisplay_Task+0xe2>
 8000898:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800089c:	dc61      	bgt.n	8000962 <DashboardDisplay_Task+0x15a>
 800089e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008a2:	d004      	beq.n	80008ae <DashboardDisplay_Task+0xa6>
 80008a4:	f240 224e 	movw	r2, #590	; 0x24e
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d00f      	beq.n	80008cc <DashboardDisplay_Task+0xc4>
			default: break;
 80008ac:	e059      	b.n	8000962 <DashboardDisplay_Task+0x15a>
				if(current_display != Display_Gear0)
 80008ae:	4b37      	ldr	r3, [pc, #220]	; (800098c <DashboardDisplay_Task+0x184>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d057      	beq.n	8000966 <DashboardDisplay_Task+0x15e>
					current_display = Display_Gear0;
 80008b6:	4b35      	ldr	r3, [pc, #212]	; (800098c <DashboardDisplay_Task+0x184>)
 80008b8:	2203      	movs	r2, #3
 80008ba:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed0, 9, 1000);
 80008bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c0:	2209      	movs	r2, #9
 80008c2:	4937      	ldr	r1, [pc, #220]	; (80009a0 <DashboardDisplay_Task+0x198>)
 80008c4:	4833      	ldr	r0, [pc, #204]	; (8000994 <DashboardDisplay_Task+0x18c>)
 80008c6:	f002 fbb4 	bl	8003032 <HAL_UART_Transmit>
				break;
 80008ca:	e04c      	b.n	8000966 <DashboardDisplay_Task+0x15e>
				if(current_display != Display_Gear1)
 80008cc:	4b2f      	ldr	r3, [pc, #188]	; (800098c <DashboardDisplay_Task+0x184>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d04a      	beq.n	800096a <DashboardDisplay_Task+0x162>
					current_display = Display_Gear1;
 80008d4:	4b2d      	ldr	r3, [pc, #180]	; (800098c <DashboardDisplay_Task+0x184>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed1, 9, 1000);
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	2209      	movs	r2, #9
 80008e0:	4930      	ldr	r1, [pc, #192]	; (80009a4 <DashboardDisplay_Task+0x19c>)
 80008e2:	482c      	ldr	r0, [pc, #176]	; (8000994 <DashboardDisplay_Task+0x18c>)
 80008e4:	f002 fba5 	bl	8003032 <HAL_UART_Transmit>
				break;
 80008e8:	e03f      	b.n	800096a <DashboardDisplay_Task+0x162>
				if(current_display != Display_Gear2)
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <DashboardDisplay_Task+0x184>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b05      	cmp	r3, #5
 80008f0:	d03d      	beq.n	800096e <DashboardDisplay_Task+0x166>
					current_display = Display_Gear2;
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <DashboardDisplay_Task+0x184>)
 80008f4:	2205      	movs	r2, #5
 80008f6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed2, 9, 1000);
 80008f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fc:	2209      	movs	r2, #9
 80008fe:	492a      	ldr	r1, [pc, #168]	; (80009a8 <DashboardDisplay_Task+0x1a0>)
 8000900:	4824      	ldr	r0, [pc, #144]	; (8000994 <DashboardDisplay_Task+0x18c>)
 8000902:	f002 fb96 	bl	8003032 <HAL_UART_Transmit>
				break;
 8000906:	e032      	b.n	800096e <DashboardDisplay_Task+0x166>
				if(current_display != Display_Gear3)
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <DashboardDisplay_Task+0x184>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b06      	cmp	r3, #6
 800090e:	d030      	beq.n	8000972 <DashboardDisplay_Task+0x16a>
					current_display = Display_Gear3;
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <DashboardDisplay_Task+0x184>)
 8000912:	2206      	movs	r2, #6
 8000914:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed3, 9, 1000);
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	2209      	movs	r2, #9
 800091c:	4923      	ldr	r1, [pc, #140]	; (80009ac <DashboardDisplay_Task+0x1a4>)
 800091e:	481d      	ldr	r0, [pc, #116]	; (8000994 <DashboardDisplay_Task+0x18c>)
 8000920:	f002 fb87 	bl	8003032 <HAL_UART_Transmit>
				break;
 8000924:	e025      	b.n	8000972 <DashboardDisplay_Task+0x16a>
				if(current_display != Display_Gear4)
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <DashboardDisplay_Task+0x184>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b07      	cmp	r3, #7
 800092c:	d023      	beq.n	8000976 <DashboardDisplay_Task+0x16e>
					current_display = Display_Gear4;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <DashboardDisplay_Task+0x184>)
 8000930:	2207      	movs	r2, #7
 8000932:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed4, 9, 1000);
 8000934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000938:	2209      	movs	r2, #9
 800093a:	491d      	ldr	r1, [pc, #116]	; (80009b0 <DashboardDisplay_Task+0x1a8>)
 800093c:	4815      	ldr	r0, [pc, #84]	; (8000994 <DashboardDisplay_Task+0x18c>)
 800093e:	f002 fb78 	bl	8003032 <HAL_UART_Transmit>
				break;
 8000942:	e018      	b.n	8000976 <DashboardDisplay_Task+0x16e>
				if(current_display != Display_Gear5)
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <DashboardDisplay_Task+0x184>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b08      	cmp	r3, #8
 800094a:	d016      	beq.n	800097a <DashboardDisplay_Task+0x172>
					current_display = Display_Gear5;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <DashboardDisplay_Task+0x184>)
 800094e:	2208      	movs	r2, #8
 8000950:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed5, 9, 1000);
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	2209      	movs	r2, #9
 8000958:	4916      	ldr	r1, [pc, #88]	; (80009b4 <DashboardDisplay_Task+0x1ac>)
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <DashboardDisplay_Task+0x18c>)
 800095c:	f002 fb69 	bl	8003032 <HAL_UART_Transmit>
				break;
 8000960:	e00b      	b.n	800097a <DashboardDisplay_Task+0x172>
			default: break;
 8000962:	bf00      	nop
 8000964:	e00c      	b.n	8000980 <DashboardDisplay_Task+0x178>
				break;
 8000966:	bf00      	nop
 8000968:	e00a      	b.n	8000980 <DashboardDisplay_Task+0x178>
				break;
 800096a:	bf00      	nop
 800096c:	e008      	b.n	8000980 <DashboardDisplay_Task+0x178>
				break;
 800096e:	bf00      	nop
 8000970:	e006      	b.n	8000980 <DashboardDisplay_Task+0x178>
				break;
 8000972:	bf00      	nop
 8000974:	e004      	b.n	8000980 <DashboardDisplay_Task+0x178>
				break;
 8000976:	bf00      	nop
 8000978:	e002      	b.n	8000980 <DashboardDisplay_Task+0x178>
				break;
 800097a:	bf00      	nop
			break;
 800097c:	e000      	b.n	8000980 <DashboardDisplay_Task+0x178>
			break;
 800097e:	bf00      	nop
		}

		vTaskDelay(250); // Task delay
 8000980:	20fa      	movs	r0, #250	; 0xfa
 8000982:	f002 ffa3 	bl	80038cc <vTaskDelay>
		switch(System_State)
 8000986:	e743      	b.n	8000810 <DashboardDisplay_Task+0x8>
 8000988:	200003b9 	.word	0x200003b9
 800098c:	200003b8 	.word	0x200003b8
 8000990:	20000008 	.word	0x20000008
 8000994:	200004dc 	.word	0x200004dc
 8000998:	20000014 	.word	0x20000014
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000020 	.word	0x20000020
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	20000038 	.word	0x20000038
 80009ac:	20000044 	.word	0x20000044
 80009b0:	20000050 	.word	0x20000050
 80009b4:	2000005c 	.word	0x2000005c

080009b8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009ca:	f000 fbb1 	bl	8001130 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM3)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d11b      	bne.n	8000a10 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		static uint8_t IntErrorFlag1=0;
		IntErrorFlag1++;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009e2:	701a      	strb	r2, [r3, #0]
		if(IntErrorFlag1 > 1)
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d911      	bls.n	8000a10 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			if(System_State == System_OpenSequenceOn)
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x44>
			{
				u8_TimeOutFlag1 = 1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e009      	b.n	8000a10 <HAL_TIM_PeriodElapsedCallback+0x58>
			}
			else if (System_State == System_Operation)
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <HAL_TIM_PeriodElapsedCallback+0x58>
			{
				u8_TimeOutFlag1++;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a0e:	701a      	strb	r2, [r3, #0]
			{

			}
		}
	}
	if(htim->Instance == TIM4)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10c      	bne.n	8000a34 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		static uint8_t IntErrorFlag4=0;
		IntErrorFlag4++;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a24:	701a      	strb	r2, [r3, #0]
		if(IntErrorFlag4 > 1)
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d902      	bls.n	8000a34 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			u8_TimeOutFlag4 = 1;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
		}
	}
	/* USER CODE END Callback 1 */
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40000400 	.word	0x40000400
 8000a40:	200003ba 	.word	0x200003ba
 8000a44:	200003b9 	.word	0x200003b9
 8000a48:	200003b1 	.word	0x200003b1
 8000a4c:	40000800 	.word	0x40000800
 8000a50:	200003bb 	.word	0x200003bb
 8000a54:	200003b2 	.word	0x200003b2

08000a58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_MspInit+0x68>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_MspInit+0x68>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_MspInit+0x68>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_MspInit+0x68>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <HAL_MspInit+0x68>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x68>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	f06f 0001 	mvn.w	r0, #1
 8000aa2:	f000 fc16 	bl	80012d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_MspInit+0x6c>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_MspInit+0x6c>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <HAL_InitTick+0xe8>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a33      	ldr	r2, [pc, #204]	; (8000bbc <HAL_InitTick+0xe8>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <HAL_InitTick+0xe8>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b02:	f107 0210 	add.w	r2, r7, #16
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 f9b1 	bl	8001e74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d103      	bne.n	8000b24 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b1c:	f001 f982 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8000b20:	6378      	str	r0, [r7, #52]	; 0x34
 8000b22:	e004      	b.n	8000b2e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b24:	f001 f97e 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <HAL_InitTick+0xec>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	0c9b      	lsrs	r3, r3, #18
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b50:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b66:	f001 f9d3 	bl	8001f10 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d11b      	bne.n	8000bb0 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <HAL_InitTick+0xf0>)
 8000b7a:	f001 fa3f 	bl	8001ffc <HAL_TIM_Base_Start_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d111      	bne.n	8000bb0 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b8c:	201c      	movs	r0, #28
 8000b8e:	f000 fbbc 	bl	800130a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d808      	bhi.n	8000baa <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	201c      	movs	r0, #28
 8000b9e:	f000 fb98 	bl	80012d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <HAL_InitTick+0xf4>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e002      	b.n	8000bb0 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3738      	adds	r7, #56	; 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	431bde83 	.word	0x431bde83
 8000bc4:	200003bc 	.word	0x200003bc
 8000bc8:	2000006c 	.word	0x2000006c

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM2_IRQHandler+0x10>)
 8000bfe:	f001 fbad 	bl	800235c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200003bc 	.word	0x200003bc

08000c0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM3_IRQHandler+0x10>)
 8000c12:	f001 fba3 	bl	800235c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000044c 	.word	0x2000044c

08000c20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM4_IRQHandler+0x10>)
 8000c26:	f001 fb99 	bl	800235c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000494 	.word	0x20000494

08000c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	; 0x58
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fd87 	bl	800478c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c7e:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000c80:	4a3e      	ldr	r2, [pc, #248]	; (8000d7c <MX_TIM1_Init+0x13c>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144-1;
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000c86:	228f      	movs	r2, #143	; 0x8f
 8000c88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000c90:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000c92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000caa:	4833      	ldr	r0, [pc, #204]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000cac:	f001 f930 	bl	8001f10 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cb6:	f7ff fecf 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	482c      	ldr	r0, [pc, #176]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000cc8:	f001 fd12 	bl	80026f0 <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cd2:	f7ff fec1 	bl	8000a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cd6:	4828      	ldr	r0, [pc, #160]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000cd8:	f001 f9e2 	bl	80020a0 <HAL_TIM_PWM_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ce2:	f7ff feb9 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4820      	ldr	r0, [pc, #128]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000cf6:	f002 f88b 	bl	8002e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d00:	f7ff feaa 	bl	8000a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d04:	2360      	movs	r3, #96	; 0x60
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000d2a:	f001 fc1f 	bl	800256c <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d34:	f7ff fe90 	bl	8000a58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000d5c:	f002 f8b6 	bl	8002ecc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d66:	f7ff fe77 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d6a:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM1_Init+0x138>)
 8000d6c:	f000 f8fa 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000d70:	bf00      	nop
 8000d72:	3758      	adds	r7, #88	; 0x58
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000404 	.word	0x20000404
 8000d7c:	40012c00 	.word	0x40012c00

08000d80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <MX_TIM3_Init+0x98>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000da4:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000da8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000db2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000db6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dc6:	f001 f8a3 	bl	8001f10 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dd0:	f7ff fe42 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000de2:	f001 fc85 	bl	80026f0 <HAL_TIM_ConfigClockSource>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000dec:	f7ff fe34 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_TIM3_Init+0x94>)
 8000dfe:	f002 f807 	bl	8002e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e08:	f7ff fe26 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000044c 	.word	0x2000044c
 8000e18:	40000400 	.word	0x40000400

08000e1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <MX_TIM4_Init+0x98>)
 8000e3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000-1;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e40:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000e44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e4e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e62:	f001 f855 	bl	8001f10 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000e6c:	f7ff fdf4 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e7e:	f001 fc37 	bl	80026f0 <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000e88:	f7ff fde6 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM4_Init+0x94>)
 8000e9a:	f001 ffb9 	bl	8002e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f7ff fdd8 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000494 	.word	0x20000494
 8000eb4:	40000800 	.word	0x40000800

08000eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <HAL_TIM_Base_MspInit+0x9c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ee2:	e032      	b.n	8000f4a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <HAL_TIM_Base_MspInit+0xa4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d114      	bne.n	8000f18 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2105      	movs	r1, #5
 8000f0a:	201d      	movs	r0, #29
 8000f0c:	f000 f9e1 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f10:	201d      	movs	r0, #29
 8000f12:	f000 f9fa 	bl	800130a <HAL_NVIC_EnableIRQ>
}
 8000f16:	e018      	b.n	8000f4a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_TIM_Base_MspInit+0xa8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d113      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_TIM_Base_MspInit+0xa0>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	201e      	movs	r0, #30
 8000f40:	f000 f9c7 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f44:	201e      	movs	r0, #30
 8000f46:	f000 f9e0 	bl	800130a <HAL_NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	40000800 	.word	0x40000800

08000f64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <HAL_TIM_MspPostInit+0x5c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d118      	bne.n	8000fb6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_TIM_MspPostInit+0x60>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_TIM_MspPostInit+0x60>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_TIM_MspPostInit+0x60>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_TIM_MspPostInit+0x64>)
 8000fb2:	f000 f9b9 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012c00 	.word	0x40012c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010800 	.word	0x40010800

08000fcc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART1_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8001004:	f001 ffc5 	bl	8002f92 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f7ff fd23 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200004dc 	.word	0x200004dc
 800101c:	40013800 	.word	0x40013800

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_UART_MspInit+0x8c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d131      	bne.n	80010a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x90>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x90>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_UART_MspInit+0x90>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_UART_MspInit+0x90>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_UART_MspInit+0x94>)
 8001086:	f000 f94f 	bl	8001328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800108a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <HAL_UART_MspInit+0x94>)
 80010a0:	f000 f942 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010800 	.word	0x40010800

080010b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b8:	f7ff fdbc 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010be:	490c      	ldr	r1, [pc, #48]	; (80010f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010d4:	4c09      	ldr	r4, [pc, #36]	; (80010fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f003 fb2d 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e6:	f7ff f90d 	bl	8000304 <main>
  bx lr
 80010ea:	4770      	bx	lr
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80010f4:	080049f4 	.word	0x080049f4
  ldr r2, =_sbss
 80010f8:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80010fc:	2000127c 	.word	0x2000127c

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x28>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x28>)
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f8d1 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	200f      	movs	r0, #15
 800111c:	f7ff fcda 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fca0 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40022000 	.word	0x40022000

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x1c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x20>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <HAL_IncTick+0x20>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000070 	.word	0x20000070
 8001150:	20000524 	.word	0x20000524

08001154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <HAL_GetTick+0x10>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000524 	.word	0x20000524

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4906      	ldr	r1, [pc, #24]	; (8001200 <__NVIC_EnableIRQ+0x34>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff4f 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff64 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ffb2 	bl	8001258 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff81 	bl	8001204 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff57 	bl	80011cc <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e169      	b.n	8001610 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800133c:	2201      	movs	r2, #1
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 8158 	bne.w	800160a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a9a      	ldr	r2, [pc, #616]	; (80015c8 <HAL_GPIO_Init+0x2a0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d05e      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001364:	4a98      	ldr	r2, [pc, #608]	; (80015c8 <HAL_GPIO_Init+0x2a0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d875      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800136a:	4a98      	ldr	r2, [pc, #608]	; (80015cc <HAL_GPIO_Init+0x2a4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d058      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001370:	4a96      	ldr	r2, [pc, #600]	; (80015cc <HAL_GPIO_Init+0x2a4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d86f      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001376:	4a96      	ldr	r2, [pc, #600]	; (80015d0 <HAL_GPIO_Init+0x2a8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d052      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 800137c:	4a94      	ldr	r2, [pc, #592]	; (80015d0 <HAL_GPIO_Init+0x2a8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d869      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001382:	4a94      	ldr	r2, [pc, #592]	; (80015d4 <HAL_GPIO_Init+0x2ac>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d04c      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001388:	4a92      	ldr	r2, [pc, #584]	; (80015d4 <HAL_GPIO_Init+0x2ac>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d863      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800138e:	4a92      	ldr	r2, [pc, #584]	; (80015d8 <HAL_GPIO_Init+0x2b0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d046      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001394:	4a90      	ldr	r2, [pc, #576]	; (80015d8 <HAL_GPIO_Init+0x2b0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d85d      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800139a:	2b12      	cmp	r3, #18
 800139c:	d82a      	bhi.n	80013f4 <HAL_GPIO_Init+0xcc>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d859      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <HAL_GPIO_Init+0x80>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	08001423 	.word	0x08001423
 80013ac:	080013fd 	.word	0x080013fd
 80013b0:	0800140f 	.word	0x0800140f
 80013b4:	08001451 	.word	0x08001451
 80013b8:	08001457 	.word	0x08001457
 80013bc:	08001457 	.word	0x08001457
 80013c0:	08001457 	.word	0x08001457
 80013c4:	08001457 	.word	0x08001457
 80013c8:	08001457 	.word	0x08001457
 80013cc:	08001457 	.word	0x08001457
 80013d0:	08001457 	.word	0x08001457
 80013d4:	08001457 	.word	0x08001457
 80013d8:	08001457 	.word	0x08001457
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001457 	.word	0x08001457
 80013e4:	08001457 	.word	0x08001457
 80013e8:	08001457 	.word	0x08001457
 80013ec:	08001405 	.word	0x08001405
 80013f0:	08001419 	.word	0x08001419
 80013f4:	4a79      	ldr	r2, [pc, #484]	; (80015dc <HAL_GPIO_Init+0x2b4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fa:	e02c      	b.n	8001456 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e029      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	3304      	adds	r3, #4
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e024      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	3308      	adds	r3, #8
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e01f      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	330c      	adds	r3, #12
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e01a      	b.n	8001458 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142a:	2304      	movs	r3, #4
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e013      	b.n	8001458 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001438:	2308      	movs	r3, #8
 800143a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	611a      	str	r2, [r3, #16]
          break;
 8001442:	e009      	b.n	8001458 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	615a      	str	r2, [r3, #20]
          break;
 800144e:	e003      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x130>
          break;
 8001456:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d801      	bhi.n	8001462 <HAL_GPIO_Init+0x13a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_Init+0x13e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3304      	adds	r3, #4
 8001466:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d802      	bhi.n	8001474 <HAL_GPIO_Init+0x14c>
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x152>
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	3b08      	subs	r3, #8
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	210f      	movs	r1, #15
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	6a39      	ldr	r1, [r7, #32]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80b1 	beq.w	800160a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a8:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a4c      	ldr	r2, [pc, #304]	; (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b4a      	ldr	r3, [pc, #296]	; (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c0:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <HAL_GPIO_Init+0x2bc>)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a40      	ldr	r2, [pc, #256]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d013      	beq.n	8001514 <HAL_GPIO_Init+0x1ec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3f      	ldr	r2, [pc, #252]	; (80015ec <HAL_GPIO_Init+0x2c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00d      	beq.n	8001510 <HAL_GPIO_Init+0x1e8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <HAL_GPIO_Init+0x2c8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d007      	beq.n	800150c <HAL_GPIO_Init+0x1e4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3d      	ldr	r2, [pc, #244]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_GPIO_Init+0x1e0>
 8001504:	2303      	movs	r3, #3
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001508:	2304      	movs	r3, #4
 800150a:	e004      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 800150c:	2302      	movs	r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_GPIO_Init+0x1ee>
 8001514:	2300      	movs	r3, #0
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	f002 0203 	and.w	r2, r2, #3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4093      	lsls	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001526:	492f      	ldr	r1, [pc, #188]	; (80015e4 <HAL_GPIO_Init+0x2bc>)
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	492c      	ldr	r1, [pc, #176]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4928      	ldr	r1, [pc, #160]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001558:	4013      	ands	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	4922      	ldr	r1, [pc, #136]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	491e      	ldr	r1, [pc, #120]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4918      	ldr	r1, [pc, #96]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4914      	ldr	r1, [pc, #80]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d021      	beq.n	80015fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	490e      	ldr	r1, [pc, #56]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e021      	b.n	800160a <HAL_GPIO_Init+0x2e2>
 80015c6:	bf00      	nop
 80015c8:	10320000 	.word	0x10320000
 80015cc:	10310000 	.word	0x10310000
 80015d0:	10220000 	.word	0x10220000
 80015d4:	10210000 	.word	0x10210000
 80015d8:	10120000 	.word	0x10120000
 80015dc:	10110000 	.word	0x10110000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010800 	.word	0x40010800
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40011400 	.word	0x40011400
 80015f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_GPIO_Init+0x304>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	43db      	mvns	r3, r3
 8001604:	4909      	ldr	r1, [pc, #36]	; (800162c <HAL_GPIO_Init+0x304>)
 8001606:	4013      	ands	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	3301      	adds	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	f47f ae8e 	bne.w	800133c <HAL_GPIO_Init+0x14>
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	372c      	adds	r7, #44	; 0x2c
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e001      	b.n	8001652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	807b      	strh	r3, [r7, #2]
 800166a:	4613      	mov	r3, r2
 800166c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800166e:	787b      	ldrb	r3, [r7, #1]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001674:	887a      	ldrh	r2, [r7, #2]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800167a:	e003      	b.n	8001684 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	041a      	lsls	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	611a      	str	r2, [r3, #16]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
	...

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e272      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8087 	beq.w	80017be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d112      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
 80016c8:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d10b      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06c      	beq.n	80017bc <HAL_RCC_OscConfig+0x12c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d168      	bne.n	80017bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e24c      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x76>
 80016f8:	4b80      	ldr	r3, [pc, #512]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a7f      	ldr	r2, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e02e      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x98>
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7a      	ldr	r2, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b78      	ldr	r3, [pc, #480]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a77      	ldr	r2, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0xbc>
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a71      	ldr	r2, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b6f      	ldr	r3, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6e      	ldr	r2, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 800174c:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a67      	ldr	r2, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fcf2 	bl	8001154 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fcee 	bl	8001154 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e200      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xe4>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fcde 	bl	8001154 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fcda 	bl	8001154 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1ec      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x10c>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ca:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11c      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1c0      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4939      	ldr	r1, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	e03a      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fc93 	bl	8001154 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fc8f 	bl	8001154 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1a1      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4927      	ldr	r1, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e015      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fc72 	bl	8001154 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff fc6e 	bl	8001154 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e180      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03a      	beq.n	8001914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d019      	beq.n	80018da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fc52 	bl	8001154 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fc4e 	bl	8001154 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e160      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f000 fafe 	bl	8001ed4 <RCC_Delay>
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff fc38 	bl	8001154 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc34 	bl	8001154 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d908      	bls.n	8001908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e146      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	42420000 	.word	0x42420000
 8001904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e9      	bne.n	80018e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a6 	beq.w	8001a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b8b      	ldr	r3, [pc, #556]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a87      	ldr	r2, [pc, #540]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b85      	ldr	r3, [pc, #532]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff fbf5 	bl	8001154 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff fbf1 	bl	8001154 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b64      	cmp	r3, #100	; 0x64
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e103      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	4b75      	ldr	r3, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x4c8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x312>
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a6e      	ldr	r2, [pc, #440]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e02d      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x334>
 80019aa:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a69      	ldr	r2, [pc, #420]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a66      	ldr	r2, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	e01c      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x356>
 80019cc:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a60      	ldr	r2, [pc, #384]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a5d      	ldr	r2, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019e6:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fba5 	bl	8001154 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fba1 	bl	8001154 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0b1      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ee      	beq.n	8001a0e <HAL_RCC_OscConfig+0x37e>
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fb8f 	bl	8001154 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fb8b 	bl	8001154 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e09b      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d061      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d146      	bne.n	8001b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x4cc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fb5f 	bl	8001154 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fb5b 	bl	8001154 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e06d      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4921      	ldr	r1, [pc, #132]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a19      	ldr	r1, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	491b      	ldr	r1, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_RCC_OscConfig+0x4cc>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fb2f 	bl	8001154 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff fb2b 	bl	8001154 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e03d      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x46a>
 8001b18:	e035      	b.n	8001b86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fb18 	bl	8001154 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff fb14 	bl	8001154 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e026      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x498>
 8001b46:	e01e      	b.n	8001b86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e019      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x500>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0d0      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4965      	ldr	r1, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	494d      	ldr	r1, [pc, #308]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d040      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d115      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e07f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e073      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4936      	ldr	r1, [pc, #216]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff fa66 	bl	8001154 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff fa62 	bl	8001154 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e053      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d210      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e032      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d22:	f000 f821 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	490a      	ldr	r1, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1cc>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1d0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fec6 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08004960 	.word	0x08004960
 8001d60:	20000068 	.word	0x20000068
 8001d64:	2000006c 	.word	0x2000006c

08001d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x30>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x36>
 8001d96:	e027      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9a:	613b      	str	r3, [r7, #16]
      break;
 8001d9c:	e027      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0c5b      	lsrs	r3, r3, #17
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dca:	fb03 f202 	mul.w	r2, r3, r2
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e004      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	613b      	str	r3, [r7, #16]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dea:	613b      	str	r3, [r7, #16]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	693b      	ldr	r3, [r7, #16]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	08004978 	.word	0x08004978
 8001e08:	08004988 	.word	0x08004988
 8001e0c:	003d0900 	.word	0x003d0900

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	20000068 	.word	0x20000068

08001e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e28:	f7ff fff2 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4903      	ldr	r1, [pc, #12]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08004970 	.word	0x08004970

08001e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e50:	f7ff ffde 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0adb      	lsrs	r3, r3, #11
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4903      	ldr	r1, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004970 	.word	0x08004970

08001e74 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	220f      	movs	r2, #15
 8001e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_GetClockConfig+0x58>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_RCC_GetClockConfig+0x58>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_GetClockConfig+0x58>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_RCC_GetClockConfig+0x58>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0207 	and.w	r2, r3, #7
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <RCC_Delay+0x34>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <RCC_Delay+0x38>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0a5b      	lsrs	r3, r3, #9
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ef0:	bf00      	nop
  }
  while (Delay --);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	60fa      	str	r2, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <RCC_Delay+0x1c>
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	20000068 	.word	0x20000068
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e041      	b.n	8001fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe ffbe 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f000 fcba 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_TIM_Base_Stop+0x38>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	f240 4344 	movw	r3, #1092	; 0x444
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_TIM_Base_Stop+0x38>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d001      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e03a      	b.n	800208a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_TIM_Base_Start_IT+0x98>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x58>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203e:	d009      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x58>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <HAL_TIM_Base_Start_IT+0x9c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x58>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <HAL_TIM_Base_Start_IT+0xa0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d111      	bne.n	8002078 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d010      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002076:	e007      	b.n	8002088 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40000400 	.word	0x40000400
 800209c:	40000800 	.word	0x40000800

080020a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e041      	b.n	8002136 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f839 	bl	800213e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f000 fbf2 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_TIM_PWM_Start+0x24>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	bf14      	ite	ne
 800216c:	2301      	movne	r3, #1
 800216e:	2300      	moveq	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e022      	b.n	80021ba <HAL_TIM_PWM_Start+0x6a>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d109      	bne.n	800218e <HAL_TIM_PWM_Start+0x3e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	bf14      	ite	ne
 8002186:	2301      	movne	r3, #1
 8002188:	2300      	moveq	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e015      	b.n	80021ba <HAL_TIM_PWM_Start+0x6a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d109      	bne.n	80021a8 <HAL_TIM_PWM_Start+0x58>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	e008      	b.n	80021ba <HAL_TIM_PWM_Start+0x6a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e05e      	b.n	8002280 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_PWM_Start+0x82>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d0:	e013      	b.n	80021fa <HAL_TIM_PWM_Start+0xaa>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x92>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e0:	e00b      	b.n	80021fa <HAL_TIM_PWM_Start+0xaa>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Start+0xa2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f0:	e003      	b.n	80021fa <HAL_TIM_PWM_Start+0xaa>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fde0 	bl	8002dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_TIM_PWM_Start+0x138>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d107      	bne.n	8002222 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_TIM_PWM_Start+0x138>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_TIM_PWM_Start+0xfa>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d009      	beq.n	800224a <HAL_TIM_PWM_Start+0xfa>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a14      	ldr	r2, [pc, #80]	; (800228c <HAL_TIM_PWM_Start+0x13c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d004      	beq.n	800224a <HAL_TIM_PWM_Start+0xfa>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a12      	ldr	r2, [pc, #72]	; (8002290 <HAL_TIM_PWM_Start+0x140>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d111      	bne.n	800226e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b06      	cmp	r3, #6
 800225a:	d010      	beq.n	800227e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226c:	e007      	b.n	800227e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40000400 	.word	0x40000400
 8002290:	40000800 	.word	0x40000800

08002294 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fd8e 	bl	8002dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a29      	ldr	r2, [pc, #164]	; (8002358 <HAL_TIM_PWM_Stop+0xc4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d117      	bne.n	80022e6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_TIM_PWM_Stop+0x52>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a1a      	ldr	r2, [r3, #32]
 80022cc:	f240 4344 	movw	r3, #1092	; 0x444
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <HAL_TIM_PWM_Stop+0x52>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_TIM_PWM_Stop+0x82>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	f240 4344 	movw	r3, #1092	; 0x444
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d107      	bne.n	8002316 <HAL_TIM_PWM_Stop+0x82>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_TIM_PWM_Stop+0x92>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002324:	e013      	b.n	800234e <HAL_TIM_PWM_Stop+0xba>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d104      	bne.n	8002336 <HAL_TIM_PWM_Stop+0xa2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002334:	e00b      	b.n	800234e <HAL_TIM_PWM_Stop+0xba>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d104      	bne.n	8002346 <HAL_TIM_PWM_Stop+0xb2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002344:	e003      	b.n	800234e <HAL_TIM_PWM_Stop+0xba>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40012c00 	.word	0x40012c00

0800235c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b02      	cmp	r3, #2
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b02      	cmp	r3, #2
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0202 	mvn.w	r2, #2
 8002388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa76 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa69 	bl	800287e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fa78 	bl	80028a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d122      	bne.n	800240c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d11b      	bne.n	800240c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0204 	mvn.w	r2, #4
 80023dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa4c 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fa3f 	bl	800287e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fa4e 	bl	80028a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b08      	cmp	r3, #8
 8002418:	d122      	bne.n	8002460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b08      	cmp	r3, #8
 8002426:	d11b      	bne.n	8002460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0208 	mvn.w	r2, #8
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2204      	movs	r2, #4
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa22 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa15 	bl	800287e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fa24 	bl	80028a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b10      	cmp	r3, #16
 800246c:	d122      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b10      	cmp	r3, #16
 800247a:	d11b      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0210 	mvn.w	r2, #16
 8002484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2208      	movs	r2, #8
 800248a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9f8 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f9eb 	bl	800287e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f9fa 	bl	80028a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d107      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0201 	mvn.w	r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fa6c 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	2b80      	cmp	r3, #128	; 0x80
 80024ec:	d10e      	bne.n	800250c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d107      	bne.n	800250c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fd3a 	bl	8002f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d10e      	bne.n	8002538 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d107      	bne.n	8002538 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f9be 	bl	80028b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b20      	cmp	r3, #32
 8002544:	d10e      	bne.n	8002564 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d107      	bne.n	8002564 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0220 	mvn.w	r2, #32
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fd05 	bl	8002f6e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002586:	2302      	movs	r3, #2
 8002588:	e0ae      	b.n	80026e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	f200 809f 	bhi.w	80026d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025d5 	.word	0x080025d5
 80025a4:	080026d9 	.word	0x080026d9
 80025a8:	080026d9 	.word	0x080026d9
 80025ac:	080026d9 	.word	0x080026d9
 80025b0:	08002615 	.word	0x08002615
 80025b4:	080026d9 	.word	0x080026d9
 80025b8:	080026d9 	.word	0x080026d9
 80025bc:	080026d9 	.word	0x080026d9
 80025c0:	08002657 	.word	0x08002657
 80025c4:	080026d9 	.word	0x080026d9
 80025c8:	080026d9 	.word	0x080026d9
 80025cc:	080026d9 	.word	0x080026d9
 80025d0:	08002697 	.word	0x08002697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f9d6 	bl	800298c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0208 	orr.w	r2, r2, #8
 80025ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0204 	bic.w	r2, r2, #4
 80025fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6999      	ldr	r1, [r3, #24]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	619a      	str	r2, [r3, #24]
      break;
 8002612:	e064      	b.n	80026de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fa1c 	bl	8002a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6999      	ldr	r1, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	021a      	lsls	r2, r3, #8
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	619a      	str	r2, [r3, #24]
      break;
 8002654:	e043      	b.n	80026de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fa65 	bl	8002b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0208 	orr.w	r2, r2, #8
 8002670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0204 	bic.w	r2, r2, #4
 8002680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69d9      	ldr	r1, [r3, #28]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	61da      	str	r2, [r3, #28]
      break;
 8002694:	e023      	b.n	80026de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 faaf 	bl	8002c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69d9      	ldr	r1, [r3, #28]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	61da      	str	r2, [r3, #28]
      break;
 80026d6:	e002      	b.n	80026de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	75fb      	strb	r3, [r7, #23]
      break;
 80026dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_TIM_ConfigClockSource+0x1c>
 8002708:	2302      	movs	r3, #2
 800270a:	e0b4      	b.n	8002876 <HAL_TIM_ConfigClockSource+0x186>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800272a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002744:	d03e      	beq.n	80027c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274a:	f200 8087 	bhi.w	800285c <HAL_TIM_ConfigClockSource+0x16c>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	f000 8086 	beq.w	8002862 <HAL_TIM_ConfigClockSource+0x172>
 8002756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275a:	d87f      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b70      	cmp	r3, #112	; 0x70
 800275e:	d01a      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0xa6>
 8002760:	2b70      	cmp	r3, #112	; 0x70
 8002762:	d87b      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b60      	cmp	r3, #96	; 0x60
 8002766:	d050      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x11a>
 8002768:	2b60      	cmp	r3, #96	; 0x60
 800276a:	d877      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b50      	cmp	r3, #80	; 0x50
 800276e:	d03c      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xfa>
 8002770:	2b50      	cmp	r3, #80	; 0x50
 8002772:	d873      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d058      	beq.n	800282a <HAL_TIM_ConfigClockSource+0x13a>
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d86f      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b30      	cmp	r3, #48	; 0x30
 800277e:	d064      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	2b30      	cmp	r3, #48	; 0x30
 8002782:	d86b      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b20      	cmp	r3, #32
 8002786:	d060      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x15a>
 8002788:	2b20      	cmp	r3, #32
 800278a:	d867      	bhi.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d05c      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x15a>
 8002790:	2b10      	cmp	r3, #16
 8002792:	d05a      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x15a>
 8002794:	e062      	b.n	800285c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6899      	ldr	r1, [r3, #8]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f000 faf0 	bl	8002d8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	609a      	str	r2, [r3, #8]
      break;
 80027c2:	e04f      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6899      	ldr	r1, [r3, #8]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f000 fad9 	bl	8002d8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027e6:	609a      	str	r2, [r3, #8]
      break;
 80027e8:	e03c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f000 fa50 	bl	8002c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2150      	movs	r1, #80	; 0x50
 8002802:	4618      	mov	r0, r3
 8002804:	f000 faa7 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002808:	e02c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	461a      	mov	r2, r3
 8002818:	f000 fa6e 	bl	8002cf8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2160      	movs	r1, #96	; 0x60
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fa97 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002828:	e01c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	461a      	mov	r2, r3
 8002838:	f000 fa30 	bl	8002c9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2140      	movs	r1, #64	; 0x40
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fa87 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 8002848:	e00c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f000 fa7e 	bl	8002d56 <TIM_ITRx_SetConfig>
      break;
 800285a:	e003      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      break;
 8002860:	e000      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
	...

080028c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <TIM_Base_SetConfig+0xb8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00b      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d007      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a26      	ldr	r2, [pc, #152]	; (8002984 <TIM_Base_SetConfig+0xbc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a25      	ldr	r2, [pc, #148]	; (8002988 <TIM_Base_SetConfig+0xc0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <TIM_Base_SetConfig+0xb8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <TIM_Base_SetConfig+0xbc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <TIM_Base_SetConfig+0xc0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <TIM_Base_SetConfig+0xb8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800

0800298c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f023 0201 	bic.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f023 0302 	bic.w	r3, r3, #2
 80029d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <TIM_OC1_SetConfig+0xc8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0308 	bic.w	r3, r3, #8
 80029ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <TIM_OC1_SetConfig+0xc8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d111      	bne.n	8002a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	621a      	str	r2, [r3, #32]
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f023 0210 	bic.w	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0320 	bic.w	r3, r3, #32
 8002aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <TIM_OC2_SetConfig+0xd0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10d      	bne.n	8002ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <TIM_OC2_SetConfig+0xd0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d113      	bne.n	8002b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40012c00 	.word	0x40012c00

08002b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <TIM_OC3_SetConfig+0xd0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10d      	bne.n	8002ba6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <TIM_OC3_SetConfig+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d113      	bne.n	8002bd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	621a      	str	r2, [r3, #32]
}
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00

08002c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	031b      	lsls	r3, r3, #12
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <TIM_OC4_SetConfig+0x98>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	621a      	str	r2, [r3, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00

08002c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f023 0201 	bic.w	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f023 030a 	bic.w	r3, r3, #10
 8002cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0210 	bic.w	r2, r3, #16
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	031b      	lsls	r3, r3, #12
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
}
 8002d4c:	bf00      	nop
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f043 0307 	orr.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b087      	sub	sp, #28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	609a      	str	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2201      	movs	r2, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e046      	b.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d009      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10c      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800

08002ecc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e03d      	b.n	8002f64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e042      	b.n	800302a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fe f831 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2224      	movs	r2, #36	; 0x24
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f91c 	bl	8003214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ffa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800300a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b08a      	sub	sp, #40	; 0x28
 8003036:	af02      	add	r7, sp, #8
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	d16d      	bne.n	800312e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_UART_Transmit+0x2c>
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e066      	b.n	8003130 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2221      	movs	r2, #33	; 0x21
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003070:	f7fe f870 	bl	8001154 <HAL_GetTick>
 8003074:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	88fa      	ldrh	r2, [r7, #6]
 800307a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308a:	d108      	bne.n	800309e <HAL_UART_Transmit+0x6c>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e003      	b.n	80030a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030a6:	e02a      	b.n	80030fe <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f840 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e036      	b.n	8003130 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	3302      	adds	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e007      	b.n	80030f0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1cf      	bne.n	80030a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f810 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e006      	b.n	8003130 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b090      	sub	sp, #64	; 0x40
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	e050      	b.n	80031ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d04c      	beq.n	80031ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <UART_WaitOnFlagUntilTimeout+0x30>
 8003158:	f7fd fffc 	bl	8001154 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003164:	429a      	cmp	r2, r3
 8003166:	d241      	bcs.n	80031ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	330c      	adds	r3, #12
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003188:	637a      	str	r2, [r7, #52]	; 0x34
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800318e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e5      	bne.n	8003168 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3314      	adds	r3, #20
 80031a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	613b      	str	r3, [r7, #16]
   return(result);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3314      	adds	r3, #20
 80031ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031bc:	623a      	str	r2, [r7, #32]
 80031be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	69f9      	ldr	r1, [r7, #28]
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e5      	bne.n	800319c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e00f      	b.n	800320c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	429a      	cmp	r2, r3
 8003208:	d09f      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3740      	adds	r7, #64	; 0x40
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800324e:	f023 030c 	bic.w	r3, r3, #12
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	430b      	orrs	r3, r1
 800325a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <UART_SetConfig+0x114>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d103      	bne.n	8003284 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800327c:	f7fe fde6 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	e002      	b.n	800328a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7fe fdce 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8003288:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <UART_SetConfig+0x118>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	0119      	lsls	r1, r3, #4
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <UART_SetConfig+0x118>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <UART_SetConfig+0x118>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	4419      	add	r1, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <UART_SetConfig+0x118>)
 80032fa:	fba3 0302 	umull	r0, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <UART_SetConfig+0x118>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	440a      	add	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40013800 	.word	0x40013800
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800333e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003342:	2b84      	cmp	r3, #132	; 0x84
 8003344:	d005      	beq.n	8003352 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003346:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	3303      	adds	r3, #3
 8003350:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003362:	f000 fae7 	bl	8003934 <vTaskStartScheduler>
  
  return osOK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}

0800336c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af04      	add	r7, sp, #16
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <osThreadCreate+0x54>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01c      	beq.n	80033c0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685c      	ldr	r4, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681d      	ldr	r5, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691e      	ldr	r6, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ffc9 	bl	8003330 <makeFreeRtosPriority>
 800339e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033a8:	9202      	str	r2, [sp, #8]
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	9100      	str	r1, [sp, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	4632      	mov	r2, r6
 80033b2:	4629      	mov	r1, r5
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 f8e8 	bl	800358a <xTaskCreateStatic>
 80033ba:	4603      	mov	r3, r0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e01c      	b.n	80033fa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685c      	ldr	r4, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033cc:	b29e      	uxth	r6, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ffab 	bl	8003330 <makeFreeRtosPriority>
 80033da:	4602      	mov	r2, r0
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4632      	mov	r2, r6
 80033e8:	4629      	mov	r1, r5
 80033ea:	4620      	mov	r0, r4
 80033ec:	f000 f929 	bl	8003642 <xTaskCreate>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033fa:	68fb      	ldr	r3, [r7, #12]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003404 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <osDelay+0x16>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	e000      	b.n	800341c <osDelay+0x18>
 800341a:	2301      	movs	r3, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fa55 	bl	80038cc <vTaskDelay>
  
  return osOK;
 8003422:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f103 0208 	add.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f103 0208 	add.w	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0208 	add.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d103      	bne.n	80034e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e00c      	b.n	8003502 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3308      	adds	r3, #8
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e002      	b.n	80034f6 <vListInsert+0x2e>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d2f6      	bcs.n	80034f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d103      	bne.n	800356c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1e5a      	subs	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08e      	sub	sp, #56	; 0x38
 800358e:	af04      	add	r7, sp, #16
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	61fb      	str	r3, [r7, #28]
}
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035d0:	23b4      	movs	r3, #180	; 0xb4
 80035d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2bb4      	cmp	r3, #180	; 0xb4
 80035d8:	d00a      	beq.n	80035f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	61bb      	str	r3, [r7, #24]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01e      	beq.n	8003634 <xTaskCreateStatic+0xaa>
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003604:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	2202      	movs	r2, #2
 800360a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800360e:	2300      	movs	r3, #0
 8003610:	9303      	str	r3, [sp, #12]
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	9302      	str	r3, [sp, #8]
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f850 	bl	80036cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800362c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800362e:	f000 f8e3 	bl	80037f8 <prvAddNewTaskToReadyList>
 8003632:	e001      	b.n	8003638 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003638:	697b      	ldr	r3, [r7, #20]
	}
 800363a:	4618      	mov	r0, r3
 800363c:	3728      	adds	r7, #40	; 0x28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003642:	b580      	push	{r7, lr}
 8003644:	b08c      	sub	sp, #48	; 0x30
 8003646:	af04      	add	r7, sp, #16
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fe9a 	bl	8004390 <pvPortMalloc>
 800365c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00e      	beq.n	8003682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003664:	20b4      	movs	r0, #180	; 0xb4
 8003666:	f000 fe93 	bl	8004390 <pvPortMalloc>
 800366a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
 8003678:	e005      	b.n	8003686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f000 ff4c 	bl	8004518 <vPortFree>
 8003680:	e001      	b.n	8003686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d017      	beq.n	80036bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003694:	88fa      	ldrh	r2, [r7, #6]
 8003696:	2300      	movs	r3, #0
 8003698:	9303      	str	r3, [sp, #12]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f80e 	bl	80036cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036b0:	69f8      	ldr	r0, [r7, #28]
 80036b2:	f000 f8a1 	bl	80037f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036b6:	2301      	movs	r3, #1
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e002      	b.n	80036c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036c2:	69bb      	ldr	r3, [r7, #24]
	}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3720      	adds	r7, #32
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036e4:	3b01      	subs	r3, #1
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <prvInitialiseNewTask+0x48>
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	617b      	str	r3, [r7, #20]
}
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e012      	b.n	8003740 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	7819      	ldrb	r1, [r3, #0]
 8003722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	4413      	add	r3, r2
 8003728:	3334      	adds	r3, #52	; 0x34
 800372a:	460a      	mov	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d006      	beq.n	8003748 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3301      	adds	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d9e9      	bls.n	800371a <prvInitialiseNewTask+0x4e>
 8003746:	e000      	b.n	800374a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003748:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	2b06      	cmp	r3, #6
 8003756:	d901      	bls.n	800375c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003758:	2306      	movs	r3, #6
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	2200      	movs	r2, #0
 800376c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	3304      	adds	r3, #4
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fe79 	bl	800346a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	3318      	adds	r3, #24
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fe74 	bl	800346a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003786:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	f1c3 0207 	rsb	r2, r3, #7
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	334c      	adds	r3, #76	; 0x4c
 80037ac:	2260      	movs	r2, #96	; 0x60
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 ffeb 	bl	800478c <memset>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <prvInitialiseNewTask+0x120>)
 80037ba:	651a      	str	r2, [r3, #80]	; 0x50
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <prvInitialiseNewTask+0x124>)
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <prvInitialiseNewTask+0x128>)
 80037c6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	69b8      	ldr	r0, [r7, #24]
 80037ce:	f000 fc29 	bl	8004024 <pxPortInitialiseStack>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037e4:	bf00      	nop
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	080049ac 	.word	0x080049ac
 80037f0:	080049cc 	.word	0x080049cc
 80037f4:	0800498c 	.word	0x0800498c

080037f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003800:	f000 fd04 	bl	800420c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <prvAddNewTaskToReadyList+0xb8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <prvAddNewTaskToReadyList+0xb8>)
 800380c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800380e:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <prvAddNewTaskToReadyList+0xbc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003816:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <prvAddNewTaskToReadyList+0xbc>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800381c:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <prvAddNewTaskToReadyList+0xb8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d110      	bne.n	8003846 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003824:	f000 fad2 	bl	8003dcc <prvInitialiseTaskLists>
 8003828:	e00d      	b.n	8003846 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <prvAddNewTaskToReadyList+0xc0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <prvAddNewTaskToReadyList+0xbc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	429a      	cmp	r2, r3
 800383e:	d802      	bhi.n	8003846 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003840:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <prvAddNewTaskToReadyList+0xbc>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <prvAddNewTaskToReadyList+0xc4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3301      	adds	r3, #1
 800384c:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <prvAddNewTaskToReadyList+0xc4>)
 800384e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2201      	movs	r2, #1
 8003856:	409a      	lsls	r2, r3
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <prvAddNewTaskToReadyList+0xc8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <prvAddNewTaskToReadyList+0xc8>)
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <prvAddNewTaskToReadyList+0xcc>)
 8003870:	441a      	add	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7ff fe02 	bl	8003482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800387e:	f000 fcf5 	bl	800426c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <prvAddNewTaskToReadyList+0xc0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <prvAddNewTaskToReadyList+0xbc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d207      	bcs.n	80038a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <prvAddNewTaskToReadyList+0xd0>)
 800389a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000628 	.word	0x20000628
 80038b4:	20000528 	.word	0x20000528
 80038b8:	20000634 	.word	0x20000634
 80038bc:	20000644 	.word	0x20000644
 80038c0:	20000630 	.word	0x20000630
 80038c4:	2000052c 	.word	0x2000052c
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d017      	beq.n	800390e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <vTaskDelay+0x60>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <vTaskDelay+0x30>
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	60bb      	str	r3, [r7, #8]
}
 80038f8:	bf00      	nop
 80038fa:	e7fe      	b.n	80038fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038fc:	f000 f884 	bl	8003a08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003900:	2100      	movs	r1, #0
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fb28 	bl	8003f58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003908:	f000 f88c 	bl	8003a24 <xTaskResumeAll>
 800390c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <vTaskDelay+0x64>)
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000650 	.word	0x20000650
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003942:	463a      	mov	r2, r7
 8003944:	1d39      	adds	r1, r7, #4
 8003946:	f107 0308 	add.w	r3, r7, #8
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fc00 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003950:	6839      	ldr	r1, [r7, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	9202      	str	r2, [sp, #8]
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2300      	movs	r3, #0
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	460a      	mov	r2, r1
 8003962:	4921      	ldr	r1, [pc, #132]	; (80039e8 <vTaskStartScheduler+0xb4>)
 8003964:	4821      	ldr	r0, [pc, #132]	; (80039ec <vTaskStartScheduler+0xb8>)
 8003966:	f7ff fe10 	bl	800358a <xTaskCreateStatic>
 800396a:	4603      	mov	r3, r0
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <vTaskStartScheduler+0xbc>)
 800396e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <vTaskStartScheduler+0xbc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003978:	2301      	movs	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e001      	b.n	8003982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d11b      	bne.n	80039c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	613b      	str	r3, [r7, #16]
}
 800399a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <vTaskStartScheduler+0xc0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	334c      	adds	r3, #76	; 0x4c
 80039a2:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <vTaskStartScheduler+0xc4>)
 80039a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <vTaskStartScheduler+0xc8>)
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039ae:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <vTaskStartScheduler+0xcc>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <vTaskStartScheduler+0xd0>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039ba:	f000 fbb5 	bl	8004128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039be:	e00e      	b.n	80039de <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d10a      	bne.n	80039de <vTaskStartScheduler+0xaa>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	60fb      	str	r3, [r7, #12]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <vTaskStartScheduler+0xa8>
}
 80039de:	bf00      	nop
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	08004958 	.word	0x08004958
 80039ec:	08003d9d 	.word	0x08003d9d
 80039f0:	2000064c 	.word	0x2000064c
 80039f4:	20000528 	.word	0x20000528
 80039f8:	20000078 	.word	0x20000078
 80039fc:	20000648 	.word	0x20000648
 8003a00:	20000634 	.word	0x20000634
 8003a04:	2000062c 	.word	0x2000062c

08003a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <vTaskSuspendAll+0x18>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a03      	ldr	r2, [pc, #12]	; (8003a20 <vTaskSuspendAll+0x18>)
 8003a14:	6013      	str	r3, [r2, #0]
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000650 	.word	0x20000650

08003a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <xTaskResumeAll+0x114>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	603b      	str	r3, [r7, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a50:	f000 fbdc 	bl	800420c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a54:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <xTaskResumeAll+0x114>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	4a37      	ldr	r2, [pc, #220]	; (8003b38 <xTaskResumeAll+0x114>)
 8003a5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <xTaskResumeAll+0x114>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d161      	bne.n	8003b2a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a66:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <xTaskResumeAll+0x118>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d05d      	beq.n	8003b2a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a6e:	e02e      	b.n	8003ace <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a70:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <xTaskResumeAll+0x11c>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fd5b 	bl	8003538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fd56 	bl	8003538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	2201      	movs	r2, #1
 8003a92:	409a      	lsls	r2, r3
 8003a94:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <xTaskResumeAll+0x120>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <xTaskResumeAll+0x120>)
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <xTaskResumeAll+0x124>)
 8003aac:	441a      	add	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7ff fce4 	bl	8003482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <xTaskResumeAll+0x128>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <xTaskResumeAll+0x12c>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <xTaskResumeAll+0x11c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1cc      	bne.n	8003a70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003adc:	f000 fa18 	bl	8003f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <xTaskResumeAll+0x130>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003aec:	f000 f836 	bl	8003b5c <xTaskIncrementTick>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <xTaskResumeAll+0x12c>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f1      	bne.n	8003aec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <xTaskResumeAll+0x130>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <xTaskResumeAll+0x12c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b16:	2301      	movs	r3, #1
 8003b18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <xTaskResumeAll+0x134>)
 8003b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b2a:	f000 fb9f 	bl	800426c <vPortExitCritical>

	return xAlreadyYielded;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000650 	.word	0x20000650
 8003b3c:	20000628 	.word	0x20000628
 8003b40:	200005e8 	.word	0x200005e8
 8003b44:	20000630 	.word	0x20000630
 8003b48:	2000052c 	.word	0x2000052c
 8003b4c:	20000528 	.word	0x20000528
 8003b50:	2000063c 	.word	0x2000063c
 8003b54:	20000638 	.word	0x20000638
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b66:	4b51      	ldr	r3, [pc, #324]	; (8003cac <xTaskIncrementTick+0x150>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 808d 	bne.w	8003c8a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b70:	4b4f      	ldr	r3, [pc, #316]	; (8003cb0 <xTaskIncrementTick+0x154>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b78:	4a4d      	ldr	r2, [pc, #308]	; (8003cb0 <xTaskIncrementTick+0x154>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d120      	bne.n	8003bc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b84:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	603b      	str	r3, [r7, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xTaskIncrementTick+0x46>
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a41      	ldr	r2, [pc, #260]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4a41      	ldr	r2, [pc, #260]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <xTaskIncrementTick+0x160>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <xTaskIncrementTick+0x160>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	f000 f9a5 	bl	8003f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bc6:	4b3e      	ldr	r3, [pc, #248]	; (8003cc0 <xTaskIncrementTick+0x164>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d34d      	bcc.n	8003c6c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd0:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <xTaskIncrementTick+0x82>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xTaskIncrementTick+0x84>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be4:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <xTaskIncrementTick+0x164>)
 8003be6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bea:	601a      	str	r2, [r3, #0]
					break;
 8003bec:	e03e      	b.n	8003c6c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d203      	bcs.n	8003c0e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c06:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <xTaskIncrementTick+0x164>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6013      	str	r3, [r2, #0]
						break;
 8003c0c:	e02e      	b.n	8003c6c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fc90 	bl	8003538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3318      	adds	r3, #24
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fc87 	bl	8003538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	2201      	movs	r2, #1
 8003c30:	409a      	lsls	r2, r3
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <xTaskIncrementTick+0x168>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <xTaskIncrementTick+0x168>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <xTaskIncrementTick+0x16c>)
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7ff fc15 	bl	8003482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <xTaskIncrementTick+0x170>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d3b4      	bcc.n	8003bd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6a:	e7b1      	b.n	8003bd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <xTaskIncrementTick+0x170>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	4915      	ldr	r1, [pc, #84]	; (8003cc8 <xTaskIncrementTick+0x16c>)
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d907      	bls.n	8003c94 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	e004      	b.n	8003c94 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <xTaskIncrementTick+0x174>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	4a0f      	ldr	r2, [pc, #60]	; (8003cd0 <xTaskIncrementTick+0x174>)
 8003c92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <xTaskIncrementTick+0x178>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ca0:	697b      	ldr	r3, [r7, #20]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000650 	.word	0x20000650
 8003cb0:	2000062c 	.word	0x2000062c
 8003cb4:	200005e0 	.word	0x200005e0
 8003cb8:	200005e4 	.word	0x200005e4
 8003cbc:	20000640 	.word	0x20000640
 8003cc0:	20000648 	.word	0x20000648
 8003cc4:	20000630 	.word	0x20000630
 8003cc8:	2000052c 	.word	0x2000052c
 8003ccc:	20000528 	.word	0x20000528
 8003cd0:	20000638 	.word	0x20000638
 8003cd4:	2000063c 	.word	0x2000063c

08003cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <vTaskSwitchContext+0xac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ce6:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <vTaskSwitchContext+0xb0>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cec:	e044      	b.n	8003d78 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003cee:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <vTaskSwitchContext+0xb0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <vTaskSwitchContext+0xb4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d02:	7afb      	ldrb	r3, [r7, #11]
 8003d04:	f1c3 031f 	rsb	r3, r3, #31
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	4921      	ldr	r1, [pc, #132]	; (8003d90 <vTaskSwitchContext+0xb8>)
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	607b      	str	r3, [r7, #4]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <vTaskSwitchContext+0x5a>
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <vTaskSwitchContext+0xb8>)
 8003d40:	4413      	add	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3308      	adds	r3, #8
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d104      	bne.n	8003d64 <vTaskSwitchContext+0x8c>
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <vTaskSwitchContext+0xbc>)
 8003d6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <vTaskSwitchContext+0xbc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	334c      	adds	r3, #76	; 0x4c
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <vTaskSwitchContext+0xc0>)
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000650 	.word	0x20000650
 8003d88:	2000063c 	.word	0x2000063c
 8003d8c:	20000630 	.word	0x20000630
 8003d90:	2000052c 	.word	0x2000052c
 8003d94:	20000528 	.word	0x20000528
 8003d98:	20000078 	.word	0x20000078

08003d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003da4:	f000 f852 	bl	8003e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <prvIdleTask+0x28>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d9f9      	bls.n	8003da4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <prvIdleTask+0x2c>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003dc0:	e7f0      	b.n	8003da4 <prvIdleTask+0x8>
 8003dc2:	bf00      	nop
 8003dc4:	2000052c 	.word	0x2000052c
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	e00c      	b.n	8003df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <prvInitialiseTaskLists+0x60>)
 8003de4:	4413      	add	r3, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fb20 	bl	800342c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3301      	adds	r3, #1
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d9ef      	bls.n	8003dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003df8:	480d      	ldr	r0, [pc, #52]	; (8003e30 <prvInitialiseTaskLists+0x64>)
 8003dfa:	f7ff fb17 	bl	800342c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dfe:	480d      	ldr	r0, [pc, #52]	; (8003e34 <prvInitialiseTaskLists+0x68>)
 8003e00:	f7ff fb14 	bl	800342c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e04:	480c      	ldr	r0, [pc, #48]	; (8003e38 <prvInitialiseTaskLists+0x6c>)
 8003e06:	f7ff fb11 	bl	800342c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e0a:	480c      	ldr	r0, [pc, #48]	; (8003e3c <prvInitialiseTaskLists+0x70>)
 8003e0c:	f7ff fb0e 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <prvInitialiseTaskLists+0x74>)
 8003e12:	f7ff fb0b 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <prvInitialiseTaskLists+0x78>)
 8003e18:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <prvInitialiseTaskLists+0x64>)
 8003e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <prvInitialiseTaskLists+0x7c>)
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <prvInitialiseTaskLists+0x68>)
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	2000052c 	.word	0x2000052c
 8003e30:	200005b8 	.word	0x200005b8
 8003e34:	200005cc 	.word	0x200005cc
 8003e38:	200005e8 	.word	0x200005e8
 8003e3c:	200005fc 	.word	0x200005fc
 8003e40:	20000614 	.word	0x20000614
 8003e44:	200005e0 	.word	0x200005e0
 8003e48:	200005e4 	.word	0x200005e4

08003e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e52:	e019      	b.n	8003e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e54:	f000 f9da 	bl	800420c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <prvCheckTasksWaitingTermination+0x50>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fb67 	bl	8003538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <prvCheckTasksWaitingTermination+0x54>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <prvCheckTasksWaitingTermination+0x54>)
 8003e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <prvCheckTasksWaitingTermination+0x58>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <prvCheckTasksWaitingTermination+0x58>)
 8003e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e7e:	f000 f9f5 	bl	800426c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f810 	bl	8003ea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <prvCheckTasksWaitingTermination+0x58>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e1      	bne.n	8003e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200005fc 	.word	0x200005fc
 8003ea0:	20000628 	.word	0x20000628
 8003ea4:	20000610 	.word	0x20000610

08003ea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	334c      	adds	r3, #76	; 0x4c
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fc7f 	bl	80047b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d108      	bne.n	8003ed6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fb25 	bl	8004518 <vPortFree>
				vPortFree( pxTCB );
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fb22 	bl	8004518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ed4:	e018      	b.n	8003f08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d103      	bne.n	8003ee8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb19 	bl	8004518 <vPortFree>
	}
 8003ee6:	e00f      	b.n	8003f08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d00a      	beq.n	8003f08 <prvDeleteTCB+0x60>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	60fb      	str	r3, [r7, #12]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <prvDeleteTCB+0x5e>
	}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <prvResetNextTaskUnblockTime+0x40>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <prvResetNextTaskUnblockTime+0x14>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <prvResetNextTaskUnblockTime+0x16>
 8003f24:	2300      	movs	r3, #0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <prvResetNextTaskUnblockTime+0x44>)
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f32:	e008      	b.n	8003f46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <prvResetNextTaskUnblockTime+0x40>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <prvResetNextTaskUnblockTime+0x44>)
 8003f44:	6013      	str	r3, [r2, #0]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	200005e0 	.word	0x200005e0
 8003f54:	20000648 	.word	0x20000648

08003f58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f62:	4b29      	ldr	r3, [pc, #164]	; (8004008 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f68:	4b28      	ldr	r3, [pc, #160]	; (800400c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fae2 	bl	8003538 <uxListRemove>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	2201      	movs	r2, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43da      	mvns	r2, r3
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	4a20      	ldr	r2, [pc, #128]	; (8004010 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d10a      	bne.n	8003fb0 <prvAddCurrentTaskToDelayedList+0x58>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	481a      	ldr	r0, [pc, #104]	; (8004014 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003faa:	f7ff fa6a 	bl	8003482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fae:	e026      	b.n	8003ffe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d209      	bcs.n	8003fdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f7ff fa77 	bl	80034c8 <vListInsert>
}
 8003fda:	e010      	b.n	8003ffe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f7ff fa6d 	bl	80034c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d202      	bcs.n	8003ffe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ff8:	4a09      	ldr	r2, [pc, #36]	; (8004020 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6013      	str	r3, [r2, #0]
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	2000062c 	.word	0x2000062c
 800400c:	20000528 	.word	0x20000528
 8004010:	20000630 	.word	0x20000630
 8004014:	20000614 	.word	0x20000614
 8004018:	200005e4 	.word	0x200005e4
 800401c:	200005e0 	.word	0x200005e0
 8004020:	20000648 	.word	0x20000648

08004024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b04      	subs	r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800403c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b04      	subs	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004054:	4a08      	ldr	r2, [pc, #32]	; (8004078 <pxPortInitialiseStack+0x54>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b14      	subs	r3, #20
 800405e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b20      	subs	r3, #32
 800406a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	0800407d 	.word	0x0800407d

0800407c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <prvTaskExitError+0x54>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d00a      	beq.n	80040a6 <prvTaskExitError+0x2a>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <prvTaskExitError+0x28>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60bb      	str	r3, [r7, #8]
}
 80040b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ba:	bf00      	nop
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0fc      	beq.n	80040bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000074 	.word	0x20000074
	...

080040e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <pxCurrentTCBConst2>)
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040ea:	f380 8809 	msr	PSP, r0
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80040fe:	4770      	bx	lr

08004100 <pxCurrentTCBConst2>:
 8004100:	20000528 	.word	0x20000528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004108:	4806      	ldr	r0, [pc, #24]	; (8004124 <prvPortStartFirstTask+0x1c>)
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	6800      	ldr	r0, [r0, #0]
 800410e:	f380 8808 	msr	MSP, r0
 8004112:	b662      	cpsie	i
 8004114:	b661      	cpsie	f
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	df00      	svc	0
 8004120:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004122:	bf00      	nop
 8004124:	e000ed08 	.word	0xe000ed08

08004128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800412e:	4b32      	ldr	r3, [pc, #200]	; (80041f8 <xPortStartScheduler+0xd0>)
 8004130:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <xPortStartScheduler+0xd4>)
 8004154:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004156:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <xPortStartScheduler+0xd8>)
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800415c:	e009      	b.n	8004172 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800415e:	4b28      	ldr	r3, [pc, #160]	; (8004200 <xPortStartScheduler+0xd8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	4a26      	ldr	r2, [pc, #152]	; (8004200 <xPortStartScheduler+0xd8>)
 8004166:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d0ef      	beq.n	800415e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <xPortStartScheduler+0xd8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1c3 0307 	rsb	r3, r3, #7
 8004186:	2b04      	cmp	r3, #4
 8004188:	d00a      	beq.n	80041a0 <xPortStartScheduler+0x78>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	60bb      	str	r3, [r7, #8]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <xPortStartScheduler+0xd8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <xPortStartScheduler+0xd8>)
 80041a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <xPortStartScheduler+0xd8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <xPortStartScheduler+0xd8>)
 80041b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <xPortStartScheduler+0xdc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a10      	ldr	r2, [pc, #64]	; (8004204 <xPortStartScheduler+0xdc>)
 80041c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <xPortStartScheduler+0xdc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <xPortStartScheduler+0xdc>)
 80041d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041d6:	f000 f8b9 	bl	800434c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <xPortStartScheduler+0xe0>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041e0:	f7ff ff92 	bl	8004108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041e4:	f7ff fd78 	bl	8003cd8 <vTaskSwitchContext>
	prvTaskExitError();
 80041e8:	f7ff ff48 	bl	800407c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	e000e400 	.word	0xe000e400
 80041fc:	20000654 	.word	0x20000654
 8004200:	20000658 	.word	0x20000658
 8004204:	e000ed20 	.word	0xe000ed20
 8004208:	20000074 	.word	0x20000074

0800420c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	607b      	str	r3, [r7, #4]
}
 8004224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <vPortEnterCritical+0x58>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <vPortEnterCritical+0x58>)
 800422e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <vPortEnterCritical+0x58>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d10f      	bne.n	8004258 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <vPortEnterCritical+0x5c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <vPortEnterCritical+0x4c>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	603b      	str	r3, [r7, #0]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <vPortEnterCritical+0x4a>
	}
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000074 	.word	0x20000074
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <vPortExitCritical+0x4c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <vPortExitCritical+0x24>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	607b      	str	r3, [r7, #4]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <vPortExitCritical+0x4c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3b01      	subs	r3, #1
 8004296:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <vPortExitCritical+0x4c>)
 8004298:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800429a:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <vPortExitCritical+0x4c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <vPortExitCritical+0x42>
 80042a2:	2300      	movs	r3, #0
 80042a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	20000074 	.word	0x20000074
 80042bc:	00000000 	.word	0x00000000

080042c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042c0:	f3ef 8009 	mrs	r0, PSP
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <pxCurrentTCBConst>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042d0:	6010      	str	r0, [r2, #0]
 80042d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80042d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042da:	f380 8811 	msr	BASEPRI, r0
 80042de:	f7ff fcfb 	bl	8003cd8 <vTaskSwitchContext>
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042f6:	f380 8809 	msr	PSP, r0
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	4770      	bx	lr

08004300 <pxCurrentTCBConst>:
 8004300:	20000528 	.word	0x20000528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
}
 8004320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004322:	f7ff fc1b 	bl	8003b5c <xTaskIncrementTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <SysTick_Handler+0x40>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f383 8811 	msr	BASEPRI, r3
}
 800433e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <vPortSetupTimerInterrupt+0x30>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <vPortSetupTimerInterrupt+0x34>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <vPortSetupTimerInterrupt+0x38>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a09      	ldr	r2, [pc, #36]	; (8004388 <vPortSetupTimerInterrupt+0x3c>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	4a08      	ldr	r2, [pc, #32]	; (800438c <vPortSetupTimerInterrupt+0x40>)
 800436a:	3b01      	subs	r3, #1
 800436c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800436e:	4b03      	ldr	r3, [pc, #12]	; (800437c <vPortSetupTimerInterrupt+0x30>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	e000e010 	.word	0xe000e010
 8004380:	e000e018 	.word	0xe000e018
 8004384:	20000068 	.word	0x20000068
 8004388:	10624dd3 	.word	0x10624dd3
 800438c:	e000e014 	.word	0xe000e014

08004390 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800439c:	f7ff fb34 	bl	8003a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043a0:	4b58      	ldr	r3, [pc, #352]	; (8004504 <pvPortMalloc+0x174>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043a8:	f000 f910 	bl	80045cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043ac:	4b56      	ldr	r3, [pc, #344]	; (8004508 <pvPortMalloc+0x178>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f040 808e 	bne.w	80044d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01d      	beq.n	80043fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80043c0:	2208      	movs	r2, #8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d014      	beq.n	80043fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	3308      	adds	r3, #8
 80043da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <pvPortMalloc+0x6c>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	617b      	str	r3, [r7, #20]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d069      	beq.n	80044d6 <pvPortMalloc+0x146>
 8004402:	4b42      	ldr	r3, [pc, #264]	; (800450c <pvPortMalloc+0x17c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d864      	bhi.n	80044d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800440c:	4b40      	ldr	r3, [pc, #256]	; (8004510 <pvPortMalloc+0x180>)
 800440e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004410:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <pvPortMalloc+0x180>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004416:	e004      	b.n	8004422 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d903      	bls.n	8004434 <pvPortMalloc+0xa4>
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f1      	bne.n	8004418 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <pvPortMalloc+0x174>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	429a      	cmp	r2, r3
 800443c:	d04b      	beq.n	80044d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2208      	movs	r2, #8
 8004444:	4413      	add	r3, r2
 8004446:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	2308      	movs	r3, #8
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	429a      	cmp	r2, r3
 800445e:	d91f      	bls.n	80044a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <pvPortMalloc+0xf8>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	613b      	str	r3, [r7, #16]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800449a:	69b8      	ldr	r0, [r7, #24]
 800449c:	f000 f8f8 	bl	8004690 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044a0:	4b1a      	ldr	r3, [pc, #104]	; (800450c <pvPortMalloc+0x17c>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <pvPortMalloc+0x17c>)
 80044ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <pvPortMalloc+0x17c>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4b18      	ldr	r3, [pc, #96]	; (8004514 <pvPortMalloc+0x184>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d203      	bcs.n	80044c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <pvPortMalloc+0x17c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a15      	ldr	r2, [pc, #84]	; (8004514 <pvPortMalloc+0x184>)
 80044c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <pvPortMalloc+0x178>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044d6:	f7ff faa5 	bl	8003a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <pvPortMalloc+0x16a>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <pvPortMalloc+0x168>
	return pvReturn;
 80044fa:	69fb      	ldr	r3, [r7, #28]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3728      	adds	r7, #40	; 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20001264 	.word	0x20001264
 8004508:	20001270 	.word	0x20001270
 800450c:	20001268 	.word	0x20001268
 8004510:	2000125c 	.word	0x2000125c
 8004514:	2000126c 	.word	0x2000126c

08004518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d048      	beq.n	80045bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800452a:	2308      	movs	r3, #8
 800452c:	425b      	negs	r3, r3
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <vPortFree+0xac>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <vPortFree+0x44>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60fb      	str	r3, [r7, #12]
}
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <vPortFree+0x62>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60bb      	str	r3, [r7, #8]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <vPortFree+0xac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d115      	bne.n	80045bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <vPortFree+0xac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045a0:	f7ff fa32 	bl	8003a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <vPortFree+0xb0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4413      	add	r3, r2
 80045ae:	4a06      	ldr	r2, [pc, #24]	; (80045c8 <vPortFree+0xb0>)
 80045b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045b2:	6938      	ldr	r0, [r7, #16]
 80045b4:	f000 f86c 	bl	8004690 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045b8:	f7ff fa34 	bl	8003a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045bc:	bf00      	nop
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20001270 	.word	0x20001270
 80045c8:	20001268 	.word	0x20001268

080045cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <prvHeapInit+0xac>)
 80045da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3307      	adds	r3, #7
 80045ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <prvHeapInit+0xac>)
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <prvHeapInit+0xb0>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800460a:	4b1c      	ldr	r3, [pc, #112]	; (800467c <prvHeapInit+0xb0>)
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4413      	add	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004618:	2208      	movs	r2, #8
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0307 	bic.w	r3, r3, #7
 8004626:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <prvHeapInit+0xb4>)
 800462c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <prvHeapInit+0xb4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <prvHeapInit+0xb4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <prvHeapInit+0xb4>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <prvHeapInit+0xb8>)
 800465a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <prvHeapInit+0xbc>)
 8004662:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <prvHeapInit+0xc0>)
 8004666:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800466a:	601a      	str	r2, [r3, #0]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	2000065c 	.word	0x2000065c
 800467c:	2000125c 	.word	0x2000125c
 8004680:	20001264 	.word	0x20001264
 8004684:	2000126c 	.word	0x2000126c
 8004688:	20001268 	.word	0x20001268
 800468c:	20001270 	.word	0x20001270

08004690 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <prvInsertBlockIntoFreeList+0xa8>)
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e002      	b.n	80046a4 <prvInsertBlockIntoFreeList+0x14>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d8f7      	bhi.n	800469e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d108      	bne.n	80046d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	441a      	add	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	441a      	add	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d118      	bne.n	8004718 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <prvInsertBlockIntoFreeList+0xac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d00d      	beq.n	800470e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e008      	b.n	8004720 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <prvInsertBlockIntoFreeList+0xac>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e003      	b.n	8004720 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d002      	beq.n	800472e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	2000125c 	.word	0x2000125c
 800473c:	20001264 	.word	0x20001264

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	2600      	movs	r6, #0
 8004744:	4d0c      	ldr	r5, [pc, #48]	; (8004778 <__libc_init_array+0x38>)
 8004746:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	f000 f8e2 	bl	8004918 <_init>
 8004754:	2600      	movs	r6, #0
 8004756:	4d0a      	ldr	r5, [pc, #40]	; (8004780 <__libc_init_array+0x40>)
 8004758:	4c0a      	ldr	r4, [pc, #40]	; (8004784 <__libc_init_array+0x44>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	080049ec 	.word	0x080049ec
 800477c:	080049ec 	.word	0x080049ec
 8004780:	080049ec 	.word	0x080049ec
 8004784:	080049f0 	.word	0x080049f0

08004788 <__retarget_lock_acquire_recursive>:
 8004788:	4770      	bx	lr

0800478a <__retarget_lock_release_recursive>:
 800478a:	4770      	bx	lr

0800478c <memset>:
 800478c:	4603      	mov	r3, r0
 800478e:	4402      	add	r2, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <cleanup_glue>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	460c      	mov	r4, r1
 80047a0:	6809      	ldr	r1, [r1, #0]
 80047a2:	4605      	mov	r5, r0
 80047a4:	b109      	cbz	r1, 80047aa <cleanup_glue+0xe>
 80047a6:	f7ff fff9 	bl	800479c <cleanup_glue>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4628      	mov	r0, r5
 80047ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b2:	f000 b869 	b.w	8004888 <_free_r>
	...

080047b8 <_reclaim_reent>:
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <_reclaim_reent+0xb4>)
 80047ba:	b570      	push	{r4, r5, r6, lr}
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4604      	mov	r4, r0
 80047c0:	4283      	cmp	r3, r0
 80047c2:	d051      	beq.n	8004868 <_reclaim_reent+0xb0>
 80047c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047c6:	b143      	cbz	r3, 80047da <_reclaim_reent+0x22>
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d14a      	bne.n	8004864 <_reclaim_reent+0xac>
 80047ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	b111      	cbz	r1, 80047da <_reclaim_reent+0x22>
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 f857 	bl	8004888 <_free_r>
 80047da:	6961      	ldr	r1, [r4, #20]
 80047dc:	b111      	cbz	r1, 80047e4 <_reclaim_reent+0x2c>
 80047de:	4620      	mov	r0, r4
 80047e0:	f000 f852 	bl	8004888 <_free_r>
 80047e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047e6:	b111      	cbz	r1, 80047ee <_reclaim_reent+0x36>
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 f84d 	bl	8004888 <_free_r>
 80047ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047f0:	b111      	cbz	r1, 80047f8 <_reclaim_reent+0x40>
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 f848 	bl	8004888 <_free_r>
 80047f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80047fa:	b111      	cbz	r1, 8004802 <_reclaim_reent+0x4a>
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 f843 	bl	8004888 <_free_r>
 8004802:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004804:	b111      	cbz	r1, 800480c <_reclaim_reent+0x54>
 8004806:	4620      	mov	r0, r4
 8004808:	f000 f83e 	bl	8004888 <_free_r>
 800480c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800480e:	b111      	cbz	r1, 8004816 <_reclaim_reent+0x5e>
 8004810:	4620      	mov	r0, r4
 8004812:	f000 f839 	bl	8004888 <_free_r>
 8004816:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004818:	b111      	cbz	r1, 8004820 <_reclaim_reent+0x68>
 800481a:	4620      	mov	r0, r4
 800481c:	f000 f834 	bl	8004888 <_free_r>
 8004820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004822:	b111      	cbz	r1, 800482a <_reclaim_reent+0x72>
 8004824:	4620      	mov	r0, r4
 8004826:	f000 f82f 	bl	8004888 <_free_r>
 800482a:	69a3      	ldr	r3, [r4, #24]
 800482c:	b1e3      	cbz	r3, 8004868 <_reclaim_reent+0xb0>
 800482e:	4620      	mov	r0, r4
 8004830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004832:	4798      	blx	r3
 8004834:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004836:	b1b9      	cbz	r1, 8004868 <_reclaim_reent+0xb0>
 8004838:	4620      	mov	r0, r4
 800483a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800483e:	f7ff bfad 	b.w	800479c <cleanup_glue>
 8004842:	5949      	ldr	r1, [r1, r5]
 8004844:	b941      	cbnz	r1, 8004858 <_reclaim_reent+0xa0>
 8004846:	3504      	adds	r5, #4
 8004848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800484a:	2d80      	cmp	r5, #128	; 0x80
 800484c:	68d9      	ldr	r1, [r3, #12]
 800484e:	d1f8      	bne.n	8004842 <_reclaim_reent+0x8a>
 8004850:	4620      	mov	r0, r4
 8004852:	f000 f819 	bl	8004888 <_free_r>
 8004856:	e7ba      	b.n	80047ce <_reclaim_reent+0x16>
 8004858:	680e      	ldr	r6, [r1, #0]
 800485a:	4620      	mov	r0, r4
 800485c:	f000 f814 	bl	8004888 <_free_r>
 8004860:	4631      	mov	r1, r6
 8004862:	e7ef      	b.n	8004844 <_reclaim_reent+0x8c>
 8004864:	2500      	movs	r5, #0
 8004866:	e7ef      	b.n	8004848 <_reclaim_reent+0x90>
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	bf00      	nop
 800486c:	20000078 	.word	0x20000078

08004870 <__malloc_lock>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__malloc_lock+0x8>)
 8004872:	f7ff bf89 	b.w	8004788 <__retarget_lock_acquire_recursive>
 8004876:	bf00      	nop
 8004878:	20001274 	.word	0x20001274

0800487c <__malloc_unlock>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__malloc_unlock+0x8>)
 800487e:	f7ff bf84 	b.w	800478a <__retarget_lock_release_recursive>
 8004882:	bf00      	nop
 8004884:	20001274 	.word	0x20001274

08004888 <_free_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4605      	mov	r5, r0
 800488c:	2900      	cmp	r1, #0
 800488e:	d040      	beq.n	8004912 <_free_r+0x8a>
 8004890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004894:	1f0c      	subs	r4, r1, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfb8      	it	lt
 800489a:	18e4      	addlt	r4, r4, r3
 800489c:	f7ff ffe8 	bl	8004870 <__malloc_lock>
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <_free_r+0x8c>)
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	b933      	cbnz	r3, 80048b4 <_free_r+0x2c>
 80048a6:	6063      	str	r3, [r4, #4]
 80048a8:	6014      	str	r4, [r2, #0]
 80048aa:	4628      	mov	r0, r5
 80048ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048b0:	f7ff bfe4 	b.w	800487c <__malloc_unlock>
 80048b4:	42a3      	cmp	r3, r4
 80048b6:	d908      	bls.n	80048ca <_free_r+0x42>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	1821      	adds	r1, r4, r0
 80048bc:	428b      	cmp	r3, r1
 80048be:	bf01      	itttt	eq
 80048c0:	6819      	ldreq	r1, [r3, #0]
 80048c2:	685b      	ldreq	r3, [r3, #4]
 80048c4:	1809      	addeq	r1, r1, r0
 80048c6:	6021      	streq	r1, [r4, #0]
 80048c8:	e7ed      	b.n	80048a6 <_free_r+0x1e>
 80048ca:	461a      	mov	r2, r3
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b10b      	cbz	r3, 80048d4 <_free_r+0x4c>
 80048d0:	42a3      	cmp	r3, r4
 80048d2:	d9fa      	bls.n	80048ca <_free_r+0x42>
 80048d4:	6811      	ldr	r1, [r2, #0]
 80048d6:	1850      	adds	r0, r2, r1
 80048d8:	42a0      	cmp	r0, r4
 80048da:	d10b      	bne.n	80048f4 <_free_r+0x6c>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	4401      	add	r1, r0
 80048e0:	1850      	adds	r0, r2, r1
 80048e2:	4283      	cmp	r3, r0
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	d1e0      	bne.n	80048aa <_free_r+0x22>
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4401      	add	r1, r0
 80048ee:	6011      	str	r1, [r2, #0]
 80048f0:	6053      	str	r3, [r2, #4]
 80048f2:	e7da      	b.n	80048aa <_free_r+0x22>
 80048f4:	d902      	bls.n	80048fc <_free_r+0x74>
 80048f6:	230c      	movs	r3, #12
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	e7d6      	b.n	80048aa <_free_r+0x22>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	1821      	adds	r1, r4, r0
 8004900:	428b      	cmp	r3, r1
 8004902:	bf01      	itttt	eq
 8004904:	6819      	ldreq	r1, [r3, #0]
 8004906:	685b      	ldreq	r3, [r3, #4]
 8004908:	1809      	addeq	r1, r1, r0
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	6063      	str	r3, [r4, #4]
 800490e:	6054      	str	r4, [r2, #4]
 8004910:	e7cb      	b.n	80048aa <_free_r+0x22>
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20001278 	.word	0x20001278

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
