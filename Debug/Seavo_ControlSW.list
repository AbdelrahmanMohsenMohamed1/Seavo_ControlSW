
Seavo_ControlSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b34  08006b34  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006b34  08006b34  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b34  08006b34  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08006b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001394  200000f0  08006c2c  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001484  08006c2c  00021484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a25  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000340a  00000000  00000000  00034b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00037f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e20  00000000  00000000  000391d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199d9  00000000  00000000  00039ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142b5  00000000  00000000  000539c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094d8a  00000000  00000000  00067c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000506c  00000000  00000000  000fca08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00101a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000f0 	.word	0x200000f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ac0 	.word	0x08006ac0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000f4 	.word	0x200000f4
 800014c:	08006ac0 	.word	0x08006ac0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <__aeabi_frsub>:
 800097c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000980:	e002      	b.n	8000988 <__addsf3>
 8000982:	bf00      	nop

08000984 <__aeabi_fsub>:
 8000984:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000988 <__addsf3>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	bf1f      	itttt	ne
 800098c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000990:	ea92 0f03 	teqne	r2, r3
 8000994:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000998:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800099c:	d06a      	beq.n	8000a74 <__addsf3+0xec>
 800099e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009a6:	bfc1      	itttt	gt
 80009a8:	18d2      	addgt	r2, r2, r3
 80009aa:	4041      	eorgt	r1, r0
 80009ac:	4048      	eorgt	r0, r1
 80009ae:	4041      	eorgt	r1, r0
 80009b0:	bfb8      	it	lt
 80009b2:	425b      	neglt	r3, r3
 80009b4:	2b19      	cmp	r3, #25
 80009b6:	bf88      	it	hi
 80009b8:	4770      	bxhi	lr
 80009ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4249      	negne	r1, r1
 80009da:	ea92 0f03 	teq	r2, r3
 80009de:	d03f      	beq.n	8000a60 <__addsf3+0xd8>
 80009e0:	f1a2 0201 	sub.w	r2, r2, #1
 80009e4:	fa41 fc03 	asr.w	ip, r1, r3
 80009e8:	eb10 000c 	adds.w	r0, r0, ip
 80009ec:	f1c3 0320 	rsb	r3, r3, #32
 80009f0:	fa01 f103 	lsl.w	r1, r1, r3
 80009f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009f8:	d502      	bpl.n	8000a00 <__addsf3+0x78>
 80009fa:	4249      	negs	r1, r1
 80009fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a04:	d313      	bcc.n	8000a2e <__addsf3+0xa6>
 8000a06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a0a:	d306      	bcc.n	8000a1a <__addsf3+0x92>
 8000a0c:	0840      	lsrs	r0, r0, #1
 8000a0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a12:	f102 0201 	add.w	r2, r2, #1
 8000a16:	2afe      	cmp	r2, #254	; 0xfe
 8000a18:	d251      	bcs.n	8000abe <__addsf3+0x136>
 8000a1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a22:	bf08      	it	eq
 8000a24:	f020 0001 	biceq.w	r0, r0, #1
 8000a28:	ea40 0003 	orr.w	r0, r0, r3
 8000a2c:	4770      	bx	lr
 8000a2e:	0049      	lsls	r1, r1, #1
 8000a30:	eb40 0000 	adc.w	r0, r0, r0
 8000a34:	3a01      	subs	r2, #1
 8000a36:	bf28      	it	cs
 8000a38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a3c:	d2ed      	bcs.n	8000a1a <__addsf3+0x92>
 8000a3e:	fab0 fc80 	clz	ip, r0
 8000a42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a46:	ebb2 020c 	subs.w	r2, r2, ip
 8000a4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a4e:	bfaa      	itet	ge
 8000a50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a54:	4252      	neglt	r2, r2
 8000a56:	4318      	orrge	r0, r3
 8000a58:	bfbc      	itt	lt
 8000a5a:	40d0      	lsrlt	r0, r2
 8000a5c:	4318      	orrlt	r0, r3
 8000a5e:	4770      	bx	lr
 8000a60:	f092 0f00 	teq	r2, #0
 8000a64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a68:	bf06      	itte	eq
 8000a6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a6e:	3201      	addeq	r2, #1
 8000a70:	3b01      	subne	r3, #1
 8000a72:	e7b5      	b.n	80009e0 <__addsf3+0x58>
 8000a74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a7c:	bf18      	it	ne
 8000a7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a82:	d021      	beq.n	8000ac8 <__addsf3+0x140>
 8000a84:	ea92 0f03 	teq	r2, r3
 8000a88:	d004      	beq.n	8000a94 <__addsf3+0x10c>
 8000a8a:	f092 0f00 	teq	r2, #0
 8000a8e:	bf08      	it	eq
 8000a90:	4608      	moveq	r0, r1
 8000a92:	4770      	bx	lr
 8000a94:	ea90 0f01 	teq	r0, r1
 8000a98:	bf1c      	itt	ne
 8000a9a:	2000      	movne	r0, #0
 8000a9c:	4770      	bxne	lr
 8000a9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aa2:	d104      	bne.n	8000aae <__addsf3+0x126>
 8000aa4:	0040      	lsls	r0, r0, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	4770      	bx	lr
 8000aae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ab2:	bf3c      	itt	cc
 8000ab4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bxcc	lr
 8000aba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000abe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	4770      	bx	lr
 8000ac8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000acc:	bf16      	itet	ne
 8000ace:	4608      	movne	r0, r1
 8000ad0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ad4:	4601      	movne	r1, r0
 8000ad6:	0242      	lsls	r2, r0, #9
 8000ad8:	bf06      	itte	eq
 8000ada:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ade:	ea90 0f01 	teqeq	r0, r1
 8000ae2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_ui2f>:
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e004      	b.n	8000af8 <__aeabi_i2f+0x8>
 8000aee:	bf00      	nop

08000af0 <__aeabi_i2f>:
 8000af0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	bf48      	it	mi
 8000af6:	4240      	negmi	r0, r0
 8000af8:	ea5f 0c00 	movs.w	ip, r0
 8000afc:	bf08      	it	eq
 8000afe:	4770      	bxeq	lr
 8000b00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b04:	4601      	mov	r1, r0
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	e01c      	b.n	8000b46 <__aeabi_l2f+0x2a>

08000b0c <__aeabi_ul2f>:
 8000b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b10:	bf08      	it	eq
 8000b12:	4770      	bxeq	lr
 8000b14:	f04f 0300 	mov.w	r3, #0
 8000b18:	e00a      	b.n	8000b30 <__aeabi_l2f+0x14>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_l2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__aeabi_l2f+0x14>
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b30:	ea5f 0c01 	movs.w	ip, r1
 8000b34:	bf02      	ittt	eq
 8000b36:	4684      	moveq	ip, r0
 8000b38:	4601      	moveq	r1, r0
 8000b3a:	2000      	moveq	r0, #0
 8000b3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b40:	bf08      	it	eq
 8000b42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b4a:	fabc f28c 	clz	r2, ip
 8000b4e:	3a08      	subs	r2, #8
 8000b50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b54:	db10      	blt.n	8000b78 <__aeabi_l2f+0x5c>
 8000b56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b68:	fa20 f202 	lsr.w	r2, r0, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f102 0220 	add.w	r2, r2, #32
 8000b7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b88:	fa21 f202 	lsr.w	r2, r1, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_fmul>:
 8000b98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ba6:	ea92 0f0c 	teqne	r2, ip
 8000baa:	ea93 0f0c 	teqne	r3, ip
 8000bae:	d06f      	beq.n	8000c90 <__aeabi_fmul+0xf8>
 8000bb0:	441a      	add	r2, r3
 8000bb2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bb6:	0240      	lsls	r0, r0, #9
 8000bb8:	bf18      	it	ne
 8000bba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bbe:	d01e      	beq.n	8000bfe <__aeabi_fmul+0x66>
 8000bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000bd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bd8:	bf3e      	ittt	cc
 8000bda:	0049      	lslcc	r1, r1, #1
 8000bdc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000be0:	005b      	lslcc	r3, r3, #1
 8000be2:	ea40 0001 	orr.w	r0, r0, r1
 8000be6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bea:	2afd      	cmp	r2, #253	; 0xfd
 8000bec:	d81d      	bhi.n	8000c2a <__aeabi_fmul+0x92>
 8000bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	4770      	bx	lr
 8000bfe:	f090 0f00 	teq	r0, #0
 8000c02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c06:	bf08      	it	eq
 8000c08:	0249      	lsleq	r1, r1, #9
 8000c0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c12:	3a7f      	subs	r2, #127	; 0x7f
 8000c14:	bfc2      	ittt	gt
 8000c16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c1e:	4770      	bxgt	lr
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	3a01      	subs	r2, #1
 8000c2a:	dc5d      	bgt.n	8000ce8 <__aeabi_fmul+0x150>
 8000c2c:	f112 0f19 	cmn.w	r2, #25
 8000c30:	bfdc      	itt	le
 8000c32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c36:	4770      	bxle	lr
 8000c38:	f1c2 0200 	rsb	r2, r2, #0
 8000c3c:	0041      	lsls	r1, r0, #1
 8000c3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c42:	f1c2 0220 	rsb	r2, r2, #32
 8000c46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c4e:	f140 0000 	adc.w	r0, r0, #0
 8000c52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c56:	bf08      	it	eq
 8000c58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c5c:	4770      	bx	lr
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c66:	bf02      	ittt	eq
 8000c68:	0040      	lsleq	r0, r0, #1
 8000c6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c6e:	3a01      	subeq	r2, #1
 8000c70:	d0f9      	beq.n	8000c66 <__aeabi_fmul+0xce>
 8000c72:	ea40 000c 	orr.w	r0, r0, ip
 8000c76:	f093 0f00 	teq	r3, #0
 8000c7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c7e:	bf02      	ittt	eq
 8000c80:	0049      	lsleq	r1, r1, #1
 8000c82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c86:	3b01      	subeq	r3, #1
 8000c88:	d0f9      	beq.n	8000c7e <__aeabi_fmul+0xe6>
 8000c8a:	ea41 010c 	orr.w	r1, r1, ip
 8000c8e:	e78f      	b.n	8000bb0 <__aeabi_fmul+0x18>
 8000c90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	bf18      	it	ne
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d00a      	beq.n	8000cb6 <__aeabi_fmul+0x11e>
 8000ca0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ca4:	bf18      	it	ne
 8000ca6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000caa:	d1d8      	bne.n	8000c5e <__aeabi_fmul+0xc6>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f090 0f00 	teq	r0, #0
 8000cba:	bf17      	itett	ne
 8000cbc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	f091 0f00 	teqne	r1, #0
 8000cc6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cca:	d014      	beq.n	8000cf6 <__aeabi_fmul+0x15e>
 8000ccc:	ea92 0f0c 	teq	r2, ip
 8000cd0:	d101      	bne.n	8000cd6 <__aeabi_fmul+0x13e>
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	d10f      	bne.n	8000cf6 <__aeabi_fmul+0x15e>
 8000cd6:	ea93 0f0c 	teq	r3, ip
 8000cda:	d103      	bne.n	8000ce4 <__aeabi_fmul+0x14c>
 8000cdc:	024b      	lsls	r3, r1, #9
 8000cde:	bf18      	it	ne
 8000ce0:	4608      	movne	r0, r1
 8000ce2:	d108      	bne.n	8000cf6 <__aeabi_fmul+0x15e>
 8000ce4:	ea80 0001 	eor.w	r0, r0, r1
 8000ce8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_fdiv>:
 8000d00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d08:	bf1e      	ittt	ne
 8000d0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d0e:	ea92 0f0c 	teqne	r2, ip
 8000d12:	ea93 0f0c 	teqne	r3, ip
 8000d16:	d069      	beq.n	8000dec <__aeabi_fdiv+0xec>
 8000d18:	eba2 0203 	sub.w	r2, r2, r3
 8000d1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d20:	0249      	lsls	r1, r1, #9
 8000d22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d26:	d037      	beq.n	8000d98 <__aeabi_fdiv+0x98>
 8000d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	bf38      	it	cc
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d46:	428b      	cmp	r3, r1
 8000d48:	bf24      	itt	cs
 8000d4a:	1a5b      	subcs	r3, r3, r1
 8000d4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d54:	bf24      	itt	cs
 8000d56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d62:	bf24      	itt	cs
 8000d64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d70:	bf24      	itt	cs
 8000d72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	bf18      	it	ne
 8000d7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d82:	d1e0      	bne.n	8000d46 <__aeabi_fdiv+0x46>
 8000d84:	2afd      	cmp	r2, #253	; 0xfd
 8000d86:	f63f af50 	bhi.w	8000c2a <__aeabi_fmul+0x92>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d90:	bf08      	it	eq
 8000d92:	f020 0001 	biceq.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da0:	327f      	adds	r2, #127	; 0x7f
 8000da2:	bfc2      	ittt	gt
 8000da4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dac:	4770      	bxgt	lr
 8000dae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	3a01      	subs	r2, #1
 8000db8:	e737      	b.n	8000c2a <__aeabi_fmul+0x92>
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fdiv+0xc2>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fdiv+0xda>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e795      	b.n	8000d18 <__aeabi_fdiv+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	d108      	bne.n	8000e08 <__aeabi_fdiv+0x108>
 8000df6:	0242      	lsls	r2, r0, #9
 8000df8:	f47f af7d 	bne.w	8000cf6 <__aeabi_fmul+0x15e>
 8000dfc:	ea93 0f0c 	teq	r3, ip
 8000e00:	f47f af70 	bne.w	8000ce4 <__aeabi_fmul+0x14c>
 8000e04:	4608      	mov	r0, r1
 8000e06:	e776      	b.n	8000cf6 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	d104      	bne.n	8000e18 <__aeabi_fdiv+0x118>
 8000e0e:	024b      	lsls	r3, r1, #9
 8000e10:	f43f af4c 	beq.w	8000cac <__aeabi_fmul+0x114>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e76e      	b.n	8000cf6 <__aeabi_fmul+0x15e>
 8000e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e1c:	bf18      	it	ne
 8000e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	d1ca      	bne.n	8000dba <__aeabi_fdiv+0xba>
 8000e24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e28:	f47f af5c 	bne.w	8000ce4 <__aeabi_fmul+0x14c>
 8000e2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e30:	f47f af3c 	bne.w	8000cac <__aeabi_fmul+0x114>
 8000e34:	e75f      	b.n	8000cf6 <__aeabi_fmul+0x15e>
 8000e36:	bf00      	nop

08000e38 <__gesf2>:
 8000e38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e3c:	e006      	b.n	8000e4c <__cmpsf2+0x4>
 8000e3e:	bf00      	nop

08000e40 <__lesf2>:
 8000e40:	f04f 0c01 	mov.w	ip, #1
 8000e44:	e002      	b.n	8000e4c <__cmpsf2+0x4>
 8000e46:	bf00      	nop

08000e48 <__cmpsf2>:
 8000e48:	f04f 0c01 	mov.w	ip, #1
 8000e4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e5c:	bf18      	it	ne
 8000e5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e62:	d011      	beq.n	8000e88 <__cmpsf2+0x40>
 8000e64:	b001      	add	sp, #4
 8000e66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e6a:	bf18      	it	ne
 8000e6c:	ea90 0f01 	teqne	r0, r1
 8000e70:	bf58      	it	pl
 8000e72:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e76:	bf88      	it	hi
 8000e78:	17c8      	asrhi	r0, r1, #31
 8000e7a:	bf38      	it	cc
 8000e7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e80:	bf18      	it	ne
 8000e82:	f040 0001 	orrne.w	r0, r0, #1
 8000e86:	4770      	bx	lr
 8000e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e8c:	d102      	bne.n	8000e94 <__cmpsf2+0x4c>
 8000e8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e92:	d105      	bne.n	8000ea0 <__cmpsf2+0x58>
 8000e94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e98:	d1e4      	bne.n	8000e64 <__cmpsf2+0x1c>
 8000e9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e9e:	d0e1      	beq.n	8000e64 <__cmpsf2+0x1c>
 8000ea0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_cfrcmple>:
 8000ea8:	4684      	mov	ip, r0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	4661      	mov	r1, ip
 8000eae:	e7ff      	b.n	8000eb0 <__aeabi_cfcmpeq>

08000eb0 <__aeabi_cfcmpeq>:
 8000eb0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eb2:	f7ff ffc9 	bl	8000e48 <__cmpsf2>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	bf48      	it	mi
 8000eba:	f110 0f00 	cmnmi.w	r0, #0
 8000ebe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ec0 <__aeabi_fcmpeq>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff fff4 	bl	8000eb0 <__aeabi_cfcmpeq>
 8000ec8:	bf0c      	ite	eq
 8000eca:	2001      	moveq	r0, #1
 8000ecc:	2000      	movne	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_fcmplt>:
 8000ed4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed8:	f7ff ffea 	bl	8000eb0 <__aeabi_cfcmpeq>
 8000edc:	bf34      	ite	cc
 8000ede:	2001      	movcc	r0, #1
 8000ee0:	2000      	movcs	r0, #0
 8000ee2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_fcmple>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff ffe0 	bl	8000eb0 <__aeabi_cfcmpeq>
 8000ef0:	bf94      	ite	ls
 8000ef2:	2001      	movls	r0, #1
 8000ef4:	2000      	movhi	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmpge>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffd2 	bl	8000ea8 <__aeabi_cfrcmple>
 8000f04:	bf94      	ite	ls
 8000f06:	2001      	movls	r0, #1
 8000f08:	2000      	movhi	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmpgt>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffc8 	bl	8000ea8 <__aeabi_cfrcmple>
 8000f18:	bf34      	ite	cc
 8000f1a:	2001      	movcc	r0, #1
 8000f1c:	2000      	movcs	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_f2iz>:
 8000f24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f2c:	d30f      	bcc.n	8000f4e <__aeabi_f2iz+0x2a>
 8000f2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x30>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f44:	fa23 f002 	lsr.w	r0, r3, r2
 8000f48:	bf18      	it	ne
 8000f4a:	4240      	negne	r0, r0
 8000f4c:	4770      	bx	lr
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	4770      	bx	lr
 8000f54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f58:	d101      	bne.n	8000f5e <__aeabi_f2iz+0x3a>
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	d105      	bne.n	8000f6a <__aeabi_f2iz+0x46>
 8000f5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f62:	bf08      	it	eq
 8000f64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr

08000f70 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <MX_CAN_Init+0x9c>)
 8000f78:	4a25      	ldr	r2, [pc, #148]	; (8001010 <MX_CAN_Init+0xa0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <MX_CAN_Init+0x9c>)
 8000f7e:	2212      	movs	r2, #18
 8000f80:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_CAN_Init+0x9c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_CAN_Init+0x9c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_CAN_Init+0x9c>)
 8000f90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f94:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_CAN_Init+0x9c>)
 8000f98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f9c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_CAN_Init+0x9c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_CAN_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_CAN_Init+0x9c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_CAN_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_CAN_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_CAN_Init+0x9c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_CAN_Init+0x9c>)
 8000fc4:	f001 fc4a 	bl	800285c <HAL_CAN_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000fce:	f001 f895 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_CAN_Init+0x9c>)
 8001000:	f001 fd27 	bl	8002a52 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000010c 	.word	0x2000010c
 8001010:	40006400 	.word	0x40006400

08001014 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <HAL_CAN_MspInit+0xcc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d151      	bne.n	80010d8 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_CAN_MspInit+0xd0>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <HAL_CAN_MspInit+0xd0>)
 800103a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103e:	61d3      	str	r3, [r2, #28]
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_CAN_MspInit+0xd0>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_CAN_MspInit+0xd0>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <HAL_CAN_MspInit+0xd0>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_CAN_MspInit+0xd0>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4619      	mov	r1, r3
 8001078:	481b      	ldr	r0, [pc, #108]	; (80010e8 <HAL_CAN_MspInit+0xd4>)
 800107a:	f002 fa41 	bl	8003500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4815      	ldr	r0, [pc, #84]	; (80010e8 <HAL_CAN_MspInit+0xd4>)
 8001094:	f002 fa34 	bl	8003500 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2105      	movs	r1, #5
 800109c:	2013      	movs	r0, #19
 800109e:	f002 fa04 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80010a2:	2013      	movs	r0, #19
 80010a4:	f002 fa1d 	bl	80034e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2105      	movs	r1, #5
 80010ac:	2014      	movs	r0, #20
 80010ae:	f002 f9fc 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80010b2:	2014      	movs	r0, #20
 80010b4:	f002 fa15 	bl	80034e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2105      	movs	r1, #5
 80010bc:	2015      	movs	r0, #21
 80010be:	f002 f9f4 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010c2:	2015      	movs	r0, #21
 80010c4:	f002 fa0d 	bl	80034e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2105      	movs	r1, #5
 80010cc:	2016      	movs	r0, #22
 80010ce:	f002 f9ec 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80010d2:	2016      	movs	r0, #22
 80010d4:	f002 fa05 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40006400 	.word	0x40006400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010800 	.word	0x40010800

080010ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a06      	ldr	r2, [pc, #24]	; (8001114 <vApplicationGetIdleTaskMemory+0x28>)
 80010fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <vApplicationGetIdleTaskMemory+0x2c>)
 8001102:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000138 	.word	0x20000138
 8001118:	200001d8 	.word	0x200001d8

0800111c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_FREERTOS_Init+0x30>)
 8001124:	1d3c      	adds	r4, r7, #4
 8001126:	461d      	mov	r5, r3
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fa03 	bl	8005544 <osThreadCreate>
 800113e:	4603      	mov	r3, r0
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <MX_FREERTOS_Init+0x34>)
 8001142:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	08006ae4 	.word	0x08006ae4
 8001150:	20000134 	.word	0x20000134

08001154 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f004 fa3d 	bl	80055dc <osDelay>
 8001162:	e7fb      	b.n	800115c <StartDefaultTask+0x8>

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b45      	ldr	r3, [pc, #276]	; (8001290 <MX_GPIO_Init+0x12c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <MX_GPIO_Init+0x12c>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b42      	ldr	r3, [pc, #264]	; (8001290 <MX_GPIO_Init+0x12c>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001190:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <MX_GPIO_Init+0x12c>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a3e      	ldr	r2, [pc, #248]	; (8001290 <MX_GPIO_Init+0x12c>)
 8001196:	f043 0320 	orr.w	r3, r3, #32
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <MX_GPIO_Init+0x12c>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_GPIO_Init+0x12c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a38      	ldr	r2, [pc, #224]	; (8001290 <MX_GPIO_Init+0x12c>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <MX_GPIO_Init+0x12c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <MX_GPIO_Init+0x12c>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a32      	ldr	r2, [pc, #200]	; (8001290 <MX_GPIO_Init+0x12c>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <MX_GPIO_Init+0x12c>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011de:	482d      	ldr	r0, [pc, #180]	; (8001294 <MX_GPIO_Init+0x130>)
 80011e0:	f002 fb29 	bl	8003836 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2101      	movs	r1, #1
 80011e8:	482b      	ldr	r0, [pc, #172]	; (8001298 <MX_GPIO_Init+0x134>)
 80011ea:	f002 fb24 	bl	8003836 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f240 4103 	movw	r1, #1027	; 0x403
 80011f4:	4829      	ldr	r0, [pc, #164]	; (800129c <MX_GPIO_Init+0x138>)
 80011f6:	f002 fb1e 	bl	8003836 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2302      	movs	r3, #2
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4820      	ldr	r0, [pc, #128]	; (8001294 <MX_GPIO_Init+0x130>)
 8001214:	f002 f974 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800121c:	2311      	movs	r3, #17
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	481a      	ldr	r0, [pc, #104]	; (8001298 <MX_GPIO_Init+0x134>)
 8001230:	f002 f966 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001234:	f248 031e 	movw	r3, #32798	; 0x801e
 8001238:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123e:	2301      	movs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <MX_GPIO_Init+0x134>)
 800124a:	f002 f959 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 800124e:	f240 4303 	movw	r3, #1027	; 0x403
 8001252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2302      	movs	r3, #2
 800125e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_GPIO_Init+0x138>)
 8001268:	f002 f94a 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_3;
 800126c:	f640 0308 	movw	r3, #2056	; 0x808
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_GPIO_Init+0x138>)
 8001282:	f002 f93d 	bl	8003500 <HAL_GPIO_Init>

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	40011000 	.word	0x40011000
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00

080012a0 <int32ToAsciiArray>:
uint8_t Termination[3] = {0xff,0xff,0xff};
int size=0;
uint8_t arr[50];

int int32ToAsciiArray(int32_t number, uint8_t arr[], int maxSize) ;
int int32ToAsciiArray(int32_t number, uint8_t arr[], int maxSize) {
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
	int index = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
	char isNegative = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	76fb      	strb	r3, [r7, #27]

	// Handle negative numbers by converting them to positive and recording the sign
	if (number < 0) {
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da04      	bge.n	80012c4 <int32ToAsciiArray+0x24>
		isNegative = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	76fb      	strb	r3, [r7, #27]
		number = -number;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	425b      	negs	r3, r3
 80012c2:	60fb      	str	r3, [r7, #12]
	}

	// Determine the digits and store them in reverse order
	do {
		if (index < maxSize) {
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	da15      	bge.n	80012f8 <int32ToAsciiArray+0x58>
			arr[index++] = (number % 10) + '0';
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <int32ToAsciiArray+0xe8>)
 80012d0:	fb83 1302 	smull	r1, r3, r3, r2
 80012d4:	1099      	asrs	r1, r3, #2
 80012d6:	17d3      	asrs	r3, r2, #31
 80012d8:	1ac9      	subs	r1, r1, r3
 80012da:	460b      	mov	r3, r1
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	1ad1      	subs	r1, r2, r3
 80012e4:	b2ca      	uxtb	r2, r1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	61f9      	str	r1, [r7, #28]
 80012ec:	4619      	mov	r1, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	440b      	add	r3, r1
 80012f2:	3230      	adds	r2, #48	; 0x30
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
		}
		number /= 10;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <int32ToAsciiArray+0xe8>)
 80012fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001300:	1092      	asrs	r2, r2, #2
 8001302:	17db      	asrs	r3, r3, #31
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	60fb      	str	r3, [r7, #12]
	} while (number > 0);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	dcda      	bgt.n	80012c4 <int32ToAsciiArray+0x24>

	// Add the negative sign if the number was negative
	if (isNegative && index < maxSize) {
 800130e:	7efb      	ldrb	r3, [r7, #27]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <int32ToAsciiArray+0x8c>
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	da07      	bge.n	800132c <int32ToAsciiArray+0x8c>
		arr[index++] = '-';
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	61fa      	str	r2, [r7, #28]
 8001322:	461a      	mov	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4413      	add	r3, r2
 8001328:	222d      	movs	r2, #45	; 0x2d
 800132a:	701a      	strb	r2, [r3, #0]
	}

	// Reverse the array to get the correct order
	for (int i = 0; i < index / 2; ++i) {
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e01c      	b.n	800136c <int32ToAsciiArray+0xcc>
		uint8_t temp = arr[i];
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	74fb      	strb	r3, [r7, #19]
		arr[i] = arr[index - 1 - i];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	461a      	mov	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	441a      	add	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	440b      	add	r3, r1
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	701a      	strb	r2, [r3, #0]
		arr[index - 1 - i] = temp;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	1e5a      	subs	r2, r3, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	461a      	mov	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	4413      	add	r3, r2
 8001362:	7cfa      	ldrb	r2, [r7, #19]
 8001364:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < index / 2; ++i) {
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	0fda      	lsrs	r2, r3, #31
 8001370:	4413      	add	r3, r2
 8001372:	105b      	asrs	r3, r3, #1
 8001374:	461a      	mov	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	4293      	cmp	r3, r2
 800137a:	dbda      	blt.n	8001332 <int32ToAsciiArray+0x92>
	}

	// Return the number of characters stored in the array
	return index;
 800137c:	69fb      	ldr	r3, [r7, #28]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	66666667 	.word	0x66666667

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001392:	f001 fa31 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001396:	f000 f853 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139a:	f7ff fee3 	bl	8001164 <MX_GPIO_Init>
  MX_TIM1_Init();
 800139e:	f000 ffc9 	bl	8002334 <MX_TIM1_Init>
  MX_TIM4_Init();
 80013a2:	f001 f8b5 	bl	8002510 <MX_TIM4_Init>
  MX_TIM3_Init();
 80013a6:	f001 f865 	bl	8002474 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80013aa:	f001 f989 	bl	80026c0 <MX_USART1_UART_Init>
  MX_CAN_Init();
 80013ae:	f7ff fddf 	bl	8000f70 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	System_State = System_OpenSequenceOn;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <main+0x9c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
	xTaskCreate(ShutDowenSequenceFunctio_Task, NULL, 128 , NULL , 4 , NULL);
 80013b8:	2300      	movs	r3, #0
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2304      	movs	r3, #4
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2300      	movs	r3, #0
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	2100      	movs	r1, #0
 80013c6:	4819      	ldr	r0, [pc, #100]	; (800142c <main+0xa0>)
 80013c8:	f004 fa27 	bl	800581a <xTaskCreate>
	xTaskCreate(ControlMainFunction_Task, NULL, 128 , NULL , 2 , NULL);
 80013cc:	2300      	movs	r3, #0
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	2302      	movs	r3, #2
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	2100      	movs	r1, #0
 80013da:	4815      	ldr	r0, [pc, #84]	; (8001430 <main+0xa4>)
 80013dc:	f004 fa1d 	bl	800581a <xTaskCreate>
	//xTaskCreate(SpeedControl_Task, NULL, 100 , NULL , 3 , NULL);
	xTaskCreate(DashboardDisplay_Task, NULL, 128 , NULL , 1 , NULL);
 80013e0:	2300      	movs	r3, #0
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	2100      	movs	r1, #0
 80013ee:	4811      	ldr	r0, [pc, #68]	; (8001434 <main+0xa8>)
 80013f0:	f004 fa13 	bl	800581a <xTaskCreate>

	__HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1 , 500);
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <main+0xac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013fe:	2100      	movs	r1, #0
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <main+0xac>)
 8001402:	f002 ff91 	bl	8004328 <HAL_TIM_PWM_Start>

	HAL_CAN_Start(&hcan);
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <main+0xb0>)
 8001408:	f001 fbec 	bl	8002be4 <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800140c:	2102      	movs	r1, #2
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <main+0xb0>)
 8001410:	f001 fd4d 	bl	8002eae <HAL_CAN_ActivateNotification>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <main+0x92>
	{
		Error_Handler();
 800141a:	f000 fe6f 	bl	80020fc <Error_Handler>
	//HAL_UART_Transmit(&huart1, Display_IntroScreen, sizeof(Display_IntroScreen), HAL_MAX_DELAY);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800141e:	f7ff fe7d 	bl	800111c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001422:	f004 f888 	bl	8005536 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001426:	e7fe      	b.n	8001426 <main+0x9a>
 8001428:	20000453 	.word	0x20000453
 800142c:	080016bd 	.word	0x080016bd
 8001430:	080014cd 	.word	0x080014cd
 8001434:	080018a9 	.word	0x080018a9
 8001438:	200004d4 	.word	0x200004d4
 800143c:	2000010c 	.word	0x2000010c

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b090      	sub	sp, #64	; 0x40
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	2228      	movs	r2, #40	; 0x28
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f005 fa5e 	bl	8006910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2302      	movs	r3, #2
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800147e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4618      	mov	r0, r3
 800148a:	f002 f9ed 	bl	8003868 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001494:	f000 fe32 	bl	80020fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149c:	2302      	movs	r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2102      	movs	r1, #2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fc5a 	bl	8003d6c <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014be:	f000 fe1d 	bl	80020fc <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3740      	adds	r7, #64	; 0x40
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <ControlMainFunction_Task>:

/* USER CODE BEGIN 4 */

void ControlMainFunction_Task(void *argument) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
		//			{
		//				// Reception error
		//				uint8_t Test=1;
		//			}

		switch (System_State) {
 80014d4:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <ControlMainFunction_Task+0x1bc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <ControlMainFunction_Task+0x16>
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d066      	beq.n	80015ae <ControlMainFunction_Task+0xe2>
				}
			}
			break;

		default:
			break;
 80014e0:	e0cd      	b.n	800167e <ControlMainFunction_Task+0x1b2>
			u8_RequestedSpeed = 500;
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <ControlMainFunction_Task+0x1c0>)
 80014e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014e8:	601a      	str	r2, [r3, #0]
			iterator = 1;
 80014ea:	4b69      	ldr	r3, [pc, #420]	; (8001690 <ControlMainFunction_Task+0x1c4>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
			current_speed = 500;
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <ControlMainFunction_Task+0x1c8>)
 80014f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014f6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 80014f8:	4b66      	ldr	r3, [pc, #408]	; (8001694 <ControlMainFunction_Task+0x1c8>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b66      	ldr	r3, [pc, #408]	; (8001698 <ControlMainFunction_Task+0x1cc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
			Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001502:	2108      	movs	r1, #8
 8001504:	4865      	ldr	r0, [pc, #404]	; (800169c <ControlMainFunction_Task+0x1d0>)
 8001506:	f002 f97f 	bl	8003808 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b64      	ldr	r3, [pc, #400]	; (80016a0 <ControlMainFunction_Task+0x1d4>)
 8001510:	701a      	strb	r2, [r3, #0]
			Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001516:	4861      	ldr	r0, [pc, #388]	; (800169c <ControlMainFunction_Task+0x1d0>)
 8001518:	f002 f976 	bl	8003808 <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <ControlMainFunction_Task+0x1d8>)
 8001522:	701a      	strb	r2, [r3, #0]
			if (Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_RESET) {
 8001524:	4b5e      	ldr	r3, [pc, #376]	; (80016a0 <ControlMainFunction_Task+0x1d4>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <ControlMainFunction_Task+0x70>
 800152c:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <ControlMainFunction_Task+0x1d8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <ControlMainFunction_Task+0x70>
				HAL_TIM_Base_Start_IT(&htim3);  // Start timer
 8001534:	485c      	ldr	r0, [pc, #368]	; (80016a8 <ControlMainFunction_Task+0x1dc>)
 8001536:	f002 fe4d 	bl	80041d4 <HAL_TIM_Base_Start_IT>
 800153a:	e007      	b.n	800154c <ControlMainFunction_Task+0x80>
				HAL_TIM_Base_Stop(&htim3);  // Stop and reset timer
 800153c:	485a      	ldr	r0, [pc, #360]	; (80016a8 <ControlMainFunction_Task+0x1dc>)
 800153e:	f002 fe22 	bl	8004186 <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <ControlMainFunction_Task+0x1dc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
			if (u8_TimeOutFlag1 == 1) {
 800154c:	4b57      	ldr	r3, [pc, #348]	; (80016ac <ControlMainFunction_Task+0x1e0>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	f040 8091 	bne.w	8001678 <ControlMainFunction_Task+0x1ac>
				u8_TimeOutFlag1 = 0;
 8001556:	4b55      	ldr	r3, [pc, #340]	; (80016ac <ControlMainFunction_Task+0x1e0>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001562:	4853      	ldr	r0, [pc, #332]	; (80016b0 <ControlMainFunction_Task+0x1e4>)
 8001564:	f002 f967 	bl	8003836 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156e:	4851      	ldr	r0, [pc, #324]	; (80016b4 <ControlMainFunction_Task+0x1e8>)
 8001570:	f002 f961 	bl	8003836 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop(&htim3);
 8001574:	484c      	ldr	r0, [pc, #304]	; (80016a8 <ControlMainFunction_Task+0x1dc>)
 8001576:	f002 fe06 	bl	8004186 <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 800157a:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <ControlMainFunction_Task+0x1dc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
				FristTimeFlag = 1;
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <ControlMainFunction_Task+0x1ec>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
				System_State = System_Operation;
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <ControlMainFunction_Task+0x1bc>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2102      	movs	r1, #2
 8001594:	4846      	ldr	r0, [pc, #280]	; (80016b0 <ControlMainFunction_Task+0x1e4>)
 8001596:	f002 f94e 	bl	8003836 <HAL_GPIO_WritePin>
				vTaskDelay(2000);
 800159a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800159e:	f004 fa81 	bl	8005aa4 <vTaskDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2102      	movs	r1, #2
 80015a6:	4842      	ldr	r0, [pc, #264]	; (80016b0 <ControlMainFunction_Task+0x1e4>)
 80015a8:	f002 f945 	bl	8003836 <HAL_GPIO_WritePin>
			break;
 80015ac:	e064      	b.n	8001678 <ControlMainFunction_Task+0x1ac>
			if (FristTimeFlag) {
 80015ae:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <ControlMainFunction_Task+0x1ec>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <ControlMainFunction_Task+0xf8>
				FristTimeFlag = 0;
 80015b6:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <ControlMainFunction_Task+0x1ec>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
				vTaskDelay(500);
 80015bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c0:	f004 fa70 	bl	8005aa4 <vTaskDelay>
			Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 80015c4:	2108      	movs	r1, #8
 80015c6:	4835      	ldr	r0, [pc, #212]	; (800169c <ControlMainFunction_Task+0x1d0>)
 80015c8:	f002 f91e 	bl	8003808 <HAL_GPIO_ReadPin>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <ControlMainFunction_Task+0x1d4>)
 80015d2:	701a      	strb	r2, [r3, #0]
			Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80015d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d8:	4830      	ldr	r0, [pc, #192]	; (800169c <ControlMainFunction_Task+0x1d0>)
 80015da:	f002 f915 	bl	8003808 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <ControlMainFunction_Task+0x1d8>)
 80015e4:	701a      	strb	r2, [r3, #0]
			if (Switch1_State == GPIO_PIN_SET && Switch2_State == GPIO_PIN_RESET) {
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <ControlMainFunction_Task+0x1d4>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d120      	bne.n	8001630 <ControlMainFunction_Task+0x164>
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <ControlMainFunction_Task+0x1d8>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d11c      	bne.n	8001630 <ControlMainFunction_Task+0x164>
					Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80015f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fa:	4828      	ldr	r0, [pc, #160]	; (800169c <ControlMainFunction_Task+0x1d0>)
 80015fc:	f002 f904 	bl	8003808 <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <ControlMainFunction_Task+0x1d8>)
 8001606:	701a      	strb	r2, [r3, #0]
				} while (Switch2_State == GPIO_PIN_RESET);
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <ControlMainFunction_Task+0x1d8>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f2      	beq.n	80015f6 <ControlMainFunction_Task+0x12a>
				u8_RequestedSpeed += 90;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <ControlMainFunction_Task+0x1c0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	335a      	adds	r3, #90	; 0x5a
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <ControlMainFunction_Task+0x1c0>)
 8001618:	6013      	str	r3, [r2, #0]
				if (u8_RequestedSpeed > 950) {
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <ControlMainFunction_Task+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001622:	4293      	cmp	r3, r2
 8001624:	dd27      	ble.n	8001676 <ControlMainFunction_Task+0x1aa>
					u8_RequestedSpeed = 950;
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <ControlMainFunction_Task+0x1c0>)
 8001628:	f240 32b6 	movw	r2, #950	; 0x3b6
 800162c:	601a      	str	r2, [r3, #0]
				if (u8_RequestedSpeed > 950) {
 800162e:	e022      	b.n	8001676 <ControlMainFunction_Task+0x1aa>
			} else if (Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_SET) {
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <ControlMainFunction_Task+0x1d4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d121      	bne.n	800167c <ControlMainFunction_Task+0x1b0>
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <ControlMainFunction_Task+0x1d8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d11d      	bne.n	800167c <ControlMainFunction_Task+0x1b0>
					Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001640:	2108      	movs	r1, #8
 8001642:	4816      	ldr	r0, [pc, #88]	; (800169c <ControlMainFunction_Task+0x1d0>)
 8001644:	f002 f8e0 	bl	8003808 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <ControlMainFunction_Task+0x1d4>)
 800164e:	701a      	strb	r2, [r3, #0]
				} while (Switch1_State == GPIO_PIN_RESET);
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <ControlMainFunction_Task+0x1d4>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f3      	beq.n	8001640 <ControlMainFunction_Task+0x174>
				u8_RequestedSpeed -= 90;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <ControlMainFunction_Task+0x1c0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b5a      	subs	r3, #90	; 0x5a
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <ControlMainFunction_Task+0x1c0>)
 8001660:	6013      	str	r3, [r2, #0]
				if (u8_RequestedSpeed < 500) {
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <ControlMainFunction_Task+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166a:	da07      	bge.n	800167c <ControlMainFunction_Task+0x1b0>
					u8_RequestedSpeed = 500;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <ControlMainFunction_Task+0x1c0>)
 800166e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001672:	601a      	str	r2, [r3, #0]
			break;
 8001674:	e002      	b.n	800167c <ControlMainFunction_Task+0x1b0>
 8001676:	e001      	b.n	800167c <ControlMainFunction_Task+0x1b0>
			break;
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <ControlMainFunction_Task+0x1b2>
			break;
 800167c:	bf00      	nop
		}
		vTaskDelay(30);
 800167e:	201e      	movs	r0, #30
 8001680:	f004 fa10 	bl	8005aa4 <vTaskDelay>
		switch (System_State) {
 8001684:	e726      	b.n	80014d4 <ControlMainFunction_Task+0x8>
 8001686:	bf00      	nop
 8001688:	20000453 	.word	0x20000453
 800168c:	20000004 	.word	0x20000004
 8001690:	2000044f 	.word	0x2000044f
 8001694:	20000008 	.word	0x20000008
 8001698:	200004d4 	.word	0x200004d4
 800169c:	40010800 	.word	0x40010800
 80016a0:	2000044d 	.word	0x2000044d
 80016a4:	2000044e 	.word	0x2000044e
 80016a8:	2000051c 	.word	0x2000051c
 80016ac:	2000044b 	.word	0x2000044b
 80016b0:	40010c00 	.word	0x40010c00
 80016b4:	40011000 	.word	0x40011000
 80016b8:	2000044a 	.word	0x2000044a

080016bc <ShutDowenSequenceFunctio_Task>:
	}
}



void ShutDowenSequenceFunctio_Task(void *argument) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	while (1) {
		if (System_State == System_Operation) {
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <ShutDowenSequenceFunctio_Task+0x1b4>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 808a 	bne.w	80017e2 <ShutDowenSequenceFunctio_Task+0x126>
			RighProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80016ce:	2108      	movs	r1, #8
 80016d0:	4868      	ldr	r0, [pc, #416]	; (8001874 <ShutDowenSequenceFunctio_Task+0x1b8>)
 80016d2:	f002 f899 	bl	8003808 <HAL_GPIO_ReadPin>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <ShutDowenSequenceFunctio_Task+0x1bc>)
 80016dc:	701a      	strb	r2, [r3, #0]
			LeftProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 80016de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016e2:	4864      	ldr	r0, [pc, #400]	; (8001874 <ShutDowenSequenceFunctio_Task+0x1b8>)
 80016e4:	f002 f890 	bl	8003808 <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b63      	ldr	r3, [pc, #396]	; (800187c <ShutDowenSequenceFunctio_Task+0x1c0>)
 80016ee:	701a      	strb	r2, [r3, #0]

			// Check proximity sensors
			//if (RighProximity_State != GPIO_PIN_RESET || LeftProximity_State != GPIO_PIN_RESET)
			if (RighProximity_State != GPIO_PIN_RESET ) {
 80016f0:	4b61      	ldr	r3, [pc, #388]	; (8001878 <ShutDowenSequenceFunctio_Task+0x1bc>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00f      	beq.n	8001718 <ShutDowenSequenceFunctio_Task+0x5c>
				iterator = 0;
 80016f8:	4b61      	ldr	r3, [pc, #388]	; (8001880 <ShutDowenSequenceFunctio_Task+0x1c4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
				current_speed = 500;
 80016fe:	4b61      	ldr	r3, [pc, #388]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 8001700:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001704:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 8001706:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001710:	2100      	movs	r1, #0
 8001712:	485d      	ldr	r0, [pc, #372]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 8001714:	f002 feaa 	bl	800446c <HAL_TIM_PWM_Stop>
			}

			// Check switches
			Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001718:	2108      	movs	r1, #8
 800171a:	485c      	ldr	r0, [pc, #368]	; (800188c <ShutDowenSequenceFunctio_Task+0x1d0>)
 800171c:	f002 f874 	bl	8003808 <HAL_GPIO_ReadPin>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <ShutDowenSequenceFunctio_Task+0x1d4>)
 8001726:	701a      	strb	r2, [r3, #0]
			Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172c:	4857      	ldr	r0, [pc, #348]	; (800188c <ShutDowenSequenceFunctio_Task+0x1d0>)
 800172e:	f002 f86b 	bl	8003808 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b57      	ldr	r3, [pc, #348]	; (8001894 <ShutDowenSequenceFunctio_Task+0x1d8>)
 8001738:	701a      	strb	r2, [r3, #0]

			if (Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_RESET) {
 800173a:	4b55      	ldr	r3, [pc, #340]	; (8001890 <ShutDowenSequenceFunctio_Task+0x1d4>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d107      	bne.n	8001752 <ShutDowenSequenceFunctio_Task+0x96>
 8001742:	4b54      	ldr	r3, [pc, #336]	; (8001894 <ShutDowenSequenceFunctio_Task+0x1d8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <ShutDowenSequenceFunctio_Task+0x96>
				//				do{
				//					Switch1_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
				//					Switch2_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
				//				}while(Switch1_State == GPIO_PIN_RESET && Switch2_State == GPIO_PIN_RESET);
				HAL_TIM_Base_Start_IT(&htim3);  // Start timer
 800174a:	4853      	ldr	r0, [pc, #332]	; (8001898 <ShutDowenSequenceFunctio_Task+0x1dc>)
 800174c:	f002 fd42 	bl	80041d4 <HAL_TIM_Base_Start_IT>
 8001750:	e007      	b.n	8001762 <ShutDowenSequenceFunctio_Task+0xa6>
			} else {
				HAL_TIM_Base_Stop(&htim3);  // Stop and reset timer
 8001752:	4851      	ldr	r0, [pc, #324]	; (8001898 <ShutDowenSequenceFunctio_Task+0x1dc>)
 8001754:	f002 fd17 	bl	8004186 <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 8001758:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <ShutDowenSequenceFunctio_Task+0x1dc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if (u8_TimeOutFlag1 == 2) {
 8001762:	4b4e      	ldr	r3, [pc, #312]	; (800189c <ShutDowenSequenceFunctio_Task+0x1e0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d13b      	bne.n	80017e2 <ShutDowenSequenceFunctio_Task+0x126>
				u8_TimeOutFlag1 = 0;
 800176a:	4b4c      	ldr	r3, [pc, #304]	; (800189c <ShutDowenSequenceFunctio_Task+0x1e0>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001776:	484a      	ldr	r0, [pc, #296]	; (80018a0 <ShutDowenSequenceFunctio_Task+0x1e4>)
 8001778:	f002 f85d 	bl	8003836 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001782:	483c      	ldr	r0, [pc, #240]	; (8001874 <ShutDowenSequenceFunctio_Task+0x1b8>)
 8001784:	f002 f857 	bl	8003836 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop(&htim3);
 8001788:	4843      	ldr	r0, [pc, #268]	; (8001898 <ShutDowenSequenceFunctio_Task+0x1dc>)
 800178a:	f002 fcfc 	bl	8004186 <HAL_TIM_Base_Stop>
				__HAL_TIM_SET_COUNTER(&htim3, 500);
 800178e:	4b42      	ldr	r3, [pc, #264]	; (8001898 <ShutDowenSequenceFunctio_Task+0x1dc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
				u8_RequestedSpeed = 500;
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <ShutDowenSequenceFunctio_Task+0x1e8>)
 800179a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800179e:	601a      	str	r2, [r3, #0]
				iterator = 1;
 80017a0:	4b37      	ldr	r3, [pc, #220]	; (8001880 <ShutDowenSequenceFunctio_Task+0x1c4>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
				current_speed = 500;
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 80017a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017ac:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b35      	ldr	r3, [pc, #212]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80017b8:	2100      	movs	r1, #0
 80017ba:	4833      	ldr	r0, [pc, #204]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 80017bc:	f002 fe56 	bl	800446c <HAL_TIM_PWM_Stop>
				System_State = System_OpenSequenceOn;
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <ShutDowenSequenceFunctio_Task+0x1b4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2102      	movs	r1, #2
 80017ca:	482a      	ldr	r0, [pc, #168]	; (8001874 <ShutDowenSequenceFunctio_Task+0x1b8>)
 80017cc:	f002 f833 	bl	8003836 <HAL_GPIO_WritePin>
				vTaskDelay(5000);
 80017d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80017d4:	f004 f966 	bl	8005aa4 <vTaskDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2102      	movs	r1, #2
 80017dc:	4825      	ldr	r0, [pc, #148]	; (8001874 <ShutDowenSequenceFunctio_Task+0x1b8>)
 80017de:	f002 f82a 	bl	8003836 <HAL_GPIO_WritePin>
			}
		}
		// Read the proximity states
		RighProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80017e2:	2108      	movs	r1, #8
 80017e4:	4823      	ldr	r0, [pc, #140]	; (8001874 <ShutDowenSequenceFunctio_Task+0x1b8>)
 80017e6:	f002 f80f 	bl	8003808 <HAL_GPIO_ReadPin>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <ShutDowenSequenceFunctio_Task+0x1bc>)
 80017f0:	701a      	strb	r2, [r3, #0]
		LeftProximity_State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 80017f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f6:	481f      	ldr	r0, [pc, #124]	; (8001874 <ShutDowenSequenceFunctio_Task+0x1b8>)
 80017f8:	f002 f806 	bl	8003808 <HAL_GPIO_ReadPin>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <ShutDowenSequenceFunctio_Task+0x1c0>)
 8001802:	701a      	strb	r2, [r3, #0]

		// Check if the system is in operation mode and both proximity sensors are not triggered
		//if (System_State == System_Operation && RighProximity_State == GPIO_PIN_RESET && LeftProximity_State == GPIO_PIN_RESET)
		if (System_State == System_Operation && RighProximity_State == GPIO_PIN_RESET) {
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <ShutDowenSequenceFunctio_Task+0x1b4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d128      	bne.n	800185e <ShutDowenSequenceFunctio_Task+0x1a2>
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <ShutDowenSequenceFunctio_Task+0x1bc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d124      	bne.n	800185e <ShutDowenSequenceFunctio_Task+0x1a2>
			// Start the PWM signal
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001814:	2100      	movs	r1, #0
 8001816:	481c      	ldr	r0, [pc, #112]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 8001818:	f002 fd86 	bl	8004328 <HAL_TIM_PWM_Start>

			// Adjust the current speed to match the requested speed
			if (u8_RequestedSpeed > current_speed) {
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <ShutDowenSequenceFunctio_Task+0x1e8>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	dd05      	ble.n	8001834 <ShutDowenSequenceFunctio_Task+0x178>
				current_speed++; // Increment current speed
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00a      	b.n	800184a <ShutDowenSequenceFunctio_Task+0x18e>
			} else if (u8_RequestedSpeed < current_speed) {
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <ShutDowenSequenceFunctio_Task+0x1e8>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	da04      	bge.n	800184a <ShutDowenSequenceFunctio_Task+0x18e>
				current_speed--; // Decrement current speed
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 8001848:	6013      	str	r3, [r2, #0]
			}

			// Set the new compare value to adjust the duty cycle
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, current_speed);
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <ShutDowenSequenceFunctio_Task+0x1c8>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	635a      	str	r2, [r3, #52]	; 0x34



			// Restart the PWM with the new compare value
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001854:	2100      	movs	r1, #0
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 8001858:	f002 fd66 	bl	8004328 <HAL_TIM_PWM_Start>
 800185c:	e003      	b.n	8001866 <ShutDowenSequenceFunctio_Task+0x1aa>
		} else {
			// If the system is not in operation or proximity sensors are triggered, stop the PWM
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800185e:	2100      	movs	r1, #0
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <ShutDowenSequenceFunctio_Task+0x1cc>)
 8001862:	f002 fe03 	bl	800446c <HAL_TIM_PWM_Stop>
		}

		// Add a delay to control the speed adjustment rate

		vTaskDelay(30);
 8001866:	201e      	movs	r0, #30
 8001868:	f004 f91c 	bl	8005aa4 <vTaskDelay>
		if (System_State == System_Operation) {
 800186c:	e72a      	b.n	80016c4 <ShutDowenSequenceFunctio_Task+0x8>
 800186e:	bf00      	nop
 8001870:	20000453 	.word	0x20000453
 8001874:	40010c00 	.word	0x40010c00
 8001878:	20000450 	.word	0x20000450
 800187c:	20000451 	.word	0x20000451
 8001880:	2000044f 	.word	0x2000044f
 8001884:	20000008 	.word	0x20000008
 8001888:	200004d4 	.word	0x200004d4
 800188c:	40010800 	.word	0x40010800
 8001890:	2000044d 	.word	0x2000044d
 8001894:	2000044e 	.word	0x2000044e
 8001898:	2000051c 	.word	0x2000051c
 800189c:	2000044b 	.word	0x2000044b
 80018a0:	40011000 	.word	0x40011000
 80018a4:	20000004 	.word	0x20000004

080018a8 <DashboardDisplay_Task>:
//		}
//		vTaskDelay(500);
//	}
//}
void DashboardDisplay_Task(void *argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch(System_State)
 80018b0:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <DashboardDisplay_Task+0x178>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <DashboardDisplay_Task+0x16>
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d010      	beq.n	80018de <DashboardDisplay_Task+0x36>
			}
			break;



			default: break;
 80018bc:	e0c9      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
			if (current_display != Display_Black)
 80018be:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	f000 80c4 	beq.w	8001a50 <DashboardDisplay_Task+0x1a8>
				current_display = Display_Black;
 80018c8:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, Display_BlackScreen, 9, 1000);
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	2209      	movs	r2, #9
 80018d4:	4954      	ldr	r1, [pc, #336]	; (8001a28 <DashboardDisplay_Task+0x180>)
 80018d6:	4855      	ldr	r0, [pc, #340]	; (8001a2c <DashboardDisplay_Task+0x184>)
 80018d8:	f003 fc97 	bl	800520a <HAL_UART_Transmit>
			break;
 80018dc:	e0b8      	b.n	8001a50 <DashboardDisplay_Task+0x1a8>
			if (current_display == Display_Black) // Check if we are transitioning from OpenSequence
 80018de:	4b51      	ldr	r3, [pc, #324]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10d      	bne.n	8001902 <DashboardDisplay_Task+0x5a>
				current_display = Display_Intro;
 80018e6:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80018e8:	2202      	movs	r2, #2
 80018ea:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, Display_IntroScreen, 9, 1000);
 80018ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f0:	2209      	movs	r2, #9
 80018f2:	494f      	ldr	r1, [pc, #316]	; (8001a30 <DashboardDisplay_Task+0x188>)
 80018f4:	484d      	ldr	r0, [pc, #308]	; (8001a2c <DashboardDisplay_Task+0x184>)
 80018f6:	f003 fc88 	bl	800520a <HAL_UART_Transmit>
				vTaskDelay(8500); // Display intro for 3 seconds
 80018fa:	f242 1034 	movw	r0, #8500	; 0x2134
 80018fe:	f004 f8d1 	bl	8005aa4 <vTaskDelay>
			switch(u8_RequestedSpeed)
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <DashboardDisplay_Task+0x18c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f240 32b6 	movw	r2, #950	; 0x3b6
 800190a:	4293      	cmp	r3, r2
 800190c:	d06a      	beq.n	80019e4 <DashboardDisplay_Task+0x13c>
 800190e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001912:	4293      	cmp	r3, r2
 8001914:	dc75      	bgt.n	8001a02 <DashboardDisplay_Task+0x15a>
 8001916:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800191a:	d054      	beq.n	80019c6 <DashboardDisplay_Task+0x11e>
 800191c:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8001920:	dc6f      	bgt.n	8001a02 <DashboardDisplay_Task+0x15a>
 8001922:	f240 3202 	movw	r2, #770	; 0x302
 8001926:	4293      	cmp	r3, r2
 8001928:	d03e      	beq.n	80019a8 <DashboardDisplay_Task+0x100>
 800192a:	f240 3202 	movw	r2, #770	; 0x302
 800192e:	4293      	cmp	r3, r2
 8001930:	dc67      	bgt.n	8001a02 <DashboardDisplay_Task+0x15a>
 8001932:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8001936:	d028      	beq.n	800198a <DashboardDisplay_Task+0xe2>
 8001938:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800193c:	dc61      	bgt.n	8001a02 <DashboardDisplay_Task+0x15a>
 800193e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001942:	d004      	beq.n	800194e <DashboardDisplay_Task+0xa6>
 8001944:	f240 224e 	movw	r2, #590	; 0x24e
 8001948:	4293      	cmp	r3, r2
 800194a:	d00f      	beq.n	800196c <DashboardDisplay_Task+0xc4>
			default: break;
 800194c:	e059      	b.n	8001a02 <DashboardDisplay_Task+0x15a>
				if(current_display != Display_Gear0)
 800194e:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d057      	beq.n	8001a06 <DashboardDisplay_Task+0x15e>
					current_display = Display_Gear0;
 8001956:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 8001958:	2203      	movs	r2, #3
 800195a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed0, 9, 1000);
 800195c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001960:	2209      	movs	r2, #9
 8001962:	4935      	ldr	r1, [pc, #212]	; (8001a38 <DashboardDisplay_Task+0x190>)
 8001964:	4831      	ldr	r0, [pc, #196]	; (8001a2c <DashboardDisplay_Task+0x184>)
 8001966:	f003 fc50 	bl	800520a <HAL_UART_Transmit>
				break;
 800196a:	e04c      	b.n	8001a06 <DashboardDisplay_Task+0x15e>
				if(current_display != Display_Gear1)
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d04a      	beq.n	8001a0a <DashboardDisplay_Task+0x162>
					current_display = Display_Gear1;
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 8001976:	2204      	movs	r2, #4
 8001978:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed1, 9, 1000);
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	2209      	movs	r2, #9
 8001980:	492e      	ldr	r1, [pc, #184]	; (8001a3c <DashboardDisplay_Task+0x194>)
 8001982:	482a      	ldr	r0, [pc, #168]	; (8001a2c <DashboardDisplay_Task+0x184>)
 8001984:	f003 fc41 	bl	800520a <HAL_UART_Transmit>
				break;
 8001988:	e03f      	b.n	8001a0a <DashboardDisplay_Task+0x162>
				if(current_display != Display_Gear2)
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d03d      	beq.n	8001a0e <DashboardDisplay_Task+0x166>
					current_display = Display_Gear2;
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 8001994:	2205      	movs	r2, #5
 8001996:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed2, 9, 1000);
 8001998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199c:	2209      	movs	r2, #9
 800199e:	4928      	ldr	r1, [pc, #160]	; (8001a40 <DashboardDisplay_Task+0x198>)
 80019a0:	4822      	ldr	r0, [pc, #136]	; (8001a2c <DashboardDisplay_Task+0x184>)
 80019a2:	f003 fc32 	bl	800520a <HAL_UART_Transmit>
				break;
 80019a6:	e032      	b.n	8001a0e <DashboardDisplay_Task+0x166>
				if(current_display != Display_Gear3)
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b06      	cmp	r3, #6
 80019ae:	d030      	beq.n	8001a12 <DashboardDisplay_Task+0x16a>
					current_display = Display_Gear3;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80019b2:	2206      	movs	r2, #6
 80019b4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed3, 9, 1000);
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	2209      	movs	r2, #9
 80019bc:	4921      	ldr	r1, [pc, #132]	; (8001a44 <DashboardDisplay_Task+0x19c>)
 80019be:	481b      	ldr	r0, [pc, #108]	; (8001a2c <DashboardDisplay_Task+0x184>)
 80019c0:	f003 fc23 	bl	800520a <HAL_UART_Transmit>
				break;
 80019c4:	e025      	b.n	8001a12 <DashboardDisplay_Task+0x16a>
				if(current_display != Display_Gear4)
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b07      	cmp	r3, #7
 80019cc:	d023      	beq.n	8001a16 <DashboardDisplay_Task+0x16e>
					current_display = Display_Gear4;
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed4, 9, 1000);
 80019d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d8:	2209      	movs	r2, #9
 80019da:	491b      	ldr	r1, [pc, #108]	; (8001a48 <DashboardDisplay_Task+0x1a0>)
 80019dc:	4813      	ldr	r0, [pc, #76]	; (8001a2c <DashboardDisplay_Task+0x184>)
 80019de:	f003 fc14 	bl	800520a <HAL_UART_Transmit>
				break;
 80019e2:	e018      	b.n	8001a16 <DashboardDisplay_Task+0x16e>
				if(current_display != Display_Gear5)
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d016      	beq.n	8001a1a <DashboardDisplay_Task+0x172>
					current_display = Display_Gear5;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <DashboardDisplay_Task+0x17c>)
 80019ee:	2208      	movs	r2, #8
 80019f0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, Display_Speed5, 9, 1000);
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	2209      	movs	r2, #9
 80019f8:	4914      	ldr	r1, [pc, #80]	; (8001a4c <DashboardDisplay_Task+0x1a4>)
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <DashboardDisplay_Task+0x184>)
 80019fc:	f003 fc05 	bl	800520a <HAL_UART_Transmit>
				break;
 8001a00:	e00b      	b.n	8001a1a <DashboardDisplay_Task+0x172>
			default: break;
 8001a02:	bf00      	nop
 8001a04:	e025      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
				break;
 8001a06:	bf00      	nop
 8001a08:	e023      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
				break;
 8001a0a:	bf00      	nop
 8001a0c:	e021      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
				break;
 8001a0e:	bf00      	nop
 8001a10:	e01f      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
				break;
 8001a12:	bf00      	nop
 8001a14:	e01d      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
				break;
 8001a16:	bf00      	nop
 8001a18:	e01b      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
				break;
 8001a1a:	bf00      	nop
			break;
 8001a1c:	e019      	b.n	8001a52 <DashboardDisplay_Task+0x1aa>
 8001a1e:	bf00      	nop
 8001a20:	20000453 	.word	0x20000453
 8001a24:	20000452 	.word	0x20000452
 8001a28:	2000000c 	.word	0x2000000c
 8001a2c:	200005ac 	.word	0x200005ac
 8001a30:	20000018 	.word	0x20000018
 8001a34:	20000004 	.word	0x20000004
 8001a38:	20000024 	.word	0x20000024
 8001a3c:	20000030 	.word	0x20000030
 8001a40:	2000003c 	.word	0x2000003c
 8001a44:	20000048 	.word	0x20000048
 8001a48:	20000054 	.word	0x20000054
 8001a4c:	20000060 	.word	0x20000060
			break;
 8001a50:	bf00      	nop
		}

		if(DutyCycle >= 0)
 8001a52:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <DashboardDisplay_Task+0x2fc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f04f 0100 	mov.w	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa4e 	bl	8000efc <__aeabi_fcmpge>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d024      	beq.n	8001ab0 <DashboardDisplay_Task+0x208>
		{
			size = int32ToAsciiArray(DutyCycle , arr , sizeof(arr));
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <DashboardDisplay_Task+0x2fc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fa5a 	bl	8000f24 <__aeabi_f2iz>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2232      	movs	r2, #50	; 0x32
 8001a74:	494c      	ldr	r1, [pc, #304]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fc12 	bl	80012a0 <int32ToAsciiArray>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001a80:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, DUTY, sizeof(DUTY), 1000);
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	2207      	movs	r2, #7
 8001a88:	4949      	ldr	r1, [pc, #292]	; (8001bb0 <DashboardDisplay_Task+0x308>)
 8001a8a:	484a      	ldr	r0, [pc, #296]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001a8c:	f003 fbbd 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, arr, size, 1000);
 8001a90:	4b46      	ldr	r3, [pc, #280]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	4943      	ldr	r1, [pc, #268]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001a9c:	4845      	ldr	r0, [pc, #276]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001a9e:	f003 fbb4 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Termination, sizeof(Termination), 1000);
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	4943      	ldr	r1, [pc, #268]	; (8001bb8 <DashboardDisplay_Task+0x310>)
 8001aaa:	4842      	ldr	r0, [pc, #264]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001aac:	f003 fbad 	bl	800520a <HAL_UART_Transmit>
		}


		if(Current >= 0)
 8001ab0:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <DashboardDisplay_Task+0x314>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa1f 	bl	8000efc <__aeabi_fcmpge>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d024      	beq.n	8001b0e <DashboardDisplay_Task+0x266>
		{
			size = int32ToAsciiArray(Current , arr , sizeof(arr));
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <DashboardDisplay_Task+0x314>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fa2b 	bl	8000f24 <__aeabi_f2iz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2232      	movs	r2, #50	; 0x32
 8001ad2:	4935      	ldr	r1, [pc, #212]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fbe3 	bl	80012a0 <int32ToAsciiArray>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a33      	ldr	r2, [pc, #204]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001ade:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, CUR, sizeof(CUR), 1000);
 8001ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	4936      	ldr	r1, [pc, #216]	; (8001bc0 <DashboardDisplay_Task+0x318>)
 8001ae8:	4832      	ldr	r0, [pc, #200]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001aea:	f003 fb8e 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, arr, size, 1000);
 8001aee:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af8:	492b      	ldr	r1, [pc, #172]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001afa:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001afc:	f003 fb85 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Termination, sizeof(Termination), 1000);
 8001b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b04:	2203      	movs	r2, #3
 8001b06:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <DashboardDisplay_Task+0x310>)
 8001b08:	482a      	ldr	r0, [pc, #168]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001b0a:	f003 fb7e 	bl	800520a <HAL_UART_Transmit>
		}

		if(ERPM >= 0)
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <DashboardDisplay_Task+0x31c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db20      	blt.n	8001b58 <DashboardDisplay_Task+0x2b0>
		{
			size = int32ToAsciiArray(ERPM , arr , sizeof(arr));
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <DashboardDisplay_Task+0x31c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2232      	movs	r2, #50	; 0x32
 8001b1c:	4922      	ldr	r1, [pc, #136]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fbbe 	bl	80012a0 <int32ToAsciiArray>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001b28:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, RPM, sizeof(RPM), 1000);
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4925      	ldr	r1, [pc, #148]	; (8001bc8 <DashboardDisplay_Task+0x320>)
 8001b32:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001b34:	f003 fb69 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, arr, size, 1000);
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	4919      	ldr	r1, [pc, #100]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001b44:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001b46:	f003 fb60 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Termination, sizeof(Termination), 1000);
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	2203      	movs	r2, #3
 8001b50:	4919      	ldr	r1, [pc, #100]	; (8001bb8 <DashboardDisplay_Task+0x310>)
 8001b52:	4818      	ldr	r0, [pc, #96]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001b54:	f003 fb59 	bl	800520a <HAL_UART_Transmit>
		}

		if(WhUsed >= 0)
		{
			size = int32ToAsciiArray(WhUsed , arr , sizeof(arr));
 8001b58:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <DashboardDisplay_Task+0x324>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2232      	movs	r2, #50	; 0x32
 8001b5e:	4912      	ldr	r1, [pc, #72]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fb9d 	bl	80012a0 <int32ToAsciiArray>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a10      	ldr	r2, [pc, #64]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001b6a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, WH, sizeof(WH), 1000);
 8001b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b70:	2207      	movs	r2, #7
 8001b72:	4917      	ldr	r1, [pc, #92]	; (8001bd0 <DashboardDisplay_Task+0x328>)
 8001b74:	480f      	ldr	r0, [pc, #60]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001b76:	f003 fb48 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, arr, size, 1000);
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <DashboardDisplay_Task+0x304>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b84:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <DashboardDisplay_Task+0x300>)
 8001b86:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001b88:	f003 fb3f 	bl	800520a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, Termination, sizeof(Termination), 1000);
 8001b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b90:	2203      	movs	r2, #3
 8001b92:	4909      	ldr	r1, [pc, #36]	; (8001bb8 <DashboardDisplay_Task+0x310>)
 8001b94:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <DashboardDisplay_Task+0x30c>)
 8001b96:	f003 fb38 	bl	800520a <HAL_UART_Transmit>
		}
		vTaskDelay(250); // Task delay
 8001b9a:	20fa      	movs	r0, #250	; 0xfa
 8001b9c:	f003 ff82 	bl	8005aa4 <vTaskDelay>
		switch(System_State)
 8001ba0:	e686      	b.n	80018b0 <DashboardDisplay_Task+0x8>
 8001ba2:	bf00      	nop
 8001ba4:	20000428 	.word	0x20000428
 8001ba8:	20000458 	.word	0x20000458
 8001bac:	20000454 	.word	0x20000454
 8001bb0:	2000007c 	.word	0x2000007c
 8001bb4:	200005ac 	.word	0x200005ac
 8001bb8:	2000008c 	.word	0x2000008c
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000074 	.word	0x20000074
 8001bc4:	20000424 	.word	0x20000424
 8001bc8:	2000006c 	.word	0x2000006c
 8001bcc:	20000434 	.word	0x20000434
 8001bd0:	20000084 	.word	0x20000084
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

	// Get the message
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8001be0:	4b8b      	ldr	r3, [pc, #556]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001be2:	4a8c      	ldr	r2, [pc, #560]	; (8001e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f001 f840 	bl	8002c6c <HAL_CAN_GetRxMessage>
	{
		// Reception error
	}

	// Extract the Command ID from the received message
	uint8_t commandID = (rxHeader.ExtId >> 8) & 0xFF;
 8001bec:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	73fb      	strb	r3, [r7, #15]

	switch (commandID)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	3b09      	subs	r3, #9
 8001bf8:	2b13      	cmp	r3, #19
 8001bfa:	f200 820a 	bhi.w	8002012 <HAL_CAN_RxFifo0MsgPendingCallback+0x43a>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c55 	.word	0x08001c55
 8001c08:	08002013 	.word	0x08002013
 8001c0c:	08002013 	.word	0x08002013
 8001c10:	08002013 	.word	0x08002013
 8001c14:	08002013 	.word	0x08002013
 8001c18:	08001ce7 	.word	0x08001ce7
 8001c1c:	08001d65 	.word	0x08001d65
 8001c20:	08001e59 	.word	0x08001e59
 8001c24:	08002013 	.word	0x08002013
 8001c28:	08002013 	.word	0x08002013
 8001c2c:	08002013 	.word	0x08002013
 8001c30:	08002013 	.word	0x08002013
 8001c34:	08002013 	.word	0x08002013
 8001c38:	08002013 	.word	0x08002013
 8001c3c:	08002013 	.word	0x08002013
 8001c40:	08002013 	.word	0x08002013
 8001c44:	08002013 	.word	0x08002013
 8001c48:	08002013 	.word	0x08002013
 8001c4c:	08001f7b 	.word	0x08001f7b
 8001c50:	08002013 	.word	0x08002013
	{
	case 9: // CAN_PACKET_STATUS
	{
		Rec_ERPM = (rxData[0] << 24) | (rxData[1] << 16) | (rxData[2] << 8) | rxData[3];
 8001c54:	4b6e      	ldr	r3, [pc, #440]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	061a      	lsls	r2, r3, #24
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c64:	789b      	ldrb	r3, [r3, #2]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	4a69      	ldr	r2, [pc, #420]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c6c:	78d2      	ldrb	r2, [r2, #3]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	4a69      	ldr	r2, [pc, #420]	; (8001e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001c72:	6013      	str	r3, [r2, #0]
		ERPM = Rec_ERPM;
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a68      	ldr	r2, [pc, #416]	; (8001e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001c7a:	6013      	str	r3, [r2, #0]
		Rec_Current = (rxData[4] << 8) | rxData[5];
 8001c7c:	4b64      	ldr	r3, [pc, #400]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b62      	ldr	r3, [pc, #392]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001c86:	795b      	ldrb	r3, [r3, #5]
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c90:	801a      	strh	r2, [r3, #0]
		Current = (float)Rec_Current / 10.0;
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ff29 	bl	8000af0 <__aeabi_i2f>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4960      	ldr	r1, [pc, #384]	; (8001e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f82c 	bl	8000d00 <__aeabi_fdiv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001cae:	601a      	str	r2, [r3, #0]
		Rec_DutyCycle = (rxData[6] << 8) | rxData[7];
 8001cb0:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	4b55      	ldr	r3, [pc, #340]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001cba:	79db      	ldrb	r3, [r3, #7]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001cc4:	801a      	strh	r2, [r3, #0]
		DutyCycle = (float)Rec_DutyCycle / 10.0;
 8001cc6:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe ff0f 	bl	8000af0 <__aeabi_i2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4953      	ldr	r1, [pc, #332]	; (8001e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f812 	bl	8000d00 <__aeabi_fdiv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001ce2:	601a      	str	r2, [r3, #0]

		// Process ERPM, Current, DutyCycle
	}
	break;
 8001ce4:	e196      	b.n	8002014 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>

	case 14: // CAN_PACKET_STATUS_2
	{
		Rec_AhUsed = (rxData[0] << 24) | (rxData[1] << 16) | (rxData[2] << 8) | rxData[3];
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	061a      	lsls	r2, r3, #24
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001cfe:	78d2      	ldrb	r2, [r2, #3]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d06:	601a      	str	r2, [r3, #0]
		AhUsed = (float)Rec_AhUsed / 10000.0;
 8001d08:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe feeb 	bl	8000ae8 <__aeabi_ui2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4948      	ldr	r1, [pc, #288]	; (8001e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fff2 	bl	8000d00 <__aeabi_fdiv>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8001d22:	601a      	str	r2, [r3, #0]
		Rec_AhCharged = (rxData[4] << 24) | (rxData[5] << 16) | (rxData[6] << 8) | rxData[7];
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d26:	791b      	ldrb	r3, [r3, #4]
 8001d28:	061a      	lsls	r2, r3, #24
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d2c:	795b      	ldrb	r3, [r3, #5]
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	431a      	orrs	r2, r3
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d34:	799b      	ldrb	r3, [r3, #6]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d3c:	79d2      	ldrb	r2, [r2, #7]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001d44:	601a      	str	r2, [r3, #0]
		AhCharged = (float)Rec_AhCharged / 10000.0;
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fecc 	bl	8000ae8 <__aeabi_ui2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ffd3 	bl	8000d00 <__aeabi_fdiv>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001d60:	601a      	str	r2, [r3, #0]

		// Process AhUsed, AhCharged
	}
	break;
 8001d62:	e157      	b.n	8002014 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>

	case 15: // CAN_PACKET_STATUS_3
	{
		Rec_WhUsed = (rxData[0] << 24) | (rxData[1] << 16) | (rxData[2] << 8) | rxData[3];
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	061a      	lsls	r2, r3, #24
 8001d6a:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	041b      	lsls	r3, r3, #16
 8001d70:	431a      	orrs	r2, r3
 8001d72:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d74:	789b      	ldrb	r3, [r3, #2]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001d7c:	78d2      	ldrb	r2, [r2, #3]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001d84:	601a      	str	r2, [r3, #0]
		WhUsed = (float)Rec_WhUsed / 10000.0;
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe feac 	bl	8000ae8 <__aeabi_ui2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb40 	bl	8000418 <__aeabi_f2d>
 8001d98:	a31b      	add	r3, pc, #108	; (adr r3, 8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fcbd 	bl	800071c <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe fdc7 	bl	800093c <__aeabi_d2uiz>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a26      	ldr	r2, [pc, #152]	; (8001e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001db2:	6013      	str	r3, [r2, #0]
		Rec_WhCharged = (rxData[4] << 24) | (rxData[5] << 16) | (rxData[6] << 8) | rxData[7];
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001db6:	791b      	ldrb	r3, [r3, #4]
 8001db8:	061a      	lsls	r2, r3, #24
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001dbc:	795b      	ldrb	r3, [r3, #5]
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001dc4:	799b      	ldrb	r3, [r3, #6]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001dcc:	79d2      	ldrb	r2, [r2, #7]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001dd4:	601a      	str	r2, [r3, #0]
		WhCharged = (float)Rec_WhCharged / 10000.0;
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fe84 	bl	8000ae8 <__aeabi_ui2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb18 	bl	8000418 <__aeabi_f2d>
 8001de8:	a307      	add	r3, pc, #28	; (adr r3, 8001e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fc95 	bl	800071c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fd9f 	bl	800093c <__aeabi_d2uiz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001e02:	6013      	str	r3, [r2, #0]

		// Process WhUsed, WhCharged
	}
	break;
 8001e04:	e106      	b.n	8002014 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>
 8001e06:	bf00      	nop
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40c38800 	.word	0x40c38800
 8001e10:	200003f4 	.word	0x200003f4
 8001e14:	200003d8 	.word	0x200003d8
 8001e18:	200003fc 	.word	0x200003fc
 8001e1c:	20000424 	.word	0x20000424
 8001e20:	20000400 	.word	0x20000400
 8001e24:	41200000 	.word	0x41200000
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000402 	.word	0x20000402
 8001e30:	20000428 	.word	0x20000428
 8001e34:	20000404 	.word	0x20000404
 8001e38:	461c4000 	.word	0x461c4000
 8001e3c:	2000042c 	.word	0x2000042c
 8001e40:	20000408 	.word	0x20000408
 8001e44:	20000430 	.word	0x20000430
 8001e48:	2000040c 	.word	0x2000040c
 8001e4c:	20000434 	.word	0x20000434
 8001e50:	20000410 	.word	0x20000410
 8001e54:	20000438 	.word	0x20000438

	case 16: // CAN_PACKET_STATUS_4
	{
		Rec_TempFET = (rxData[0] << 8) | rxData[1];
 8001e58:	4b70      	ldr	r3, [pc, #448]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	b21a      	sxth	r2, r3
 8001e60:	4b6e      	ldr	r3, [pc, #440]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 8001e6c:	801a      	strh	r2, [r3, #0]
		TempFET = (float)Rec_TempFET / 10.0;
 8001e6e:	4b6c      	ldr	r3, [pc, #432]	; (8002020 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe3b 	bl	8000af0 <__aeabi_i2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe facb 	bl	8000418 <__aeabi_f2d>
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 8001e88:	f7fe fc48 	bl	800071c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7fe fd2a 	bl	80008ec <__aeabi_d2iz>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b62      	ldr	r3, [pc, #392]	; (8002028 <HAL_CAN_RxFifo0MsgPendingCallback+0x450>)
 8001e9e:	801a      	strh	r2, [r3, #0]
		Rec_TempMotor = (rxData[2] << 8) | rxData[3];
 8001ea0:	4b5e      	ldr	r3, [pc, #376]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001ea2:	789b      	ldrb	r3, [r3, #2]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	4b5c      	ldr	r3, [pc, #368]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001eaa:	78db      	ldrb	r3, [r3, #3]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	4b5e      	ldr	r3, [pc, #376]	; (800202c <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8001eb4:	801a      	strh	r2, [r3, #0]
		TempMotor = (float)Rec_TempMotor / 10.0;
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8001eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fe17 	bl	8000af0 <__aeabi_i2f>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe faa7 	bl	8000418 <__aeabi_f2d>
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b55      	ldr	r3, [pc, #340]	; (8002024 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 8001ed0:	f7fe fc24 	bl	800071c <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fd06 	bl	80008ec <__aeabi_d2iz>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	4b52      	ldr	r3, [pc, #328]	; (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8001ee6:	801a      	strh	r2, [r3, #0]
		Rec_CurrentIn = (rxData[4] << 8) | rxData[5];
 8001ee8:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001eea:	791b      	ldrb	r3, [r3, #4]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001ef2:	795b      	ldrb	r3, [r3, #5]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b4e      	ldr	r3, [pc, #312]	; (8002034 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8001efc:	801a      	strh	r2, [r3, #0]
		CurrentIn = (float)Rec_CurrentIn / 10.0;
 8001efe:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8001f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fdf3 	bl	8000af0 <__aeabi_i2f>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fa83 	bl	8000418 <__aeabi_f2d>
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b43      	ldr	r3, [pc, #268]	; (8002024 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 8001f18:	f7fe fc00 	bl	800071c <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fce2 	bl	80008ec <__aeabi_d2iz>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8001f2e:	801a      	strh	r2, [r3, #0]
		Rec_PIDPos = (rxData[6] << 8) | rxData[7];
 8001f30:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001f32:	799b      	ldrb	r3, [r3, #6]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001f3a:	79db      	ldrb	r3, [r3, #7]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8001f44:	801a      	strh	r2, [r3, #0]
		PIDPos = (float)Rec_PIDPos / 50.0;
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8001f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fdcf 	bl	8000af0 <__aeabi_i2f>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fa5f 	bl	8000418 <__aeabi_f2d>
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	4b38      	ldr	r3, [pc, #224]	; (8002040 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8001f60:	f7fe fbdc 	bl	800071c <__aeabi_ddiv>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fcbe 	bl	80008ec <__aeabi_d2iz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 8001f76:	801a      	strh	r2, [r3, #0]

		// Process TempFET, TempMotor, CurrentIn, PIDPos
	}
	break;
 8001f78:	e04c      	b.n	8002014 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>

	case 27: // CAN_PACKET_STATUS_5
	{
		Rec_Tachometer = (rxData[0] << 24) | (rxData[1] << 16) | (rxData[2] << 8) | rxData[3];
 8001f7a:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	061a      	lsls	r2, r3, #24
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	431a      	orrs	r2, r3
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001f8a:	789b      	ldrb	r3, [r3, #2]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001f92:	78d2      	ldrb	r2, [r2, #3]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8001f98:	6013      	str	r3, [r2, #0]
		Tachometer = (float)Rec_Tachometer / 6.0;
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fda6 	bl	8000af0 <__aeabi_i2f>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa36 	bl	8000418 <__aeabi_f2d>
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001fb2:	f7fe fbb3 	bl	800071c <__aeabi_ddiv>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fc95 	bl	80008ec <__aeabi_d2iz>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_CAN_RxFifo0MsgPendingCallback+0x478>)
 8001fc6:	6013      	str	r3, [r2, #0]
		Rec_VoltageIn = (rxData[4] << 8) | rxData[5];
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001fca:	791b      	ldrb	r3, [r3, #4]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8001fd2:	795b      	ldrb	r3, [r3, #5]
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x47c>)
 8001fdc:	801a      	strh	r2, [r3, #0]
		VoltageIn = (float)Rec_VoltageIn / 10.0;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_CAN_RxFifo0MsgPendingCallback+0x47c>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fd83 	bl	8000af0 <__aeabi_i2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa13 	bl	8000418 <__aeabi_f2d>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 8001ff8:	f7fe fb90 	bl	800071c <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fc72 	bl	80008ec <__aeabi_d2iz>
 8002008:	4603      	mov	r3, r0
 800200a:	b21a      	sxth	r2, r3
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_CAN_RxFifo0MsgPendingCallback+0x480>)
 800200e:	801a      	strh	r2, [r3, #0]

		// Process Tachometer, VoltageIn
	}
	break;
 8002010:	e000      	b.n	8002014 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>
	}
	break;

	default:
		// Handle unknown or unsupported command IDs
		break;
 8002012:	bf00      	nop
	}

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200003f4 	.word	0x200003f4
 8002020:	20000414 	.word	0x20000414
 8002024:	40240000 	.word	0x40240000
 8002028:	2000043c 	.word	0x2000043c
 800202c:	20000416 	.word	0x20000416
 8002030:	2000043e 	.word	0x2000043e
 8002034:	20000418 	.word	0x20000418
 8002038:	20000440 	.word	0x20000440
 800203c:	2000041a 	.word	0x2000041a
 8002040:	40490000 	.word	0x40490000
 8002044:	20000442 	.word	0x20000442
 8002048:	2000041c 	.word	0x2000041c
 800204c:	40180000 	.word	0x40180000
 8002050:	20000444 	.word	0x20000444
 8002054:	20000420 	.word	0x20000420
 8002058:	20000448 	.word	0x20000448

0800205c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d101      	bne.n	8002072 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800206e:	f000 fbd9 	bl	8002824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		static uint8_t IntErrorFlag1=0;
		IntErrorFlag1++;
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002086:	701a      	strb	r2, [r3, #0]
		if(IntErrorFlag1 > 1)
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d911      	bls.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			if(System_State == System_OpenSequenceOn)
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <HAL_TIM_PeriodElapsedCallback+0x44>
			{
				u8_TimeOutFlag1 = 1;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e009      	b.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x58>
			}
			else if (System_State == System_Operation)
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x58>
			{
				u8_TimeOutFlag1++;
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020b2:	701a      	strb	r2, [r3, #0]
			{

			}
		}
	}
	if(htim->Instance == TIM4)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10c      	bne.n	80020d8 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		static uint8_t IntErrorFlag4=0;
		IntErrorFlag4++;
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020c8:	701a      	strb	r2, [r3, #0]
		if(IntErrorFlag4 > 1)
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d902      	bls.n	80020d8 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			u8_TimeOutFlag4 = 1;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END Callback 1 */
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40000400 	.word	0x40000400
 80020e4:	2000048a 	.word	0x2000048a
 80020e8:	20000453 	.word	0x20000453
 80020ec:	2000044b 	.word	0x2000044b
 80020f0:	40000800 	.word	0x40000800
 80020f4:	2000048b 	.word	0x2000048b
 80020f8:	2000044c 	.word	0x2000044c

080020fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002100:	b672      	cpsid	i
}
 8002102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002104:	e7fe      	b.n	8002104 <Error_Handler+0x8>
	...

08002108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_MspInit+0x68>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_MspInit+0x68>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6193      	str	r3, [r2, #24]
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_MspInit+0x68>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_MspInit+0x68>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_MspInit+0x68>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x68>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	210f      	movs	r1, #15
 8002142:	f06f 0001 	mvn.w	r0, #1
 8002146:	f001 f9b0 	bl	80034aa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_MspInit+0x6c>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_MspInit+0x6c>)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000

08002178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_InitTick+0xe8>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a33      	ldr	r2, [pc, #204]	; (8002260 <HAL_InitTick+0xe8>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	61d3      	str	r3, [r2, #28]
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_InitTick+0xe8>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a6:	f107 0210 	add.w	r2, r7, #16
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 ff4b 	bl	800404c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c0:	f001 ff1c 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 80021c4:	6378      	str	r0, [r7, #52]	; 0x34
 80021c6:	e004      	b.n	80021d2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021c8:	f001 ff18 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 80021cc:	4603      	mov	r3, r0
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_InitTick+0xec>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	3b01      	subs	r3, #1
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_InitTick+0xf0>)
 80021e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_InitTick+0xf0>)
 80021ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ee:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_InitTick+0xf0>)
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_InitTick+0xf0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_InitTick+0xf0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_InitTick+0xf0>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002208:	4817      	ldr	r0, [pc, #92]	; (8002268 <HAL_InitTick+0xf0>)
 800220a:	f001 ff6d 	bl	80040e8 <HAL_TIM_Base_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11b      	bne.n	8002254 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800221c:	4812      	ldr	r0, [pc, #72]	; (8002268 <HAL_InitTick+0xf0>)
 800221e:	f001 ffd9 	bl	80041d4 <HAL_TIM_Base_Start_IT>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002228:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002230:	201c      	movs	r0, #28
 8002232:	f001 f956 	bl	80034e2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d808      	bhi.n	800224e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	201c      	movs	r0, #28
 8002242:	f001 f932 	bl	80034aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_InitTick+0xf4>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e002      	b.n	8002254 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002254:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002258:	4618      	mov	r0, r3
 800225a:	3738      	adds	r7, #56	; 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	431bde83 	.word	0x431bde83
 8002268:	2000048c 	.word	0x2000048c
 800226c:	20000094 	.word	0x20000094

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <MemManage_Handler+0x4>

08002282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler+0x4>

0800228e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
	...

0800229c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80022a2:	f000 fe29 	bl	8002ef8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000010c 	.word	0x2000010c

080022b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80022b6:	f000 fe1f 	bl	8002ef8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000010c 	.word	0x2000010c

080022c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <CAN1_RX1_IRQHandler+0x10>)
 80022ca:	f000 fe15 	bl	8002ef8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000010c 	.word	0x2000010c

080022d8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <CAN1_SCE_IRQHandler+0x10>)
 80022de:	f000 fe0b 	bl	8002ef8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000010c 	.word	0x2000010c

080022ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <TIM2_IRQHandler+0x10>)
 80022f2:	f002 f91f 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000048c 	.word	0x2000048c

08002300 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <TIM3_IRQHandler+0x10>)
 8002306:	f002 f915 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000051c 	.word	0x2000051c

08002314 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <TIM4_IRQHandler+0x10>)
 800231a:	f002 f90b 	bl	8004534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000564 	.word	0x20000564

08002328 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b096      	sub	sp, #88	; 0x58
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2220      	movs	r2, #32
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f004 facf 	bl	8006910 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <MX_TIM1_Init+0x138>)
 8002374:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <MX_TIM1_Init+0x13c>)
 8002376:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 144-1;
 8002378:	4b3c      	ldr	r3, [pc, #240]	; (800246c <MX_TIM1_Init+0x138>)
 800237a:	228f      	movs	r2, #143	; 0x8f
 800237c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <MX_TIM1_Init+0x138>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <MX_TIM1_Init+0x138>)
 8002386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800238a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <MX_TIM1_Init+0x138>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <MX_TIM1_Init+0x138>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <MX_TIM1_Init+0x138>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800239e:	4833      	ldr	r0, [pc, #204]	; (800246c <MX_TIM1_Init+0x138>)
 80023a0:	f001 fea2 	bl	80040e8 <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80023aa:	f7ff fea7 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023b8:	4619      	mov	r1, r3
 80023ba:	482c      	ldr	r0, [pc, #176]	; (800246c <MX_TIM1_Init+0x138>)
 80023bc:	f002 fa84 	bl	80048c8 <HAL_TIM_ConfigClockSource>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80023c6:	f7ff fe99 	bl	80020fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023ca:	4828      	ldr	r0, [pc, #160]	; (800246c <MX_TIM1_Init+0x138>)
 80023cc:	f001 ff54 	bl	8004278 <HAL_TIM_PWM_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80023d6:	f7ff fe91 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023e6:	4619      	mov	r1, r3
 80023e8:	4820      	ldr	r0, [pc, #128]	; (800246c <MX_TIM1_Init+0x138>)
 80023ea:	f002 fdfd 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80023f4:	f7ff fe82 	bl	80020fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f8:	2360      	movs	r3, #96	; 0x60
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002404:	2300      	movs	r3, #0
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	2200      	movs	r2, #0
 800241a:	4619      	mov	r1, r3
 800241c:	4813      	ldr	r0, [pc, #76]	; (800246c <MX_TIM1_Init+0x138>)
 800241e:	f002 f991 	bl	8004744 <HAL_TIM_PWM_ConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002428:	f7ff fe68 	bl	80020fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4619      	mov	r1, r3
 800244e:	4807      	ldr	r0, [pc, #28]	; (800246c <MX_TIM1_Init+0x138>)
 8002450:	f002 fe28 	bl	80050a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800245a:	f7ff fe4f 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800245e:	4803      	ldr	r0, [pc, #12]	; (800246c <MX_TIM1_Init+0x138>)
 8002460:	f000 f8fa 	bl	8002658 <HAL_TIM_MspPostInit>

}
 8002464:	bf00      	nop
 8002466:	3758      	adds	r7, #88	; 0x58
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200004d4 	.word	0x200004d4
 8002470:	40012c00 	.word	0x40012c00

08002474 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_TIM3_Init+0x94>)
 8002492:	4a1e      	ldr	r2, [pc, #120]	; (800250c <MX_TIM3_Init+0x98>)
 8002494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6500-1;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_TIM3_Init+0x94>)
 8002498:	f641 1263 	movw	r2, #6499	; 0x1963
 800249c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_TIM3_Init+0x94>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MX_TIM3_Init+0x94>)
 80024a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80024aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ac:	4b16      	ldr	r3, [pc, #88]	; (8002508 <MX_TIM3_Init+0x94>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <MX_TIM3_Init+0x94>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024b8:	4813      	ldr	r0, [pc, #76]	; (8002508 <MX_TIM3_Init+0x94>)
 80024ba:	f001 fe15 	bl	80040e8 <HAL_TIM_Base_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80024c4:	f7ff fe1a 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4619      	mov	r1, r3
 80024d4:	480c      	ldr	r0, [pc, #48]	; (8002508 <MX_TIM3_Init+0x94>)
 80024d6:	f002 f9f7 	bl	80048c8 <HAL_TIM_ConfigClockSource>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80024e0:	f7ff fe0c 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e4:	2300      	movs	r3, #0
 80024e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ec:	463b      	mov	r3, r7
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_TIM3_Init+0x94>)
 80024f2:	f002 fd79 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80024fc:	f7ff fdfe 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000051c 	.word	0x2000051c
 800250c:	40000400 	.word	0x40000400

08002510 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	463b      	mov	r3, r7
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_TIM4_Init+0x94>)
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <MX_TIM4_Init+0x98>)
 8002530:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000-1;
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002534:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002538:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <MX_TIM4_Init+0x94>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002542:	f241 3287 	movw	r2, #4999	; 0x1387
 8002546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <MX_TIM4_Init+0x94>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002554:	4813      	ldr	r0, [pc, #76]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002556:	f001 fdc7 	bl	80040e8 <HAL_TIM_Base_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002560:	f7ff fdcc 	bl	80020fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	4619      	mov	r1, r3
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002572:	f002 f9a9 	bl	80048c8 <HAL_TIM_ConfigClockSource>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800257c:	f7ff fdbe 	bl	80020fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002588:	463b      	mov	r3, r7
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM4_Init+0x94>)
 800258e:	f002 fd2b 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002598:	f7ff fdb0 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000564 	.word	0x20000564
 80025a8:	40000800 	.word	0x40000800

080025ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <HAL_TIM_Base_MspInit+0x9c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10c      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4a22      	ldr	r2, [pc, #136]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025c8:	6193      	str	r3, [r2, #24]
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025d6:	e032      	b.n	800263e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_TIM_Base_MspInit+0xa4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d114      	bne.n	800260c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a19      	ldr	r2, [pc, #100]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2105      	movs	r1, #5
 80025fe:	201d      	movs	r0, #29
 8002600:	f000 ff53 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002604:	201d      	movs	r0, #29
 8002606:	f000 ff6c 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 800260a:	e018      	b.n	800263e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_TIM_Base_MspInit+0xa8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d113      	bne.n	800263e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	61d3      	str	r3, [r2, #28]
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_TIM_Base_MspInit+0xa0>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2105      	movs	r1, #5
 8002632:	201e      	movs	r0, #30
 8002634:	f000 ff39 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002638:	201e      	movs	r0, #30
 800263a:	f000 ff52 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40021000 	.word	0x40021000
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800

08002658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <HAL_TIM_MspPostInit+0x5c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d118      	bne.n	80026aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_TIM_MspPostInit+0x60>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_TIM_MspPostInit+0x60>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_TIM_MspPostInit+0x60>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2302      	movs	r3, #2
 800269c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <HAL_TIM_MspPostInit+0x64>)
 80026a6:	f000 ff2b 	bl	8003500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010800 	.word	0x40010800

080026c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <MX_USART1_UART_Init+0x50>)
 80026c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026e6:	220c      	movs	r2, #12
 80026e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_USART1_UART_Init+0x4c>)
 80026f8:	f002 fd37 	bl	800516a <HAL_UART_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002702:	f7ff fcfb 	bl	80020fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200005ac 	.word	0x200005ac
 8002710:	40013800 	.word	0x40013800

08002714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <HAL_UART_MspInit+0x8c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d131      	bne.n	8002798 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_UART_MspInit+0x90>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_UART_MspInit+0x90>)
 800273a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_UART_MspInit+0x90>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_UART_MspInit+0x90>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_UART_MspInit+0x90>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6193      	str	r3, [r2, #24]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_UART_MspInit+0x90>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4619      	mov	r1, r3
 8002778:	480b      	ldr	r0, [pc, #44]	; (80027a8 <HAL_UART_MspInit+0x94>)
 800277a:	f000 fec1 	bl	8003500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800277e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 0310 	add.w	r3, r7, #16
 8002790:	4619      	mov	r1, r3
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <HAL_UART_MspInit+0x94>)
 8002794:	f000 feb4 	bl	8003500 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010800 	.word	0x40010800

080027ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027ac:	f7ff fdbc 	bl	8002328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027b2:	490c      	ldr	r1, [pc, #48]	; (80027e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027c8:	4c09      	ldr	r4, [pc, #36]	; (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d6:	f004 f8f9 	bl	80069cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7fe fdd7 	bl	800138c <main>
  bx lr
 80027de:	4770      	bx	lr
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80027e8:	08006b3c 	.word	0x08006b3c
  ldr r2, =_sbss
 80027ec:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80027f0:	20001484 	.word	0x20001484

080027f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC1_2_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_Init+0x28>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_Init+0x28>)
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 fe43 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	200f      	movs	r0, #15
 8002810:	f7ff fcb2 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fc78 	bl	8002108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_IncTick+0x1c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_IncTick+0x20>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a03      	ldr	r2, [pc, #12]	; (8002844 <HAL_IncTick+0x20>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	20000098 	.word	0x20000098
 8002844:	200005f4 	.word	0x200005f4

08002848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <HAL_GetTick+0x10>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	200005f4 	.word	0x200005f4

0800285c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0ed      	b.n	8002a4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fbca 	bl	8001014 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002890:	f7ff ffda 	bl	8002848 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002896:	e012      	b.n	80028be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002898:	f7ff ffd6 	bl	8002848 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b0a      	cmp	r3, #10
 80028a4:	d90b      	bls.n	80028be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2205      	movs	r2, #5
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0c5      	b.n	8002a4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0e5      	beq.n	8002898 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0202 	bic.w	r2, r2, #2
 80028da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028dc:	f7ff ffb4 	bl	8002848 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028e2:	e012      	b.n	800290a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e4:	f7ff ffb0 	bl	8002848 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b0a      	cmp	r3, #10
 80028f0:	d90b      	bls.n	800290a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2205      	movs	r2, #5
 8002902:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e09f      	b.n	8002a4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1e5      	bne.n	80028e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7e1b      	ldrb	r3, [r3, #24]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e007      	b.n	8002942 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7e5b      	ldrb	r3, [r3, #25]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e007      	b.n	800296c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7e9b      	ldrb	r3, [r3, #26]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d108      	bne.n	8002986 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0220 	orr.w	r2, r2, #32
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e007      	b.n	8002996 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0220 	bic.w	r2, r2, #32
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7edb      	ldrb	r3, [r3, #27]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0210 	bic.w	r2, r2, #16
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e007      	b.n	80029c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0210 	orr.w	r2, r2, #16
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7f1b      	ldrb	r3, [r3, #28]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d108      	bne.n	80029da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0208 	orr.w	r2, r2, #8
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e007      	b.n	80029ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0208 	bic.w	r2, r2, #8
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7f5b      	ldrb	r3, [r3, #29]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0204 	orr.w	r2, r2, #4
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	ea42 0103 	orr.w	r1, r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d003      	beq.n	8002a78 <HAL_CAN_ConfigFilter+0x26>
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	f040 80aa 	bne.w	8002bcc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2201      	movs	r2, #1
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d123      	bne.n	8002afa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	401a      	ands	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ad4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3248      	adds	r2, #72	; 0x48
 8002ada:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002af0:	6979      	ldr	r1, [r7, #20]
 8002af2:	3348      	adds	r3, #72	; 0x48
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d122      	bne.n	8002b48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3248      	adds	r2, #72	; 0x48
 8002b28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b3e:	6979      	ldr	r1, [r7, #20]
 8002b40:	3348      	adds	r3, #72	; 0x48
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b62:	e007      	b.n	8002b74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b8e:	e007      	b.n	8002ba0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e006      	b.n	8002bda <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d12e      	bne.n	8002c56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c10:	f7ff fe1a 	bl	8002848 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c16:	e012      	b.n	8002c3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c18:	f7ff fe16 	bl	8002848 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d90b      	bls.n	8002c3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e012      	b.n	8002c64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e5      	bne.n	8002c18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e006      	b.n	8002c64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c80:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d003      	beq.n	8002c90 <HAL_CAN_GetRxMessage+0x24>
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	f040 8103 	bne.w	8002e96 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10e      	bne.n	8002cb4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d116      	bne.n	8002cd2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0f7      	b.n	8002ea4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0e8      	b.n	8002ea4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	331b      	adds	r3, #27
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	4413      	add	r3, r2
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0204 	and.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10c      	bne.n	8002d0a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	331b      	adds	r3, #27
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	4413      	add	r3, r2
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0d5b      	lsrs	r3, r3, #21
 8002d00:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e00b      	b.n	8002d22 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	331b      	adds	r3, #27
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	08db      	lsrs	r3, r3, #3
 8002d1a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	331b      	adds	r3, #27
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0202 	and.w	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	331b      	adds	r3, #27
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2208      	movs	r2, #8
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	e00b      	b.n	8002d70 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	331b      	adds	r3, #27
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	3304      	adds	r3, #4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	331b      	adds	r3, #27
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	331b      	adds	r3, #27
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0a1a      	lsrs	r2, r3, #8
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0c1a      	lsrs	r2, r3, #16
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	3302      	adds	r3, #2
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0e1a      	lsrs	r2, r3, #24
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	3303      	adds	r3, #3
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3304      	adds	r3, #4
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0a1a      	lsrs	r2, r3, #8
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	3305      	adds	r3, #5
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0c1a      	lsrs	r2, r3, #16
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	3306      	adds	r3, #6
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e1a      	lsrs	r2, r3, #24
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	3307      	adds	r3, #7
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d108      	bne.n	8002e82 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	e007      	b.n	8002e92 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0220 	orr.w	r2, r2, #32
 8002e90:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e006      	b.n	8002ea4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d002      	beq.n	8002ecc <HAL_CAN_ActivateNotification+0x1e>
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d109      	bne.n	8002ee0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6959      	ldr	r1, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e006      	b.n	8002eee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d07c      	beq.n	8003038 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d023      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f983 	bl	8003266 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f60:	e016      	b.n	8002f90 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e00c      	b.n	8002f90 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	e002      	b.n	8002f90 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f986 	bl	800329c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d024      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f962 	bl	8003278 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fb4:	e016      	b.n	8002fe4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	e00c      	b.n	8002fe4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
 8002fdc:	e002      	b.n	8002fe4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f965 	bl	80032ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d024      	beq.n	8003038 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ff6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f941 	bl	800328a <HAL_CAN_TxMailbox2CompleteCallback>
 8003008:	e016      	b.n	8003038 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
 800301c:	e00c      	b.n	8003038 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	e002      	b.n	8003038 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f944 	bl	80032c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2210      	movs	r2, #16
 800305a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d006      	beq.n	800307e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f92a 	bl	80032d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d009      	beq.n	800309c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fd9e 	bl	8001bd8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2210      	movs	r2, #16
 80030be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2208      	movs	r2, #8
 80030da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f90a 	bl	80032f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8f2 	bl	80032e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2210      	movs	r2, #16
 800311a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f8f3 	bl	8003308 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00b      	beq.n	8003144 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d006      	beq.n	8003144 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2208      	movs	r2, #8
 800313c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8eb 	bl	800331a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d07b      	beq.n	8003246 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d072      	beq.n	800323e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d043      	beq.n	800323e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d03e      	beq.n	800323e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c6:	2b60      	cmp	r3, #96	; 0x60
 80031c8:	d02b      	beq.n	8003222 <HAL_CAN_IRQHandler+0x32a>
 80031ca:	2b60      	cmp	r3, #96	; 0x60
 80031cc:	d82e      	bhi.n	800322c <HAL_CAN_IRQHandler+0x334>
 80031ce:	2b50      	cmp	r3, #80	; 0x50
 80031d0:	d022      	beq.n	8003218 <HAL_CAN_IRQHandler+0x320>
 80031d2:	2b50      	cmp	r3, #80	; 0x50
 80031d4:	d82a      	bhi.n	800322c <HAL_CAN_IRQHandler+0x334>
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d019      	beq.n	800320e <HAL_CAN_IRQHandler+0x316>
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d826      	bhi.n	800322c <HAL_CAN_IRQHandler+0x334>
 80031de:	2b30      	cmp	r3, #48	; 0x30
 80031e0:	d010      	beq.n	8003204 <HAL_CAN_IRQHandler+0x30c>
 80031e2:	2b30      	cmp	r3, #48	; 0x30
 80031e4:	d822      	bhi.n	800322c <HAL_CAN_IRQHandler+0x334>
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d002      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x2f8>
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d005      	beq.n	80031fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031ee:	e01d      	b.n	800322c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	f043 0308 	orr.w	r3, r3, #8
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f8:	e019      	b.n	800322e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f043 0310 	orr.w	r3, r3, #16
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003202:	e014      	b.n	800322e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f043 0320 	orr.w	r3, r3, #32
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800320c:	e00f      	b.n	800322e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003216:	e00a      	b.n	800322e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003220:	e005      	b.n	800322e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800322a:	e000      	b.n	800322e <HAL_CAN_IRQHandler+0x336>
            break;
 800322c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800323c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2204      	movs	r2, #4
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f867 	bl	800332c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800325e:	bf00      	nop
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
	...

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4906      	ldr	r1, [pc, #24]	; (80033d8 <__NVIC_EnableIRQ+0x34>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff4f 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff64 	bl	8003388 <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ffb2 	bl	8003430 <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff81 	bl	80033dc <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff57 	bl	80033a4 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003500:	b480      	push	{r7}
 8003502:	b08b      	sub	sp, #44	; 0x2c
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003512:	e169      	b.n	80037e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003514:	2201      	movs	r2, #1
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	429a      	cmp	r2, r3
 800352e:	f040 8158 	bne.w	80037e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a9a      	ldr	r2, [pc, #616]	; (80037a0 <HAL_GPIO_Init+0x2a0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d05e      	beq.n	80035fa <HAL_GPIO_Init+0xfa>
 800353c:	4a98      	ldr	r2, [pc, #608]	; (80037a0 <HAL_GPIO_Init+0x2a0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d875      	bhi.n	800362e <HAL_GPIO_Init+0x12e>
 8003542:	4a98      	ldr	r2, [pc, #608]	; (80037a4 <HAL_GPIO_Init+0x2a4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d058      	beq.n	80035fa <HAL_GPIO_Init+0xfa>
 8003548:	4a96      	ldr	r2, [pc, #600]	; (80037a4 <HAL_GPIO_Init+0x2a4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d86f      	bhi.n	800362e <HAL_GPIO_Init+0x12e>
 800354e:	4a96      	ldr	r2, [pc, #600]	; (80037a8 <HAL_GPIO_Init+0x2a8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d052      	beq.n	80035fa <HAL_GPIO_Init+0xfa>
 8003554:	4a94      	ldr	r2, [pc, #592]	; (80037a8 <HAL_GPIO_Init+0x2a8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d869      	bhi.n	800362e <HAL_GPIO_Init+0x12e>
 800355a:	4a94      	ldr	r2, [pc, #592]	; (80037ac <HAL_GPIO_Init+0x2ac>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04c      	beq.n	80035fa <HAL_GPIO_Init+0xfa>
 8003560:	4a92      	ldr	r2, [pc, #584]	; (80037ac <HAL_GPIO_Init+0x2ac>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d863      	bhi.n	800362e <HAL_GPIO_Init+0x12e>
 8003566:	4a92      	ldr	r2, [pc, #584]	; (80037b0 <HAL_GPIO_Init+0x2b0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d046      	beq.n	80035fa <HAL_GPIO_Init+0xfa>
 800356c:	4a90      	ldr	r2, [pc, #576]	; (80037b0 <HAL_GPIO_Init+0x2b0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d85d      	bhi.n	800362e <HAL_GPIO_Init+0x12e>
 8003572:	2b12      	cmp	r3, #18
 8003574:	d82a      	bhi.n	80035cc <HAL_GPIO_Init+0xcc>
 8003576:	2b12      	cmp	r3, #18
 8003578:	d859      	bhi.n	800362e <HAL_GPIO_Init+0x12e>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <HAL_GPIO_Init+0x80>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035fb 	.word	0x080035fb
 8003584:	080035d5 	.word	0x080035d5
 8003588:	080035e7 	.word	0x080035e7
 800358c:	08003629 	.word	0x08003629
 8003590:	0800362f 	.word	0x0800362f
 8003594:	0800362f 	.word	0x0800362f
 8003598:	0800362f 	.word	0x0800362f
 800359c:	0800362f 	.word	0x0800362f
 80035a0:	0800362f 	.word	0x0800362f
 80035a4:	0800362f 	.word	0x0800362f
 80035a8:	0800362f 	.word	0x0800362f
 80035ac:	0800362f 	.word	0x0800362f
 80035b0:	0800362f 	.word	0x0800362f
 80035b4:	0800362f 	.word	0x0800362f
 80035b8:	0800362f 	.word	0x0800362f
 80035bc:	0800362f 	.word	0x0800362f
 80035c0:	0800362f 	.word	0x0800362f
 80035c4:	080035dd 	.word	0x080035dd
 80035c8:	080035f1 	.word	0x080035f1
 80035cc:	4a79      	ldr	r2, [pc, #484]	; (80037b4 <HAL_GPIO_Init+0x2b4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035d2:	e02c      	b.n	800362e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	623b      	str	r3, [r7, #32]
          break;
 80035da:	e029      	b.n	8003630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	3304      	adds	r3, #4
 80035e2:	623b      	str	r3, [r7, #32]
          break;
 80035e4:	e024      	b.n	8003630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	3308      	adds	r3, #8
 80035ec:	623b      	str	r3, [r7, #32]
          break;
 80035ee:	e01f      	b.n	8003630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	330c      	adds	r3, #12
 80035f6:	623b      	str	r3, [r7, #32]
          break;
 80035f8:	e01a      	b.n	8003630 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003602:	2304      	movs	r3, #4
 8003604:	623b      	str	r3, [r7, #32]
          break;
 8003606:	e013      	b.n	8003630 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003610:	2308      	movs	r3, #8
 8003612:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	611a      	str	r2, [r3, #16]
          break;
 800361a:	e009      	b.n	8003630 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800361c:	2308      	movs	r3, #8
 800361e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	615a      	str	r2, [r3, #20]
          break;
 8003626:	e003      	b.n	8003630 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
          break;
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x130>
          break;
 800362e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2bff      	cmp	r3, #255	; 0xff
 8003634:	d801      	bhi.n	800363a <HAL_GPIO_Init+0x13a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	e001      	b.n	800363e <HAL_GPIO_Init+0x13e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	d802      	bhi.n	800364c <HAL_GPIO_Init+0x14c>
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	e002      	b.n	8003652 <HAL_GPIO_Init+0x152>
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	3b08      	subs	r3, #8
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	210f      	movs	r1, #15
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	6a39      	ldr	r1, [r7, #32]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	431a      	orrs	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80b1 	beq.w	80037e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <HAL_GPIO_Init+0x2b8>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	4a4c      	ldr	r2, [pc, #304]	; (80037b8 <HAL_GPIO_Init+0x2b8>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6193      	str	r3, [r2, #24]
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <HAL_GPIO_Init+0x2b8>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003698:	4a48      	ldr	r2, [pc, #288]	; (80037bc <HAL_GPIO_Init+0x2bc>)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a40      	ldr	r2, [pc, #256]	; (80037c0 <HAL_GPIO_Init+0x2c0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_GPIO_Init+0x1ec>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3f      	ldr	r2, [pc, #252]	; (80037c4 <HAL_GPIO_Init+0x2c4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00d      	beq.n	80036e8 <HAL_GPIO_Init+0x1e8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3e      	ldr	r2, [pc, #248]	; (80037c8 <HAL_GPIO_Init+0x2c8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <HAL_GPIO_Init+0x1e4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a3d      	ldr	r2, [pc, #244]	; (80037cc <HAL_GPIO_Init+0x2cc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d101      	bne.n	80036e0 <HAL_GPIO_Init+0x1e0>
 80036dc:	2303      	movs	r3, #3
 80036de:	e006      	b.n	80036ee <HAL_GPIO_Init+0x1ee>
 80036e0:	2304      	movs	r3, #4
 80036e2:	e004      	b.n	80036ee <HAL_GPIO_Init+0x1ee>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e002      	b.n	80036ee <HAL_GPIO_Init+0x1ee>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_GPIO_Init+0x1ee>
 80036ec:	2300      	movs	r3, #0
 80036ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f0:	f002 0203 	and.w	r2, r2, #3
 80036f4:	0092      	lsls	r2, r2, #2
 80036f6:	4093      	lsls	r3, r2
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036fe:	492f      	ldr	r1, [pc, #188]	; (80037bc <HAL_GPIO_Init+0x2bc>)
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	3302      	adds	r3, #2
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003718:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	492c      	ldr	r1, [pc, #176]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
 8003724:	e006      	b.n	8003734 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003726:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	43db      	mvns	r3, r3
 800372e:	4928      	ldr	r1, [pc, #160]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003730:	4013      	ands	r3, r2
 8003732:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003740:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	4922      	ldr	r1, [pc, #136]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	60cb      	str	r3, [r1, #12]
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	43db      	mvns	r3, r3
 8003756:	491e      	ldr	r1, [pc, #120]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003758:	4013      	ands	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4918      	ldr	r1, [pc, #96]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
 8003774:	e006      	b.n	8003784 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	43db      	mvns	r3, r3
 800377e:	4914      	ldr	r1, [pc, #80]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003780:	4013      	ands	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d021      	beq.n	80037d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	490e      	ldr	r1, [pc, #56]	; (80037d0 <HAL_GPIO_Init+0x2d0>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]
 800379c:	e021      	b.n	80037e2 <HAL_GPIO_Init+0x2e2>
 800379e:	bf00      	nop
 80037a0:	10320000 	.word	0x10320000
 80037a4:	10310000 	.word	0x10310000
 80037a8:	10220000 	.word	0x10220000
 80037ac:	10210000 	.word	0x10210000
 80037b0:	10120000 	.word	0x10120000
 80037b4:	10110000 	.word	0x10110000
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40010800 	.word	0x40010800
 80037c4:	40010c00 	.word	0x40010c00
 80037c8:	40011000 	.word	0x40011000
 80037cc:	40011400 	.word	0x40011400
 80037d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_GPIO_Init+0x304>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	43db      	mvns	r3, r3
 80037dc:	4909      	ldr	r1, [pc, #36]	; (8003804 <HAL_GPIO_Init+0x304>)
 80037de:	4013      	ands	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	3301      	adds	r3, #1
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f47f ae8e 	bne.w	8003514 <HAL_GPIO_Init+0x14>
  }
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	372c      	adds	r7, #44	; 0x2c
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40010400 	.word	0x40010400

08003808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e001      	b.n	800382a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	460b      	mov	r3, r1
 8003840:	807b      	strh	r3, [r7, #2]
 8003842:	4613      	mov	r3, r2
 8003844:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003846:	787b      	ldrb	r3, [r7, #1]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384c:	887a      	ldrh	r2, [r7, #2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003852:	e003      	b.n	800385c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	041a      	lsls	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	611a      	str	r2, [r3, #16]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
	...

08003868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e272      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8087 	beq.w	8003996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	4b92      	ldr	r3, [pc, #584]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b04      	cmp	r3, #4
 8003892:	d00c      	beq.n	80038ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003894:	4b8f      	ldr	r3, [pc, #572]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d112      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
 80038a0:	4b8c      	ldr	r3, [pc, #560]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ae:	4b89      	ldr	r3, [pc, #548]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06c      	beq.n	8003994 <HAL_RCC_OscConfig+0x12c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d168      	bne.n	8003994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e24c      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x76>
 80038d0:	4b80      	ldr	r3, [pc, #512]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7f      	ldr	r2, [pc, #508]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e02e      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b7b      	ldr	r3, [pc, #492]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7a      	ldr	r2, [pc, #488]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a77      	ldr	r2, [pc, #476]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0xbc>
 800390a:	4b72      	ldr	r3, [pc, #456]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a71      	ldr	r2, [pc, #452]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003924:	4b6b      	ldr	r3, [pc, #428]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6a      	ldr	r2, [pc, #424]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a67      	ldr	r2, [pc, #412]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe ff80 	bl	8002848 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe ff7c 	bl	8002848 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e200      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xe4>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fe ff6c 	bl	8002848 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fe ff68 	bl	8002848 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e1ec      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x10c>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a2:	4b4c      	ldr	r3, [pc, #304]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ae:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
 80039ba:	4b46      	ldr	r3, [pc, #280]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1c0      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4939      	ldr	r1, [pc, #228]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e03a      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <HAL_RCC_OscConfig+0x270>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fe ff21 	bl	8002848 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fe ff1d 	bl	8002848 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e1a1      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4927      	ldr	r1, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <HAL_RCC_OscConfig+0x270>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fe ff00 	bl	8002848 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fe fefc 	bl	8002848 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e180      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03a      	beq.n	8003aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d019      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_RCC_OscConfig+0x274>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fe fee0 	bl	8002848 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fe fedc 	bl	8002848 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e160      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f000 fafe 	bl	80040ac <RCC_Delay>
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_RCC_OscConfig+0x274>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fec6 	bl	8002848 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abe:	e00f      	b.n	8003ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fec2 	bl	8002848 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d908      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e146      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	42420000 	.word	0x42420000
 8003adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b92      	ldr	r3, [pc, #584]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e9      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a6 	beq.w	8003c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b8b      	ldr	r3, [pc, #556]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4a87      	ldr	r2, [pc, #540]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b14:	61d3      	str	r3, [r2, #28]
 8003b16:	4b85      	ldr	r3, [pc, #532]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b82      	ldr	r3, [pc, #520]	; (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4b7f      	ldr	r3, [pc, #508]	; (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7e      	ldr	r2, [pc, #504]	; (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fe83 	bl	8002848 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fe fe7f 	bl	8002848 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e103      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b75      	ldr	r3, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x312>
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a6e      	ldr	r2, [pc, #440]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	e02d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003b82:	4b6a      	ldr	r3, [pc, #424]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a69      	ldr	r2, [pc, #420]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a66      	ldr	r2, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x356>
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a60      	ldr	r2, [pc, #384]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4a5d      	ldr	r2, [pc, #372]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6213      	str	r3, [r2, #32]
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6213      	str	r3, [r2, #32]
 8003bca:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe fe33 	bl	8002848 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fe fe2f 	bl	8002848 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0b1      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RCC_OscConfig+0x37e>
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fe fe1d 	bl	8002848 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fe fe19 	bl	8002848 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e09b      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8087 	beq.w	8003d5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c50:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d061      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d146      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b33      	ldr	r3, [pc, #204]	; (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe fded 	bl	8002848 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fe fde9 	bl	8002848 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e06d      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c98:	d108      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c9a:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4921      	ldr	r1, [pc, #132]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a19      	ldr	r1, [r3, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	491b      	ldr	r1, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe fdbd 	bl	8002848 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe fdb9 	bl	8002848 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e03d      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x46a>
 8003cf0:	e035      	b.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fda6 	bl	8002848 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe fda2 	bl	8002848 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e026      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x498>
 8003d1e:	e01e      	b.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e019      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x500>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d001      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0d0      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b6a      	ldr	r3, [pc, #424]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d910      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b67      	ldr	r3, [pc, #412]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0207 	bic.w	r2, r3, #7
 8003d96:	4965      	ldr	r1, [pc, #404]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b63      	ldr	r3, [pc, #396]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc8:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a58      	ldr	r2, [pc, #352]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de0:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a52      	ldr	r2, [pc, #328]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	494d      	ldr	r1, [pc, #308]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d040      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d115      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	4b41      	ldr	r3, [pc, #260]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e073      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06b      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f023 0203 	bic.w	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4936      	ldr	r1, [pc, #216]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e5c:	f7fe fcf4 	bl	8002848 <HAL_GetTick>
 8003e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e64:	f7fe fcf0 	bl	8002848 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e053      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 020c 	and.w	r2, r3, #12
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d1eb      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d210      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 0207 	bic.w	r2, r3, #7
 8003ea2:	4922      	ldr	r1, [pc, #136]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e032      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4916      	ldr	r1, [pc, #88]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	490e      	ldr	r1, [pc, #56]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003efa:	f000 f821 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003efe:	4602      	mov	r2, r0
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	490a      	ldr	r1, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	5ccb      	ldrb	r3, [r1, r3]
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <HAL_RCC_ClockConfig+0x1cc>)
 8003f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1d0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe f92c 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08006b08 	.word	0x08006b08
 8003f38:	20000090 	.word	0x20000090
 8003f3c:	20000094 	.word	0x20000094

08003f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d002      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x30>
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x36>
 8003f6e:	e027      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f72:	613b      	str	r3, [r7, #16]
      break;
 8003f74:	e027      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0c9b      	lsrs	r3, r3, #18
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f80:	5cd3      	ldrb	r3, [r2, r3]
 8003f82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	0c5b      	lsrs	r3, r3, #17
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa2:	fb03 f202 	mul.w	r2, r3, r2
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e004      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fb4:	fb02 f303 	mul.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	613b      	str	r3, [r7, #16]
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc2:	613b      	str	r3, [r7, #16]
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	693b      	ldr	r3, [r7, #16]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	007a1200 	.word	0x007a1200
 8003fdc:	08006b20 	.word	0x08006b20
 8003fe0:	08006b30 	.word	0x08006b30
 8003fe4:	003d0900 	.word	0x003d0900

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000090 	.word	0x20000090

08003ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004000:	f7ff fff2 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	08006b18 	.word	0x08006b18

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	08006b18 	.word	0x08006b18

0800404c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	220f      	movs	r2, #15
 800405a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_RCC_GetClockConfig+0x58>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40022000 	.word	0x40022000

080040ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <RCC_Delay+0x34>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <RCC_Delay+0x38>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0a5b      	lsrs	r3, r3, #9
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040c8:	bf00      	nop
  }
  while (Delay --);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	60fa      	str	r2, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f9      	bne.n	80040c8 <RCC_Delay+0x1c>
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	20000090 	.word	0x20000090
 80040e4:	10624dd3 	.word	0x10624dd3

080040e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e041      	b.n	800417e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fa4c 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 fcba 	bl	8004aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	f241 1311 	movw	r3, #4369	; 0x1111
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_TIM_Base_Stop+0x38>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	f240 4344 	movw	r3, #1092	; 0x444
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_TIM_Base_Stop+0x38>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d001      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e03a      	b.n	8004262 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_TIM_Base_Start_IT+0x98>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x58>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d009      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x58>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a14      	ldr	r2, [pc, #80]	; (8004270 <HAL_TIM_Base_Start_IT+0x9c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x58>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a13      	ldr	r2, [pc, #76]	; (8004274 <HAL_TIM_Base_Start_IT+0xa0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d111      	bne.n	8004250 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d010      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	e007      	b.n	8004260 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800

08004278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f839 	bl	8004316 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 fbf2 	bl	8004aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <HAL_TIM_PWM_Start+0x24>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e022      	b.n	8004392 <HAL_TIM_PWM_Start+0x6a>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d109      	bne.n	8004366 <HAL_TIM_PWM_Start+0x3e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b01      	cmp	r3, #1
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	e015      	b.n	8004392 <HAL_TIM_PWM_Start+0x6a>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d109      	bne.n	8004380 <HAL_TIM_PWM_Start+0x58>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	bf14      	ite	ne
 8004378:	2301      	movne	r3, #1
 800437a:	2300      	moveq	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e008      	b.n	8004392 <HAL_TIM_PWM_Start+0x6a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e05e      	b.n	8004458 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start+0x82>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a8:	e013      	b.n	80043d2 <HAL_TIM_PWM_Start+0xaa>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_PWM_Start+0x92>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b8:	e00b      	b.n	80043d2 <HAL_TIM_PWM_Start+0xaa>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start+0xa2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c8:	e003      	b.n	80043d2 <HAL_TIM_PWM_Start+0xaa>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2201      	movs	r2, #1
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fde0 	bl	8004fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_TIM_PWM_Start+0x138>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d107      	bne.n	80043fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_TIM_PWM_Start+0x138>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_TIM_PWM_Start+0xfa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d009      	beq.n	8004422 <HAL_TIM_PWM_Start+0xfa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a14      	ldr	r2, [pc, #80]	; (8004464 <HAL_TIM_PWM_Start+0x13c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_TIM_PWM_Start+0xfa>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a12      	ldr	r2, [pc, #72]	; (8004468 <HAL_TIM_PWM_Start+0x140>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d111      	bne.n	8004446 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b06      	cmp	r3, #6
 8004432:	d010      	beq.n	8004456 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004444:	e007      	b.n	8004456 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800

0800446c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	6839      	ldr	r1, [r7, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fd8e 	bl	8004fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a29      	ldr	r2, [pc, #164]	; (8004530 <HAL_TIM_PWM_Stop+0xc4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d117      	bne.n	80044be <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	f241 1311 	movw	r3, #4369	; 0x1111
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <HAL_TIM_PWM_Stop+0x52>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	f240 4344 	movw	r3, #1092	; 0x444
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d107      	bne.n	80044be <HAL_TIM_PWM_Stop+0x52>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <HAL_TIM_PWM_Stop+0x82>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	f240 4344 	movw	r3, #1092	; 0x444
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d107      	bne.n	80044ee <HAL_TIM_PWM_Stop+0x82>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_PWM_Stop+0x92>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	e013      	b.n	8004526 <HAL_TIM_PWM_Stop+0xba>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Stop+0xa2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800450c:	e00b      	b.n	8004526 <HAL_TIM_PWM_Stop+0xba>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Stop+0xb2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	e003      	b.n	8004526 <HAL_TIM_PWM_Stop+0xba>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40012c00 	.word	0x40012c00

08004534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0202 	mvn.w	r2, #2
 8004560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa76 	bl	8004a68 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa69 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa78 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b04      	cmp	r3, #4
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0204 	mvn.w	r2, #4
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa4c 	bl	8004a68 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa3f 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa4e 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0208 	mvn.w	r2, #8
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2204      	movs	r2, #4
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa22 	bl	8004a68 <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa15 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa24 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b10      	cmp	r3, #16
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0210 	mvn.w	r2, #16
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2208      	movs	r2, #8
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9f8 	bl	8004a68 <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f9eb 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9fa 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d10e      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d107      	bne.n	80046b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0201 	mvn.w	r2, #1
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd fcd2 	bl	800205c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d10e      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d107      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fd3a 	bl	8005158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9be 	bl	8004a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0220 	mvn.w	r2, #32
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fd05 	bl	8005146 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800475e:	2302      	movs	r3, #2
 8004760:	e0ae      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b0c      	cmp	r3, #12
 800476e:	f200 809f 	bhi.w	80048b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080048b1 	.word	0x080048b1
 8004780:	080048b1 	.word	0x080048b1
 8004784:	080048b1 	.word	0x080048b1
 8004788:	080047ed 	.word	0x080047ed
 800478c:	080048b1 	.word	0x080048b1
 8004790:	080048b1 	.word	0x080048b1
 8004794:	080048b1 	.word	0x080048b1
 8004798:	0800482f 	.word	0x0800482f
 800479c:	080048b1 	.word	0x080048b1
 80047a0:	080048b1 	.word	0x080048b1
 80047a4:	080048b1 	.word	0x080048b1
 80047a8:	0800486f 	.word	0x0800486f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f9d6 	bl	8004b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0208 	orr.w	r2, r2, #8
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	619a      	str	r2, [r3, #24]
      break;
 80047ea:	e064      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fa1c 	bl	8004c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6999      	ldr	r1, [r3, #24]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	619a      	str	r2, [r3, #24]
      break;
 800482c:	e043      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fa65 	bl	8004d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0208 	orr.w	r2, r2, #8
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0204 	bic.w	r2, r2, #4
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	61da      	str	r2, [r3, #28]
      break;
 800486c:	e023      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 faaf 	bl	8004dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	021a      	lsls	r2, r3, #8
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	61da      	str	r2, [r3, #28]
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
      break;
 80048b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_TIM_ConfigClockSource+0x1c>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e0b4      	b.n	8004a4e <HAL_TIM_ConfigClockSource+0x186>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800490a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	d03e      	beq.n	800499c <HAL_TIM_ConfigClockSource+0xd4>
 800491e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004922:	f200 8087 	bhi.w	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 8004926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492a:	f000 8086 	beq.w	8004a3a <HAL_TIM_ConfigClockSource+0x172>
 800492e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004932:	d87f      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 8004934:	2b70      	cmp	r3, #112	; 0x70
 8004936:	d01a      	beq.n	800496e <HAL_TIM_ConfigClockSource+0xa6>
 8004938:	2b70      	cmp	r3, #112	; 0x70
 800493a:	d87b      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 800493c:	2b60      	cmp	r3, #96	; 0x60
 800493e:	d050      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004940:	2b60      	cmp	r3, #96	; 0x60
 8004942:	d877      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 8004944:	2b50      	cmp	r3, #80	; 0x50
 8004946:	d03c      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004948:	2b50      	cmp	r3, #80	; 0x50
 800494a:	d873      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d058      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x13a>
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d86f      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d064      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x15a>
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d86b      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b20      	cmp	r3, #32
 800495e:	d060      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x15a>
 8004960:	2b20      	cmp	r3, #32
 8004962:	d867      	bhi.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05c      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x15a>
 8004968:	2b10      	cmp	r3, #16
 800496a:	d05a      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x15a>
 800496c:	e062      	b.n	8004a34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800497e:	f000 faf0 	bl	8004f62 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	609a      	str	r2, [r3, #8]
      break;
 800499a:	e04f      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ac:	f000 fad9 	bl	8004f62 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049be:	609a      	str	r2, [r3, #8]
      break;
 80049c0:	e03c      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ce:	461a      	mov	r2, r3
 80049d0:	f000 fa50 	bl	8004e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2150      	movs	r1, #80	; 0x50
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 faa7 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 80049e0:	e02c      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ee:	461a      	mov	r2, r3
 80049f0:	f000 fa6e 	bl	8004ed0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2160      	movs	r1, #96	; 0x60
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fa97 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 8004a00:	e01c      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f000 fa30 	bl	8004e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2140      	movs	r1, #64	; 0x40
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fa87 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 8004a20:	e00c      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	f000 fa7e 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 8004a32:	e003      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      break;
 8004a38:	e000      	b.n	8004a3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr
	...

08004aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <TIM_Base_SetConfig+0xb8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00b      	beq.n	8004ad0 <TIM_Base_SetConfig+0x30>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d007      	beq.n	8004ad0 <TIM_Base_SetConfig+0x30>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <TIM_Base_SetConfig+0xbc>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_Base_SetConfig+0x30>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <TIM_Base_SetConfig+0xc0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d108      	bne.n	8004ae2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <TIM_Base_SetConfig+0xb8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_Base_SetConfig+0x62>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0x62>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <TIM_Base_SetConfig+0xbc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0x62>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <TIM_Base_SetConfig+0xc0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <TIM_Base_SetConfig+0xb8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	615a      	str	r2, [r3, #20]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800

08004b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f023 0201 	bic.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f023 0302 	bic.w	r3, r3, #2
 8004bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <TIM_OC1_SetConfig+0xc8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10c      	bne.n	8004bda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0308 	bic.w	r3, r3, #8
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <TIM_OC1_SetConfig+0xc8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d111      	bne.n	8004c06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	621a      	str	r2, [r3, #32]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40012c00 	.word	0x40012c00

08004c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f023 0210 	bic.w	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1d      	ldr	r2, [pc, #116]	; (8004d00 <TIM_OC2_SetConfig+0xd0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10d      	bne.n	8004cac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <TIM_OC2_SetConfig+0xd0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d113      	bne.n	8004cdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00

08004d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <TIM_OC3_SetConfig+0xd0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10d      	bne.n	8004d7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <TIM_OC3_SetConfig+0xd0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d113      	bne.n	8004dae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	621a      	str	r2, [r3, #32]
}
 8004dc8:	bf00      	nop
 8004dca:	371c      	adds	r7, #28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00

08004dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	031b      	lsls	r3, r3, #12
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <TIM_OC4_SetConfig+0x98>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d109      	bne.n	8004e4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	019b      	lsls	r3, r3, #6
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	40012c00 	.word	0x40012c00

08004e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f023 0201 	bic.w	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f023 030a 	bic.w	r3, r3, #10
 8004eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr

08004ed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0210 	bic.w	r2, r3, #16
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	031b      	lsls	r3, r3, #12
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	621a      	str	r2, [r3, #32]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f043 0307 	orr.w	r3, r3, #7
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b087      	sub	sp, #28
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	609a      	str	r2, [r3, #8]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e046      	b.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d009      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10c      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800

080050a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050bc:	2302      	movs	r3, #2
 80050be:	e03d      	b.n	800513c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e042      	b.n	8005202 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7fd fabf 	bl	8002714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2224      	movs	r2, #36	; 0x24
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f91c 	bl	80053ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b08a      	sub	sp, #40	; 0x28
 800520e:	af02      	add	r7, sp, #8
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b20      	cmp	r3, #32
 8005228:	d16d      	bne.n	8005306 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_Transmit+0x2c>
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e066      	b.n	8005308 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2221      	movs	r2, #33	; 0x21
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005248:	f7fd fafe 	bl	8002848 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	88fa      	ldrh	r2, [r7, #6]
 8005252:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	d108      	bne.n	8005276 <HAL_UART_Transmit+0x6c>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	e003      	b.n	800527e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800527e:	e02a      	b.n	80052d6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f840 	bl	8005310 <UART_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e036      	b.n	8005308 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10b      	bne.n	80052b8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	3302      	adds	r3, #2
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	e007      	b.n	80052c8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	781a      	ldrb	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1cf      	bne.n	8005280 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2200      	movs	r2, #0
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f810 	bl	8005310 <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e006      	b.n	8005308 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005306:	2302      	movs	r3, #2
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b090      	sub	sp, #64	; 0x40
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	4613      	mov	r3, r2
 800531e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005320:	e050      	b.n	80053c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005328:	d04c      	beq.n	80053c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800532a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <UART_WaitOnFlagUntilTimeout+0x30>
 8005330:	f7fd fa8a 	bl	8002848 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800533c:	429a      	cmp	r2, r3
 800533e:	d241      	bcs.n	80053c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005360:	637a      	str	r2, [r7, #52]	; 0x34
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3314      	adds	r3, #20
 800537a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	613b      	str	r3, [r7, #16]
   return(result);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	63bb      	str	r3, [r7, #56]	; 0x38
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005394:	623a      	str	r2, [r7, #32]
 8005396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	69f9      	ldr	r1, [r7, #28]
 800539a:	6a3a      	ldr	r2, [r7, #32]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e00f      	b.n	80053e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4013      	ands	r3, r2
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d09f      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3740      	adds	r7, #64	; 0x40
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005426:	f023 030c 	bic.w	r3, r3, #12
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	430b      	orrs	r3, r1
 8005432:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2c      	ldr	r2, [pc, #176]	; (8005500 <UART_SetConfig+0x114>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d103      	bne.n	800545c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005454:	f7fe fde6 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	e002      	b.n	8005462 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800545c:	f7fe fdce 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 8005460:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009a      	lsls	r2, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	4a22      	ldr	r2, [pc, #136]	; (8005504 <UART_SetConfig+0x118>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	0119      	lsls	r1, r3, #4
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009a      	lsls	r2, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	fbb2 f2f3 	udiv	r2, r2, r3
 8005498:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <UART_SetConfig+0x118>)
 800549a:	fba3 0302 	umull	r0, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2064      	movs	r0, #100	; 0x64
 80054a2:	fb00 f303 	mul.w	r3, r0, r3
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	3332      	adds	r3, #50	; 0x32
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <UART_SetConfig+0x118>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b8:	4419      	add	r1, r3
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009a      	lsls	r2, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <UART_SetConfig+0x118>)
 80054d2:	fba3 0302 	umull	r0, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2064      	movs	r0, #100	; 0x64
 80054da:	fb00 f303 	mul.w	r3, r0, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	3332      	adds	r3, #50	; 0x32
 80054e4:	4a07      	ldr	r2, [pc, #28]	; (8005504 <UART_SetConfig+0x118>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	f003 020f 	and.w	r2, r3, #15
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	440a      	add	r2, r1
 80054f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40013800 	.word	0x40013800
 8005504:	51eb851f 	.word	0x51eb851f

08005508 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551a:	2b84      	cmp	r3, #132	; 0x84
 800551c:	d005      	beq.n	800552a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800551e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	3303      	adds	r3, #3
 8005528:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800553a:	f000 fae7 	bl	8005b0c <vTaskStartScheduler>
  
  return osOK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}

08005544 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af04      	add	r7, sp, #16
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d020      	beq.n	8005598 <osThreadCreate+0x54>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01c      	beq.n	8005598 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685c      	ldr	r4, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691e      	ldr	r6, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ffc9 	bl	8005508 <makeFreeRtosPriority>
 8005576:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005580:	9202      	str	r2, [sp, #8]
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	9100      	str	r1, [sp, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	4632      	mov	r2, r6
 800558a:	4629      	mov	r1, r5
 800558c:	4620      	mov	r0, r4
 800558e:	f000 f8e8 	bl	8005762 <xTaskCreateStatic>
 8005592:	4603      	mov	r3, r0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e01c      	b.n	80055d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685c      	ldr	r4, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055a4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff ffab 	bl	8005508 <makeFreeRtosPriority>
 80055b2:	4602      	mov	r2, r0
 80055b4:	f107 030c 	add.w	r3, r7, #12
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	9200      	str	r2, [sp, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4632      	mov	r2, r6
 80055c0:	4629      	mov	r1, r5
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 f929 	bl	800581a <xTaskCreate>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d001      	beq.n	80055d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	e000      	b.n	80055d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <osDelay+0x16>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	e000      	b.n	80055f4 <osDelay+0x18>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fa55 	bl	8005aa4 <vTaskDelay>
  
  return osOK;
 80055fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f103 0208 	add.w	r2, r3, #8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800561c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f103 0208 	add.w	r2, r3, #8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f103 0208 	add.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr

0800565a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b6:	d103      	bne.n	80056c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e00c      	b.n	80056da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3308      	adds	r3, #8
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e002      	b.n	80056ce <vListInsert+0x2e>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d2f6      	bcs.n	80056c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6892      	ldr	r2, [r2, #8]
 8005726:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d103      	bne.n	8005744 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08e      	sub	sp, #56	; 0x38
 8005766:	af04      	add	r7, sp, #16
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	61fb      	str	r3, [r7, #28]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057a8:	23a0      	movs	r3, #160	; 0xa0
 80057aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2ba0      	cmp	r3, #160	; 0xa0
 80057b0:	d00a      	beq.n	80057c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	61bb      	str	r3, [r7, #24]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01e      	beq.n	800580c <xTaskCreateStatic+0xaa>
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057e6:	2300      	movs	r3, #0
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f850 	bl	80058a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005806:	f000 f8e3 	bl	80059d0 <prvAddNewTaskToReadyList>
 800580a:	e001      	b.n	8005810 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005810:	697b      	ldr	r3, [r7, #20]
	}
 8005812:	4618      	mov	r0, r3
 8005814:	3728      	adds	r7, #40	; 0x28
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08c      	sub	sp, #48	; 0x30
 800581e:	af04      	add	r7, sp, #16
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fe96 	bl	8006560 <pvPortMalloc>
 8005834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00e      	beq.n	800585a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800583c:	20a0      	movs	r0, #160	; 0xa0
 800583e:	f000 fe8f 	bl	8006560 <pvPortMalloc>
 8005842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
 8005850:	e005      	b.n	800585e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f000 ff48 	bl	80066e8 <vPortFree>
 8005858:	e001      	b.n	800585e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d017      	beq.n	8005894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	2300      	movs	r3, #0
 8005870:	9303      	str	r3, [sp, #12]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f80e 	bl	80058a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005888:	69f8      	ldr	r0, [r7, #28]
 800588a:	f000 f8a1 	bl	80059d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800588e:	2301      	movs	r3, #1
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e002      	b.n	800589a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800589a:	69bb      	ldr	r3, [r7, #24]
	}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058bc:	3b01      	subs	r3, #1
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f023 0307 	bic.w	r3, r3, #7
 80058ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	617b      	str	r3, [r7, #20]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e012      	b.n	8005918 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	7819      	ldrb	r1, [r3, #0]
 80058fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	3334      	adds	r3, #52	; 0x34
 8005902:	460a      	mov	r2, r1
 8005904:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	4413      	add	r3, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d006      	beq.n	8005920 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	d9e9      	bls.n	80058f2 <prvInitialiseNewTask+0x4e>
 800591e:	e000      	b.n	8005922 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005920:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	2b06      	cmp	r3, #6
 800592e:	d901      	bls.n	8005934 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005930:	2306      	movs	r3, #6
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fe79 	bl	8005642 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3318      	adds	r3, #24
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fe74 	bl	8005642 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	f1c3 0207 	rsb	r2, r3, #7
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2200      	movs	r2, #0
 800597c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	334c      	adds	r3, #76	; 0x4c
 8005984:	224c      	movs	r2, #76	; 0x4c
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f000 ffc1 	bl	8006910 <memset>
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <prvInitialiseNewTask+0x120>)
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <prvInitialiseNewTask+0x124>)
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <prvInitialiseNewTask+0x128>)
 800599e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	69b8      	ldr	r0, [r7, #24]
 80059a6:	f000 fc29 	bl	80061fc <pxPortInitialiseStack>
 80059aa:	4602      	mov	r2, r0
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059bc:	bf00      	nop
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20001344 	.word	0x20001344
 80059c8:	200013ac 	.word	0x200013ac
 80059cc:	20001414 	.word	0x20001414

080059d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059d8:	f000 fd00 	bl	80063dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <prvAddNewTaskToReadyList+0xb8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <prvAddNewTaskToReadyList+0xb8>)
 80059e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059ee:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <prvAddNewTaskToReadyList+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d110      	bne.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059fc:	f000 fad2 	bl	8005fa4 <prvInitialiseTaskLists>
 8005a00:	e00d      	b.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <prvAddNewTaskToReadyList+0xc0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d802      	bhi.n	8005a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a1e:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <prvAddNewTaskToReadyList+0xc4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <prvAddNewTaskToReadyList+0xc4>)
 8005a26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <prvAddNewTaskToReadyList+0xc8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <prvAddNewTaskToReadyList+0xc8>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <prvAddNewTaskToReadyList+0xcc>)
 8005a48:	441a      	add	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4610      	mov	r0, r2
 8005a52:	f7ff fe02 	bl	800565a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a56:	f000 fcf1 	bl	800643c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <prvAddNewTaskToReadyList+0xc0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00e      	beq.n	8005a80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a62:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <prvAddNewTaskToReadyList+0xbc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d207      	bcs.n	8005a80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <prvAddNewTaskToReadyList+0xd0>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200006f8 	.word	0x200006f8
 8005a8c:	200005f8 	.word	0x200005f8
 8005a90:	20000704 	.word	0x20000704
 8005a94:	20000714 	.word	0x20000714
 8005a98:	20000700 	.word	0x20000700
 8005a9c:	200005fc 	.word	0x200005fc
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d017      	beq.n	8005ae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <vTaskDelay+0x60>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <vTaskDelay+0x30>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	60bb      	str	r3, [r7, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ad4:	f000 f884 	bl	8005be0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ad8:	2100      	movs	r1, #0
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb28 	bl	8006130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ae0:	f000 f88c 	bl	8005bfc <xTaskResumeAll>
 8005ae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <vTaskDelay+0x64>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000720 	.word	0x20000720
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b1a:	463a      	mov	r2, r7
 8005b1c:	1d39      	adds	r1, r7, #4
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fb fae2 	bl	80010ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	9202      	str	r2, [sp, #8]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	2300      	movs	r3, #0
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2300      	movs	r3, #0
 8005b38:	460a      	mov	r2, r1
 8005b3a:	4921      	ldr	r1, [pc, #132]	; (8005bc0 <vTaskStartScheduler+0xb4>)
 8005b3c:	4821      	ldr	r0, [pc, #132]	; (8005bc4 <vTaskStartScheduler+0xb8>)
 8005b3e:	f7ff fe10 	bl	8005762 <xTaskCreateStatic>
 8005b42:	4603      	mov	r3, r0
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <vTaskStartScheduler+0xbc>)
 8005b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b48:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <vTaskStartScheduler+0xbc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e001      	b.n	8005b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d11b      	bne.n	8005b98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <vTaskStartScheduler+0xc0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	334c      	adds	r3, #76	; 0x4c
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <vTaskStartScheduler+0xc4>)
 8005b7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <vTaskStartScheduler+0xc8>)
 8005b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <vTaskStartScheduler+0xcc>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b8c:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <vTaskStartScheduler+0xd0>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b92:	f000 fbb1 	bl	80062f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b96:	e00e      	b.n	8005bb6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9e:	d10a      	bne.n	8005bb6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <vTaskStartScheduler+0xa8>
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08006b00 	.word	0x08006b00
 8005bc4:	08005f75 	.word	0x08005f75
 8005bc8:	2000071c 	.word	0x2000071c
 8005bcc:	200005f8 	.word	0x200005f8
 8005bd0:	200000ec 	.word	0x200000ec
 8005bd4:	20000718 	.word	0x20000718
 8005bd8:	20000704 	.word	0x20000704
 8005bdc:	200006fc 	.word	0x200006fc

08005be0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <vTaskSuspendAll+0x18>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	4a03      	ldr	r2, [pc, #12]	; (8005bf8 <vTaskSuspendAll+0x18>)
 8005bec:	6013      	str	r3, [r2, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000720 	.word	0x20000720

08005bfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c0a:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	603b      	str	r3, [r7, #0]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c28:	f000 fbd8 	bl	80063dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c2c:	4b38      	ldr	r3, [pc, #224]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	4a37      	ldr	r2, [pc, #220]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c36:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d161      	bne.n	8005d02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c3e:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <xTaskResumeAll+0x118>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d05d      	beq.n	8005d02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c46:	e02e      	b.n	8005ca6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c48:	4b33      	ldr	r3, [pc, #204]	; (8005d18 <xTaskResumeAll+0x11c>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3318      	adds	r3, #24
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fd5b 	bl	8005710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fd56 	bl	8005710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	2201      	movs	r2, #1
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	4b2b      	ldr	r3, [pc, #172]	; (8005d1c <xTaskResumeAll+0x120>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <xTaskResumeAll+0x120>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <xTaskResumeAll+0x124>)
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7ff fce4 	bl	800565a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <xTaskResumeAll+0x128>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d302      	bcc.n	8005ca6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <xTaskResumeAll+0x12c>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <xTaskResumeAll+0x11c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1cc      	bne.n	8005c48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cb4:	f000 fa18 	bl	80060e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <xTaskResumeAll+0x130>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cc4:	f000 f836 	bl	8005d34 <xTaskIncrementTick>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <xTaskResumeAll+0x12c>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f1      	bne.n	8005cc4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <xTaskResumeAll+0x130>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <xTaskResumeAll+0x12c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <xTaskResumeAll+0x134>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d02:	f000 fb9b 	bl	800643c <vPortExitCritical>

	return xAlreadyYielded;
 8005d06:	68bb      	ldr	r3, [r7, #8]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000720 	.word	0x20000720
 8005d14:	200006f8 	.word	0x200006f8
 8005d18:	200006b8 	.word	0x200006b8
 8005d1c:	20000700 	.word	0x20000700
 8005d20:	200005fc 	.word	0x200005fc
 8005d24:	200005f8 	.word	0x200005f8
 8005d28:	2000070c 	.word	0x2000070c
 8005d2c:	20000708 	.word	0x20000708
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d3e:	4b51      	ldr	r3, [pc, #324]	; (8005e84 <xTaskIncrementTick+0x150>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 808d 	bne.w	8005e62 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d48:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <xTaskIncrementTick+0x154>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d50:	4a4d      	ldr	r2, [pc, #308]	; (8005e88 <xTaskIncrementTick+0x154>)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d120      	bne.n	8005d9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d5c:	4b4b      	ldr	r3, [pc, #300]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <xTaskIncrementTick+0x48>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	603b      	str	r3, [r7, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xTaskIncrementTick+0x46>
 8005d7c:	4b43      	ldr	r3, [pc, #268]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	4b43      	ldr	r3, [pc, #268]	; (8005e90 <xTaskIncrementTick+0x15c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a41      	ldr	r2, [pc, #260]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	4a41      	ldr	r2, [pc, #260]	; (8005e90 <xTaskIncrementTick+0x15c>)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <xTaskIncrementTick+0x160>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	4a3f      	ldr	r2, [pc, #252]	; (8005e94 <xTaskIncrementTick+0x160>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	f000 f9a5 	bl	80060e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d9e:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <xTaskIncrementTick+0x164>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d34d      	bcc.n	8005e44 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da8:	4b38      	ldr	r3, [pc, #224]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <xTaskIncrementTick+0x82>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xTaskIncrementTick+0x84>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbc:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <xTaskIncrementTick+0x164>)
 8005dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dc2:	601a      	str	r2, [r3, #0]
					break;
 8005dc4:	e03e      	b.n	8005e44 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005dc6:	4b31      	ldr	r3, [pc, #196]	; (8005e8c <xTaskIncrementTick+0x158>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d203      	bcs.n	8005de6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dde:	4a2e      	ldr	r2, [pc, #184]	; (8005e98 <xTaskIncrementTick+0x164>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6013      	str	r3, [r2, #0]
						break;
 8005de4:	e02e      	b.n	8005e44 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fc90 	bl	8005710 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	3318      	adds	r3, #24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fc87 	bl	8005710 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	2201      	movs	r2, #1
 8005e08:	409a      	lsls	r2, r3
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <xTaskIncrementTick+0x168>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <xTaskIncrementTick+0x168>)
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <xTaskIncrementTick+0x16c>)
 8005e22:	441a      	add	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7ff fc15 	bl	800565a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <xTaskIncrementTick+0x170>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3b4      	bcc.n	8005da8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e42:	e7b1      	b.n	8005da8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e44:	4b17      	ldr	r3, [pc, #92]	; (8005ea4 <xTaskIncrementTick+0x170>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4a:	4915      	ldr	r1, [pc, #84]	; (8005ea0 <xTaskIncrementTick+0x16c>)
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d907      	bls.n	8005e6c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e004      	b.n	8005e6c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e62:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <xTaskIncrementTick+0x174>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <xTaskIncrementTick+0x174>)
 8005e6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <xTaskIncrementTick+0x178>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e78:	697b      	ldr	r3, [r7, #20]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000720 	.word	0x20000720
 8005e88:	200006fc 	.word	0x200006fc
 8005e8c:	200006b0 	.word	0x200006b0
 8005e90:	200006b4 	.word	0x200006b4
 8005e94:	20000710 	.word	0x20000710
 8005e98:	20000718 	.word	0x20000718
 8005e9c:	20000700 	.word	0x20000700
 8005ea0:	200005fc 	.word	0x200005fc
 8005ea4:	200005f8 	.word	0x200005f8
 8005ea8:	20000708 	.word	0x20000708
 8005eac:	2000070c 	.word	0x2000070c

08005eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eb6:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <vTaskSwitchContext+0xac>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ebe:	4b28      	ldr	r3, [pc, #160]	; (8005f60 <vTaskSwitchContext+0xb0>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ec4:	e044      	b.n	8005f50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <vTaskSwitchContext+0xb0>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ecc:	4b25      	ldr	r3, [pc, #148]	; (8005f64 <vTaskSwitchContext+0xb4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	fab3 f383 	clz	r3, r3
 8005ed8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	f1c3 031f 	rsb	r3, r3, #31
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	4921      	ldr	r1, [pc, #132]	; (8005f68 <vTaskSwitchContext+0xb8>)
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	607b      	str	r3, [r7, #4]
}
 8005f08:	bf00      	nop
 8005f0a:	e7fe      	b.n	8005f0a <vTaskSwitchContext+0x5a>
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <vTaskSwitchContext+0xb8>)
 8005f18:	4413      	add	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d104      	bne.n	8005f3c <vTaskSwitchContext+0x8c>
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <vTaskSwitchContext+0xbc>)
 8005f44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <vTaskSwitchContext+0xbc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	334c      	adds	r3, #76	; 0x4c
 8005f4c:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <vTaskSwitchContext+0xc0>)
 8005f4e:	6013      	str	r3, [r2, #0]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000720 	.word	0x20000720
 8005f60:	2000070c 	.word	0x2000070c
 8005f64:	20000700 	.word	0x20000700
 8005f68:	200005fc 	.word	0x200005fc
 8005f6c:	200005f8 	.word	0x200005f8
 8005f70:	200000ec 	.word	0x200000ec

08005f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f7c:	f000 f852 	bl	8006024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <prvIdleTask+0x28>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d9f9      	bls.n	8005f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <prvIdleTask+0x2c>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f98:	e7f0      	b.n	8005f7c <prvIdleTask+0x8>
 8005f9a:	bf00      	nop
 8005f9c:	200005fc 	.word	0x200005fc
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	e00c      	b.n	8005fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4a12      	ldr	r2, [pc, #72]	; (8006004 <prvInitialiseTaskLists+0x60>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fb20 	bl	8005604 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	d9ef      	bls.n	8005fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fd0:	480d      	ldr	r0, [pc, #52]	; (8006008 <prvInitialiseTaskLists+0x64>)
 8005fd2:	f7ff fb17 	bl	8005604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fd6:	480d      	ldr	r0, [pc, #52]	; (800600c <prvInitialiseTaskLists+0x68>)
 8005fd8:	f7ff fb14 	bl	8005604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <prvInitialiseTaskLists+0x6c>)
 8005fde:	f7ff fb11 	bl	8005604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fe2:	480c      	ldr	r0, [pc, #48]	; (8006014 <prvInitialiseTaskLists+0x70>)
 8005fe4:	f7ff fb0e 	bl	8005604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fe8:	480b      	ldr	r0, [pc, #44]	; (8006018 <prvInitialiseTaskLists+0x74>)
 8005fea:	f7ff fb0b 	bl	8005604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <prvInitialiseTaskLists+0x78>)
 8005ff0:	4a05      	ldr	r2, [pc, #20]	; (8006008 <prvInitialiseTaskLists+0x64>)
 8005ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <prvInitialiseTaskLists+0x7c>)
 8005ff6:	4a05      	ldr	r2, [pc, #20]	; (800600c <prvInitialiseTaskLists+0x68>)
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	200005fc 	.word	0x200005fc
 8006008:	20000688 	.word	0x20000688
 800600c:	2000069c 	.word	0x2000069c
 8006010:	200006b8 	.word	0x200006b8
 8006014:	200006cc 	.word	0x200006cc
 8006018:	200006e4 	.word	0x200006e4
 800601c:	200006b0 	.word	0x200006b0
 8006020:	200006b4 	.word	0x200006b4

08006024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800602a:	e019      	b.n	8006060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800602c:	f000 f9d6 	bl	80063dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006030:	4b10      	ldr	r3, [pc, #64]	; (8006074 <prvCheckTasksWaitingTermination+0x50>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fb67 	bl	8005710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006042:	4b0d      	ldr	r3, [pc, #52]	; (8006078 <prvCheckTasksWaitingTermination+0x54>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a0b      	ldr	r2, [pc, #44]	; (8006078 <prvCheckTasksWaitingTermination+0x54>)
 800604a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <prvCheckTasksWaitingTermination+0x58>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	4a0a      	ldr	r2, [pc, #40]	; (800607c <prvCheckTasksWaitingTermination+0x58>)
 8006054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006056:	f000 f9f1 	bl	800643c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f810 	bl	8006080 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006060:	4b06      	ldr	r3, [pc, #24]	; (800607c <prvCheckTasksWaitingTermination+0x58>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e1      	bne.n	800602c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200006cc 	.word	0x200006cc
 8006078:	200006f8 	.word	0x200006f8
 800607c:	200006e0 	.word	0x200006e0

08006080 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	334c      	adds	r3, #76	; 0x4c
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fc47 	bl	8006920 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006098:	2b00      	cmp	r3, #0
 800609a:	d108      	bne.n	80060ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fb21 	bl	80066e8 <vPortFree>
				vPortFree( pxTCB );
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fb1e 	bl	80066e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060ac:	e018      	b.n	80060e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d103      	bne.n	80060c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fb15 	bl	80066e8 <vPortFree>
	}
 80060be:	e00f      	b.n	80060e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d00a      	beq.n	80060e0 <prvDeleteTCB+0x60>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	60fb      	str	r3, [r7, #12]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <prvDeleteTCB+0x5e>
	}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <prvResetNextTaskUnblockTime+0x40>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <prvResetNextTaskUnblockTime+0x14>
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <prvResetNextTaskUnblockTime+0x16>
 80060fc:	2300      	movs	r3, #0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvResetNextTaskUnblockTime+0x44>)
 8006104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006108:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800610a:	e008      	b.n	800611e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <prvResetNextTaskUnblockTime+0x40>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	4a04      	ldr	r2, [pc, #16]	; (800612c <prvResetNextTaskUnblockTime+0x44>)
 800611c:	6013      	str	r3, [r2, #0]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	200006b0 	.word	0x200006b0
 800612c:	20000718 	.word	0x20000718

08006130 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800613a:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006140:	4b28      	ldr	r3, [pc, #160]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fae2 	bl	8005710 <uxListRemove>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	2201      	movs	r2, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43da      	mvns	r2, r3
 8006160:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4013      	ands	r3, r2
 8006166:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006168:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006170:	d10a      	bne.n	8006188 <prvAddCurrentTaskToDelayedList+0x58>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006178:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	481a      	ldr	r0, [pc, #104]	; (80061ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8006182:	f7ff fa6a 	bl	800565a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006186:	e026      	b.n	80061d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	429a      	cmp	r2, r3
 800619e:	d209      	bcs.n	80061b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a0:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7ff fa77 	bl	80056a0 <vListInsert>
}
 80061b2:	e010      	b.n	80061d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061b4:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7ff fa6d 	bl	80056a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d202      	bcs.n	80061d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061d0:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6013      	str	r3, [r2, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200006fc 	.word	0x200006fc
 80061e4:	200005f8 	.word	0x200005f8
 80061e8:	20000700 	.word	0x20000700
 80061ec:	200006e4 	.word	0x200006e4
 80061f0:	200006b4 	.word	0x200006b4
 80061f4:	200006b0 	.word	0x200006b0
 80061f8:	20000718 	.word	0x20000718

080061fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3b04      	subs	r3, #4
 800620c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b04      	subs	r3, #4
 800621a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b04      	subs	r3, #4
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <pxPortInitialiseStack+0x54>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b14      	subs	r3, #20
 8006236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b20      	subs	r3, #32
 8006242:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	08006255 	.word	0x08006255

08006254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <prvTaskExitError+0x54>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006266:	d00a      	beq.n	800627e <prvTaskExitError+0x2a>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	60fb      	str	r3, [r7, #12]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <prvTaskExitError+0x28>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60bb      	str	r3, [r7, #8]
}
 8006290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006292:	bf00      	nop
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0fc      	beq.n	8006294 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	2000009c 	.word	0x2000009c
 80062ac:	00000000 	.word	0x00000000

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80062ce:	4770      	bx	lr

080062d0 <pxCurrentTCBConst2>:
 80062d0:	200005f8 	.word	0x200005f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80062d8:	4806      	ldr	r0, [pc, #24]	; (80062f4 <prvPortStartFirstTask+0x1c>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	b662      	cpsie	i
 80062e4:	b661      	cpsie	f
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	df00      	svc	0
 80062f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062f2:	bf00      	nop
 80062f4:	e000ed08 	.word	0xe000ed08

080062f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062fe:	4b32      	ldr	r3, [pc, #200]	; (80063c8 <xPortStartScheduler+0xd0>)
 8006300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006320:	b2da      	uxtb	r2, r3
 8006322:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <xPortStartScheduler+0xd4>)
 8006324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006328:	2207      	movs	r2, #7
 800632a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632c:	e009      	b.n	8006342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3b01      	subs	r3, #1
 8006334:	4a26      	ldr	r2, [pc, #152]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d0ef      	beq.n	800632e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1c3 0307 	rsb	r3, r3, #7
 8006356:	2b04      	cmp	r3, #4
 8006358:	d00a      	beq.n	8006370 <xPortStartScheduler+0x78>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	60bb      	str	r3, [r7, #8]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006370:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <xPortStartScheduler+0xd8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <xPortStartScheduler+0xd8>)
 8006384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <xPortStartScheduler+0xdc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <xPortStartScheduler+0xdc>)
 8006394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <xPortStartScheduler+0xdc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <xPortStartScheduler+0xdc>)
 80063a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063a6:	f000 f8b9 	bl	800651c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <xPortStartScheduler+0xe0>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063b0:	f7ff ff92 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063b4:	f7ff fd7c 	bl	8005eb0 <vTaskSwitchContext>
	prvTaskExitError();
 80063b8:	f7ff ff4c 	bl	8006254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	e000e400 	.word	0xe000e400
 80063cc:	20000724 	.word	0x20000724
 80063d0:	20000728 	.word	0x20000728
 80063d4:	e000ed20 	.word	0xe000ed20
 80063d8:	2000009c 	.word	0x2000009c

080063dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	607b      	str	r3, [r7, #4]
}
 80063f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <vPortEnterCritical+0x58>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3301      	adds	r3, #1
 80063fc:	4a0d      	ldr	r2, [pc, #52]	; (8006434 <vPortEnterCritical+0x58>)
 80063fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <vPortEnterCritical+0x58>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d10f      	bne.n	8006428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <vPortEnterCritical+0x5c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <vPortEnterCritical+0x4c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	603b      	str	r3, [r7, #0]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <vPortEnterCritical+0x4a>
	}
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	2000009c 	.word	0x2000009c
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <vPortExitCritical+0x4c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <vPortExitCritical+0x24>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <vPortExitCritical+0x4c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3b01      	subs	r3, #1
 8006466:	4a08      	ldr	r2, [pc, #32]	; (8006488 <vPortExitCritical+0x4c>)
 8006468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <vPortExitCritical+0x4c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <vPortExitCritical+0x42>
 8006472:	2300      	movs	r3, #0
 8006474:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800647c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	2000009c 	.word	0x2000009c
 800648c:	00000000 	.word	0x00000000

08006490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006490:	f3ef 8009 	mrs	r0, PSP
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <pxCurrentTCBConst>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064a0:	6010      	str	r0, [r2, #0]
 80064a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064aa:	f380 8811 	msr	BASEPRI, r0
 80064ae:	f7ff fcff 	bl	8005eb0 <vTaskSwitchContext>
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	6808      	ldr	r0, [r1, #0]
 80064c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064c6:	f380 8809 	msr	PSP, r0
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	4770      	bx	lr

080064d0 <pxCurrentTCBConst>:
 80064d0:	200005f8 	.word	0x200005f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064f2:	f7ff fc1f 	bl	8005d34 <xTaskIncrementTick>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <SysTick_Handler+0x40>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <vPortSetupTimerInterrupt+0x30>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006526:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <vPortSetupTimerInterrupt+0x34>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <vPortSetupTimerInterrupt+0x38>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a09      	ldr	r2, [pc, #36]	; (8006558 <vPortSetupTimerInterrupt+0x3c>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	099b      	lsrs	r3, r3, #6
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <vPortSetupTimerInterrupt+0x40>)
 800653a:	3b01      	subs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <vPortSetupTimerInterrupt+0x30>)
 8006540:	2207      	movs	r2, #7
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr
 800654c:	e000e010 	.word	0xe000e010
 8006550:	e000e018 	.word	0xe000e018
 8006554:	20000090 	.word	0x20000090
 8006558:	10624dd3 	.word	0x10624dd3
 800655c:	e000e014 	.word	0xe000e014

08006560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800656c:	f7ff fb38 	bl	8005be0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006570:	4b58      	ldr	r3, [pc, #352]	; (80066d4 <pvPortMalloc+0x174>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006578:	f000 f910 	bl	800679c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800657c:	4b56      	ldr	r3, [pc, #344]	; (80066d8 <pvPortMalloc+0x178>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 808e 	bne.w	80066a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01d      	beq.n	80065cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006590:	2208      	movs	r2, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d014      	beq.n	80065cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f023 0307 	bic.w	r3, r3, #7
 80065a8:	3308      	adds	r3, #8
 80065aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <pvPortMalloc+0x6c>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	617b      	str	r3, [r7, #20]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d069      	beq.n	80066a6 <pvPortMalloc+0x146>
 80065d2:	4b42      	ldr	r3, [pc, #264]	; (80066dc <pvPortMalloc+0x17c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d864      	bhi.n	80066a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065dc:	4b40      	ldr	r3, [pc, #256]	; (80066e0 <pvPortMalloc+0x180>)
 80065de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065e0:	4b3f      	ldr	r3, [pc, #252]	; (80066e0 <pvPortMalloc+0x180>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065e6:	e004      	b.n	80065f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d903      	bls.n	8006604 <pvPortMalloc+0xa4>
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f1      	bne.n	80065e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006604:	4b33      	ldr	r3, [pc, #204]	; (80066d4 <pvPortMalloc+0x174>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660a:	429a      	cmp	r2, r3
 800660c:	d04b      	beq.n	80066a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2208      	movs	r2, #8
 8006614:	4413      	add	r3, r2
 8006616:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	2308      	movs	r3, #8
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	429a      	cmp	r2, r3
 800662e:	d91f      	bls.n	8006670 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <pvPortMalloc+0xf8>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	613b      	str	r3, [r7, #16]
}
 8006654:	bf00      	nop
 8006656:	e7fe      	b.n	8006656 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800666a:	69b8      	ldr	r0, [r7, #24]
 800666c:	f000 f8f8 	bl	8006860 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006670:	4b1a      	ldr	r3, [pc, #104]	; (80066dc <pvPortMalloc+0x17c>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	4a18      	ldr	r2, [pc, #96]	; (80066dc <pvPortMalloc+0x17c>)
 800667c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800667e:	4b17      	ldr	r3, [pc, #92]	; (80066dc <pvPortMalloc+0x17c>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <pvPortMalloc+0x184>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d203      	bcs.n	8006692 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800668a:	4b14      	ldr	r3, [pc, #80]	; (80066dc <pvPortMalloc+0x17c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <pvPortMalloc+0x184>)
 8006690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	4b10      	ldr	r3, [pc, #64]	; (80066d8 <pvPortMalloc+0x178>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	431a      	orrs	r2, r3
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066a6:	f7ff faa9 	bl	8005bfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <pvPortMalloc+0x16a>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	60fb      	str	r3, [r7, #12]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <pvPortMalloc+0x168>
	return pvReturn;
 80066ca:	69fb      	ldr	r3, [r7, #28]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	; 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20001334 	.word	0x20001334
 80066d8:	20001340 	.word	0x20001340
 80066dc:	20001338 	.word	0x20001338
 80066e0:	2000132c 	.word	0x2000132c
 80066e4:	2000133c 	.word	0x2000133c

080066e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d048      	beq.n	800678c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066fa:	2308      	movs	r3, #8
 80066fc:	425b      	negs	r3, r3
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4413      	add	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	4b21      	ldr	r3, [pc, #132]	; (8006794 <vPortFree+0xac>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <vPortFree+0x44>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	60fb      	str	r3, [r7, #12]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <vPortFree+0x62>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60bb      	str	r3, [r7, #8]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	4b11      	ldr	r3, [pc, #68]	; (8006794 <vPortFree+0xac>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4013      	ands	r3, r2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d019      	beq.n	800678c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d115      	bne.n	800678c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <vPortFree+0xac>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	43db      	mvns	r3, r3
 800676a:	401a      	ands	r2, r3
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006770:	f7ff fa36 	bl	8005be0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	4b07      	ldr	r3, [pc, #28]	; (8006798 <vPortFree+0xb0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4413      	add	r3, r2
 800677e:	4a06      	ldr	r2, [pc, #24]	; (8006798 <vPortFree+0xb0>)
 8006780:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006782:	6938      	ldr	r0, [r7, #16]
 8006784:	f000 f86c 	bl	8006860 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006788:	f7ff fa38 	bl	8005bfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800678c:	bf00      	nop
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20001340 	.word	0x20001340
 8006798:	20001338 	.word	0x20001338

0800679c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80067a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <prvHeapInit+0xac>)
 80067aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3307      	adds	r3, #7
 80067ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0307 	bic.w	r3, r3, #7
 80067c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	4a1f      	ldr	r2, [pc, #124]	; (8006848 <prvHeapInit+0xac>)
 80067cc:	4413      	add	r3, r2
 80067ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067d4:	4a1d      	ldr	r2, [pc, #116]	; (800684c <prvHeapInit+0xb0>)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067da:	4b1c      	ldr	r3, [pc, #112]	; (800684c <prvHeapInit+0xb0>)
 80067dc:	2200      	movs	r2, #0
 80067de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	4413      	add	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067e8:	2208      	movs	r2, #8
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0307 	bic.w	r3, r3, #7
 80067f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <prvHeapInit+0xb4>)
 80067fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067fe:	4b14      	ldr	r3, [pc, #80]	; (8006850 <prvHeapInit+0xb4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006806:	4b12      	ldr	r3, [pc, #72]	; (8006850 <prvHeapInit+0xb4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	1ad2      	subs	r2, r2, r3
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800681c:	4b0c      	ldr	r3, [pc, #48]	; (8006850 <prvHeapInit+0xb4>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <prvHeapInit+0xb8>)
 800682a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a09      	ldr	r2, [pc, #36]	; (8006858 <prvHeapInit+0xbc>)
 8006832:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006834:	4b09      	ldr	r3, [pc, #36]	; (800685c <prvHeapInit+0xc0>)
 8006836:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800683a:	601a      	str	r2, [r3, #0]
}
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	2000072c 	.word	0x2000072c
 800684c:	2000132c 	.word	0x2000132c
 8006850:	20001334 	.word	0x20001334
 8006854:	2000133c 	.word	0x2000133c
 8006858:	20001338 	.word	0x20001338
 800685c:	20001340 	.word	0x20001340

08006860 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006868:	4b27      	ldr	r3, [pc, #156]	; (8006908 <prvInsertBlockIntoFreeList+0xa8>)
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e002      	b.n	8006874 <prvInsertBlockIntoFreeList+0x14>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d8f7      	bhi.n	800686e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4413      	add	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d108      	bne.n	80068a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	441a      	add	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	441a      	add	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d118      	bne.n	80068e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b14      	ldr	r3, [pc, #80]	; (800690c <prvInsertBlockIntoFreeList+0xac>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d00d      	beq.n	80068de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	441a      	add	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e008      	b.n	80068f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <prvInsertBlockIntoFreeList+0xac>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e003      	b.n	80068f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d002      	beq.n	80068fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr
 8006908:	2000132c 	.word	0x2000132c
 800690c:	20001334 	.word	0x20001334

08006910 <memset>:
 8006910:	4603      	mov	r3, r0
 8006912:	4402      	add	r2, r0
 8006914:	4293      	cmp	r3, r2
 8006916:	d100      	bne.n	800691a <memset+0xa>
 8006918:	4770      	bx	lr
 800691a:	f803 1b01 	strb.w	r1, [r3], #1
 800691e:	e7f9      	b.n	8006914 <memset+0x4>

08006920 <_reclaim_reent>:
 8006920:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <_reclaim_reent+0xa8>)
 8006922:	b570      	push	{r4, r5, r6, lr}
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4604      	mov	r4, r0
 8006928:	4283      	cmp	r3, r0
 800692a:	d04b      	beq.n	80069c4 <_reclaim_reent+0xa4>
 800692c:	69c3      	ldr	r3, [r0, #28]
 800692e:	b143      	cbz	r3, 8006942 <_reclaim_reent+0x22>
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d144      	bne.n	80069c0 <_reclaim_reent+0xa0>
 8006936:	69e3      	ldr	r3, [r4, #28]
 8006938:	6819      	ldr	r1, [r3, #0]
 800693a:	b111      	cbz	r1, 8006942 <_reclaim_reent+0x22>
 800693c:	4620      	mov	r0, r4
 800693e:	f000 f86b 	bl	8006a18 <_free_r>
 8006942:	6961      	ldr	r1, [r4, #20]
 8006944:	b111      	cbz	r1, 800694c <_reclaim_reent+0x2c>
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f866 	bl	8006a18 <_free_r>
 800694c:	69e1      	ldr	r1, [r4, #28]
 800694e:	b111      	cbz	r1, 8006956 <_reclaim_reent+0x36>
 8006950:	4620      	mov	r0, r4
 8006952:	f000 f861 	bl	8006a18 <_free_r>
 8006956:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006958:	b111      	cbz	r1, 8006960 <_reclaim_reent+0x40>
 800695a:	4620      	mov	r0, r4
 800695c:	f000 f85c 	bl	8006a18 <_free_r>
 8006960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006962:	b111      	cbz	r1, 800696a <_reclaim_reent+0x4a>
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f857 	bl	8006a18 <_free_r>
 800696a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800696c:	b111      	cbz	r1, 8006974 <_reclaim_reent+0x54>
 800696e:	4620      	mov	r0, r4
 8006970:	f000 f852 	bl	8006a18 <_free_r>
 8006974:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006976:	b111      	cbz	r1, 800697e <_reclaim_reent+0x5e>
 8006978:	4620      	mov	r0, r4
 800697a:	f000 f84d 	bl	8006a18 <_free_r>
 800697e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006980:	b111      	cbz	r1, 8006988 <_reclaim_reent+0x68>
 8006982:	4620      	mov	r0, r4
 8006984:	f000 f848 	bl	8006a18 <_free_r>
 8006988:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800698a:	b111      	cbz	r1, 8006992 <_reclaim_reent+0x72>
 800698c:	4620      	mov	r0, r4
 800698e:	f000 f843 	bl	8006a18 <_free_r>
 8006992:	6a23      	ldr	r3, [r4, #32]
 8006994:	b1b3      	cbz	r3, 80069c4 <_reclaim_reent+0xa4>
 8006996:	4620      	mov	r0, r4
 8006998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800699c:	4718      	bx	r3
 800699e:	5949      	ldr	r1, [r1, r5]
 80069a0:	b941      	cbnz	r1, 80069b4 <_reclaim_reent+0x94>
 80069a2:	3504      	adds	r5, #4
 80069a4:	69e3      	ldr	r3, [r4, #28]
 80069a6:	2d80      	cmp	r5, #128	; 0x80
 80069a8:	68d9      	ldr	r1, [r3, #12]
 80069aa:	d1f8      	bne.n	800699e <_reclaim_reent+0x7e>
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 f833 	bl	8006a18 <_free_r>
 80069b2:	e7c0      	b.n	8006936 <_reclaim_reent+0x16>
 80069b4:	680e      	ldr	r6, [r1, #0]
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 f82e 	bl	8006a18 <_free_r>
 80069bc:	4631      	mov	r1, r6
 80069be:	e7ef      	b.n	80069a0 <_reclaim_reent+0x80>
 80069c0:	2500      	movs	r5, #0
 80069c2:	e7ef      	b.n	80069a4 <_reclaim_reent+0x84>
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	bf00      	nop
 80069c8:	200000ec 	.word	0x200000ec

080069cc <__libc_init_array>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	2600      	movs	r6, #0
 80069d0:	4d0c      	ldr	r5, [pc, #48]	; (8006a04 <__libc_init_array+0x38>)
 80069d2:	4c0d      	ldr	r4, [pc, #52]	; (8006a08 <__libc_init_array+0x3c>)
 80069d4:	1b64      	subs	r4, r4, r5
 80069d6:	10a4      	asrs	r4, r4, #2
 80069d8:	42a6      	cmp	r6, r4
 80069da:	d109      	bne.n	80069f0 <__libc_init_array+0x24>
 80069dc:	f000 f870 	bl	8006ac0 <_init>
 80069e0:	2600      	movs	r6, #0
 80069e2:	4d0a      	ldr	r5, [pc, #40]	; (8006a0c <__libc_init_array+0x40>)
 80069e4:	4c0a      	ldr	r4, [pc, #40]	; (8006a10 <__libc_init_array+0x44>)
 80069e6:	1b64      	subs	r4, r4, r5
 80069e8:	10a4      	asrs	r4, r4, #2
 80069ea:	42a6      	cmp	r6, r4
 80069ec:	d105      	bne.n	80069fa <__libc_init_array+0x2e>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f4:	4798      	blx	r3
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7ee      	b.n	80069d8 <__libc_init_array+0xc>
 80069fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fe:	4798      	blx	r3
 8006a00:	3601      	adds	r6, #1
 8006a02:	e7f2      	b.n	80069ea <__libc_init_array+0x1e>
 8006a04:	08006b34 	.word	0x08006b34
 8006a08:	08006b34 	.word	0x08006b34
 8006a0c:	08006b34 	.word	0x08006b34
 8006a10:	08006b38 	.word	0x08006b38

08006a14 <__retarget_lock_acquire_recursive>:
 8006a14:	4770      	bx	lr

08006a16 <__retarget_lock_release_recursive>:
 8006a16:	4770      	bx	lr

08006a18 <_free_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d040      	beq.n	8006aa2 <_free_r+0x8a>
 8006a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a24:	1f0c      	subs	r4, r1, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bfb8      	it	lt
 8006a2a:	18e4      	addlt	r4, r4, r3
 8006a2c:	f000 f83c 	bl	8006aa8 <__malloc_lock>
 8006a30:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <_free_r+0x8c>)
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	b933      	cbnz	r3, 8006a44 <_free_r+0x2c>
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	6014      	str	r4, [r2, #0]
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a40:	f000 b838 	b.w	8006ab4 <__malloc_unlock>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d908      	bls.n	8006a5a <_free_r+0x42>
 8006a48:	6820      	ldr	r0, [r4, #0]
 8006a4a:	1821      	adds	r1, r4, r0
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	bf01      	itttt	eq
 8006a50:	6819      	ldreq	r1, [r3, #0]
 8006a52:	685b      	ldreq	r3, [r3, #4]
 8006a54:	1809      	addeq	r1, r1, r0
 8006a56:	6021      	streq	r1, [r4, #0]
 8006a58:	e7ed      	b.n	8006a36 <_free_r+0x1e>
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	b10b      	cbz	r3, 8006a64 <_free_r+0x4c>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d9fa      	bls.n	8006a5a <_free_r+0x42>
 8006a64:	6811      	ldr	r1, [r2, #0]
 8006a66:	1850      	adds	r0, r2, r1
 8006a68:	42a0      	cmp	r0, r4
 8006a6a:	d10b      	bne.n	8006a84 <_free_r+0x6c>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	4401      	add	r1, r0
 8006a70:	1850      	adds	r0, r2, r1
 8006a72:	4283      	cmp	r3, r0
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	d1e0      	bne.n	8006a3a <_free_r+0x22>
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4408      	add	r0, r1
 8006a7e:	6010      	str	r0, [r2, #0]
 8006a80:	6053      	str	r3, [r2, #4]
 8006a82:	e7da      	b.n	8006a3a <_free_r+0x22>
 8006a84:	d902      	bls.n	8006a8c <_free_r+0x74>
 8006a86:	230c      	movs	r3, #12
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	e7d6      	b.n	8006a3a <_free_r+0x22>
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	1821      	adds	r1, r4, r0
 8006a90:	428b      	cmp	r3, r1
 8006a92:	bf01      	itttt	eq
 8006a94:	6819      	ldreq	r1, [r3, #0]
 8006a96:	685b      	ldreq	r3, [r3, #4]
 8006a98:	1809      	addeq	r1, r1, r0
 8006a9a:	6021      	streq	r1, [r4, #0]
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	6054      	str	r4, [r2, #4]
 8006aa0:	e7cb      	b.n	8006a3a <_free_r+0x22>
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	20001480 	.word	0x20001480

08006aa8 <__malloc_lock>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__malloc_lock+0x8>)
 8006aaa:	f7ff bfb3 	b.w	8006a14 <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	2000147c 	.word	0x2000147c

08006ab4 <__malloc_unlock>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	; (8006abc <__malloc_unlock+0x8>)
 8006ab6:	f7ff bfae 	b.w	8006a16 <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	2000147c 	.word	0x2000147c

08006ac0 <_init>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr

08006acc <_fini>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr
